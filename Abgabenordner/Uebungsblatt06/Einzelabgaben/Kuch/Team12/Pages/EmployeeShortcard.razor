@page "/EmployeeShortcard"

@using Team12.Data
@using BlazorDownloadFile
@using DocumentFormat.OpenXml;
@using DocumentFormat.OpenXml.Packaging;
@using DocumentFormat.OpenXml.Wordprocessing;
@using System.IO;
@inject IBlazorDownloadFileService _blazordownloadservice

<title>EmployeeShortcard.razor</title>


<ul class="card text-black bg-white border-dark mb-3">

    <li>Vorname: @Worker.Vorname </li>
    <li>Nachname: @Worker.Nachname </li>
    <li>
        Projekte: <br>
        <ul>
            @foreach (string project in Worker.PrevProjects)
            {
                <li>@project</li>
            }
        </ul>
    </li>
    <li>Geburtstag: @Worker.Geburtstag.ToString("dd.MM.yyyy")</li>
    <li><button class="btn btn-primary" @onclick="(() => CreateWord(Worker))">Create Word</button></li>
</ul>



@code {
    [Parameter]
    public Employee Worker { get; set; }

    private async Task CreateWord(Employee worker)
    {
        using (MemoryStream mem = new MemoryStream())
        {
            using (WordprocessingDocument doc = WordprocessingDocument.Create(mem, WordprocessingDocumentType.Document))
            {

                //// Creates the MainDocumentPart and add it to the document (doc)

                MainDocumentPart mainPart = doc.AddMainDocumentPart();

                mainPart.Document = new Document();
                Body docBody = new Body();



                //Darstellung Vorname
                Paragraph first = new Paragraph();
                Run r1 = new Run();
                RunProperties rp1 = new RunProperties();
                rp1.Bold = new Bold();
                r1.Append(rp1);
                Text vornamehead = new Text("Vorname:\t") { Space = SpaceProcessingModeValues.Preserve };
                r1.Append(vornamehead);
                first.Append(r1);

                Run r2 = new Run();
                Text vorname = new Text(worker.Vorname);
                r2.Append(vorname);
                first.Append(r2);
                docBody.Append(first);

                //Darstellung Nachname
                Paragraph second = new Paragraph();
                Run r3 = new Run();
                RunProperties rp2 = new RunProperties();
                rp2.Bold = new Bold();
                r3.Append(rp2);
                Text nachnamehead = new Text("Nachname:\t") { Space = SpaceProcessingModeValues.Preserve };
                r3.Append(nachnamehead);
                second.Append(r3);

                Run r4 = new Run();
                Text nachname = new Text(worker.Nachname);
                r4.Append(nachname);
                second.Append(r4);
                docBody.Append(second);

                //Darstellung Geburtstag
                Paragraph third = new Paragraph();
                Run r5 = new Run();
                RunProperties rp3 = new RunProperties();
                rp3.Bold = new Bold();
                r5.Append(rp3);
                Text geburtstaghead = new Text("Geburtstag:\t") { Space = SpaceProcessingModeValues.Preserve };
                r5.Append(geburtstaghead);
                third.Append(r5);

                Run r6 = new Run();
                Text geburtstag = new Text(worker.Geburtstag.ToString("dd.MM.yyyy"));
                r6.Append(geburtstag);
                third.Append(r6);
                docBody.Append(third);

                //Darstellung Projekte
                Paragraph fourth = new Paragraph();
                Run r7 = new Run();
                RunProperties rp4 = new RunProperties();
                rp4.Bold = new Bold();
                r7.Append(rp4);
                Text projekthead = new Text("Projekte:\t") { Space = SpaceProcessingModeValues.Preserve };
                r7.Append(projekthead);
                fourth.Append(r7);

                int count = 1;
                int length = worker.PrevProjects.Count();

                foreach (string projekt in worker.PrevProjects)
                {
                    fourth.Append(new Run(new Text(projekt)));

                    if (count != length)
                    {
                        fourth.Append(new Run(new Text(", ") { Space = SpaceProcessingModeValues.Preserve }));
                    }
                    ++count;
                }
                docBody.Append(fourth);

                mainPart.Document.Append(docBody);
            }

            await _blazordownloadservice.DownloadFile(worker.Nachname + worker.Vorname + ".docx", mem, "application/octet-stream");
        }



    }

}

}
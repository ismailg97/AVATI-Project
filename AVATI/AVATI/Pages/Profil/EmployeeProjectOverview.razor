@page "/employeeProject"
@page "/employeeProject/{Id:int}"

@using AVATI.Data
@using DocumentFormat.OpenXml.Drawing
@using DocumentFormat.OpenXml.InkML

@inject IProjektService _projektService
@inject JsonImport _jsonImport

@inject IProjectActivityService _projctActivityService
@inject NavigationManager _navManager
@inject IEmployeeService _employeeService

<h3>Projektübersicht</h3>


<table id="table" data-show-refresh="true" class="table align-middle mb-5">
    <thead>
    <div class="form-group">
        <input class="form-control" type="text" placeholder="Suche Projekt..."
               @bind="Filter"
               @bind:event="oninput">
    </div>
    <tr>
        <th scope="col">Projekttitel</th>
        <th scope="col">Projektbeschreibung</th>
        <th scope="col">Projekttätigkeit</th>
    </tr>
    </thead>
    <tbody>
    @if (_projctActivityService.GetProjectActivitiesEmployee(Id).Any())
    {
        @foreach (var activity in _projctActivityService.GetProjectActivitiesEmployee(Id))
        {
            //int projId = activity.ProjectID;
            Project proj = _projektService.GetProject(activity.ProjectID);
                <tr>
                    <td>@proj.Projecttitel</td>
                    <td>@proj.Projectdescription</td>
                    <td>
                        <input class="rounded form-control" type="text" @bind="activity.Description" placeholder="@activity.Description">
                    </td>
                    <td>
                        <button type="button" @onclick="(() => { setProjectActivity(Id, proj.ProjectID, activity.Description); })" class="btn btn-secondary">Bearbeiten</button>
                        <button type="button" @onclick="(() => { deleteProjectActivity(Id, proj.ProjectID); })" class="btn btn-danger">Löschen</button>
                    </td>
                </tr>
        }
    }
    else
    {
        <tr>
            <td></td>
            <td></td>
        </tr>
    }
    @if (_projektService.GetAllProjects().Any())
    {
        @foreach (var projects in _projektService.GetAllProjects())
        { 
            @if (!IsVisible(projects.Projecttitel))
                                 continue;
            
                if (projects.Employees.Find(x => x.EmployeeID == Id) == null )
                {
                   
                    <tr>
                        <td>@projects.Projecttitel</td>
                        <td>@projects.Projectdescription</td>
                        <td>
                            <input class="rounded form-control" type="text" @bind="projActivity.Description" placeholder="">
                        </td>
                        <td>
                            <button type="button" @onclick="(() => { setProjectActivity(Id, projects.ProjectID, projActivity.Description); })" class="btn btn-success">Hinzufügen</button>

                        </td>
                    </tr>
                }
            
        }
    }
    else
    {
        <tr>
            <td></td>
            <td></td>
            <td></td>
        </tr>
    }
    </tbody>
</table>


@code
{
    [Parameter]
    public int Id { get; set; }

    public Employee Emp { get; set; }

    public ProjectActivity projActivity { get; set; }
    public Project project { get; set; }


    public string Input { get; set; }
    public bool Clicked { get; set; } = false;

    private string Filter { get; set; }

    protected override void OnInitialized()
    {
        projActivity = new ProjectActivity();
        Emp = new Employee();
    }

    public bool IsVisible(string titel)
    {
        if (string.IsNullOrEmpty(Filter))
        {
            return true;
        }
        return titel.Contains(Filter, StringComparison.OrdinalIgnoreCase);
    }

    public void ProjectSuche()
    {
        Clicked = true;
        List<Project> projects = _projektService.GetAllProjects();
        _projektService.SearchProject(projects, Input);
    }

    public void setProjectActivity(int empId, int projId, string description)
    {
        _projctActivityService.SetProjectActivity(empId, projId, description);
        _navManager.NavigateTo("/employeeProject/" + Emp.EmployeeID, forceLoad: true);
    }

    public void deleteProjectActivity(int empId, int projId)
    {
        
        _projctActivityService.DeleteProjectActivityEmployee(empId, projId);
        _navManager.NavigateTo("/employeeProject/" + Emp.EmployeeID, forceLoad: true);
    }


}
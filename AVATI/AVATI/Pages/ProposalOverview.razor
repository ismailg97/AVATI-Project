@page "/ProposalOverview"
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics.CodeAnalysis
@using AVATI.Data
@inject ProposalService _proposal

<button class="btn btn-success float-left">Neues Angebot</button>

<div class="container col-10">
    <div class="row row-cols-1 row-cols-md-1 g-4">
        @foreach (var proposal in _proposal.Proposals)
        {
            <div class="col-4 mb-4">
                <div class="card border-dark h-100">
                    <div class="card-header text-center">
                        <p class="font-weight-bolder">Angebot: @proposal.ProposalId.ToString()</p>
                        <p>
                            <button class="btn btn-outline-dark btn-sm">Dokument erzeugen</button><button class="btn btn-outline-success btn-sm ml-2">Projekt erzeugen</button>
                        </p>
                        <button class="btn btn-outline-secondary btn-sm">Editieren</button>
                        <button class="btn btn-outline-info btn-sm">Kopieren</button>
                        <button class="btn btn-outline-danger btn-sm">Löschen</button>
                    </div>
                    <div class="card-body text-center">
                        <h5 class="card-title text-center">@proposal.ProposalTitle</h5>
                        <button class="btn btn-outline-dark btn-block mb-3" @onclick="(() => { ChangeVisible(1, proposal.ProposalId); })">
                            Mitarbeiterprofile
                        </button>
                        <div class="card-text @(showEmployee[proposal.ProposalId] ? "collapse" : "")">
                            <button class="btn btn-outline-success btn-sm mr-3 mb-3">Hinzufügen</button>
                            <button class="btn btn-outline-danger btn-sm mb-3">Entfernen</button>
                            <ul class="list-group mb-3 text-left">
                                <!-- Implement foreach Employee -->
                                @foreach (var employee in proposal.EmployeeTemps)
                                {
                                    <li class="list-group-item border-dark bg-light text-left font-weight-bold text-black mb-1">
                                        @employee.Name
                                        <button class="btn float-right btn-info btn-sm">Details</button>
                                        <button class="btn btn-primary float-right btn-sm mr-3" @onclick=@(() => { Show(employee, 0);})>RC: @employee.RC </button>
                                    </li>
                                }
                            </ul>
                        </div>

                        <button class="btn btn-outline-dark btn-block mb-3" @onclick="(() => { ChangeVisible(2,proposal.ProposalId); })">
                            Hard- und Softskills
                        </button>
                        <div class=@(showAttributes[proposal.ProposalId] ? "collapse" : "")>
                            <ul class="list-group mb-3 text-left">
                                <li class="list-group-item border-dark bg-light text-left text-black mb-1">
                                    <b>Hardskills:</b> @string.Join(", ", proposal.Hardskills.Select(e => e.Description))
                                </li>
                                <li class="list-group-item border-dark bg-light text-left text-black mb-1">
                                    <b>Softskills:</b> @string.Join(", ", proposal.Softskills)
                                </li>
                                <li class="list-group-item border-dark bg-light text-left text-black mb-1">
                                    <b>Branchen:</b> @string.Join(", ", proposal.Fields)
                                </li>
                            </ul>
                        </div>
                        <button class="btn btn-outline-dark btn-block mb-3" @onclick="(() => { ChangeVisible(3,proposal.ProposalId); })">
                            Zusatzinformationen
                        </button>
                        <li class="list-group-item border-dark bg-light text-left text-black mb-1 @(showAdditionalInfo[proposal.ProposalId] ? "collapse" : "")">
                            @proposal.AdditionalInfo
                        </li>
                    </div>
                </div>
            </div>
            index += 3;
        }

    </div>

</div>
<!-- RC - Level Pop-Up -->
@if (ShowPop)
{
    <div class="modal fade show mt-5" id="myModal" style=" display: inline-block;">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">RC - Level anpassen</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group row col align-content-center">
                        <label for="example-number-input" class="col-form-label mr-4">Level:</label>

                        <input class="form-control col-4" min="1" max="12" type="number" @bind=@changeValue id="example-number-input"/>

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="(() => {Show(null, 1);})">Abbrechen</button>
                    <button type="button" class="btn btn-success" data-dismiss="modal" @onclick="(() => { Show(null, 0); })">Speichern</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {

    int index;
    Dictionary<int, bool> showEmployee;
    Dictionary<int, bool> showAttributes;
    Dictionary<int, bool> showAdditionalInfo;

    public bool ShowPop { get; set; }

    public EmployeeTemp RcToEdit { get; set; }

    private static int restoreValue;
    private static int changeValue;
    protected override void OnInitialized()
    {
        index = 0;
        _proposal.CreateDummyProjects();
        showEmployee = new Dictionary<int, bool>();
        showAttributes = new Dictionary<int, bool>();
        showAdditionalInfo = new Dictionary<int, bool>();
        foreach (var proposal in _proposal.Proposals)
        {
            showEmployee.Add(proposal.ProposalId, true);
            showAttributes.Add(proposal.ProposalId, true);
            showAdditionalInfo.Add(proposal.ProposalId, true);
        }
    }

    public void ChangeVisible(int typeOfInfo, int identifier)
    {
        if (typeOfInfo == 1)
        {
            showEmployee[identifier] = !showEmployee[identifier];
        } else if (typeOfInfo == 2)
        {
            showAttributes[identifier] = !showAttributes[identifier];
        }
        else
        {
            showAdditionalInfo[identifier] = !showAdditionalInfo[identifier];
        }
    }

    public void Show(EmployeeTemp emp, int response) 
    {

        if (!ShowPop)
        {
            RcToEdit = emp;
            restoreValue = emp.RC;
            changeValue = emp.RC;
        }
        else
        {
            if (response == 0)
            {
                RcToEdit.RC = changeValue;
            }
            if (response == 1)
            {
                RcToEdit.RC = restoreValue;
            }
        }
        
        ShowPop = !ShowPop;
    }

}
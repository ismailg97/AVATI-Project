@using MudBlazor.Extensions

<button type="button" class="@("btn " + Type.ToDescriptionString() + " " + GiveSmall() + " " + @Class)"
        @onmouseover="() => { _showX = true; }" @onmouseout="() => { _showX = false; }"
        @onclick=@OnClick style="@Style"
        @oncontextmenu="@OnContextMenu"
        @oncontextmenu:preventDefault="true">
    @if (IsSmall)
    {
        <a style="margin-left: -2px; margin-right: -2px;">
            @if (_showX && !IsDisabled)
            {
                <a>@Text
                    <MudIcon Class="fade-in" Icon="@Icons.Filled.Close" Size="Size.Small"
                             Style="display: inline; margin-left: -2px; margin-right:-4px"/></a>
            }
            else
            {
                <a>
                    <MudIcon Size="Size.Small" Icon="@Icons.Filled.Close"
                             Style="display: inline; margin-left: -4px; margin-right: -11.0px; visibility: hidden;"/></a>
                <a>@Text</a>
                <a>
                    <MudIcon Size="Size.Small" Icon="@Icons.Filled.Close"
                             Style="display: inline; margin-left: -11.0px; margin-right: -4px; visibility: hidden;"/></a>
            }
        </a>
    }
    else
    {
        <a style="margin-left: -3px; margin-right: -3px;">
            @if (_showX && !IsDisabled)
            {
                <a>@Text
                    <MudIcon Class="fade-in" Icon="@Icons.Filled.Close" Size="Size.Medium"
                             Style="display: inline; margin-left: -4px; margin-right:-7px"/></a>
            }
            else
            {
                <a>
                    <MudIcon Size="Size.Medium" Icon="@Icons.Filled.Close"
                             Style="display: inline; margin-left: -7px; margin-right: -12.8px; visibility: hidden;"/></a>
                <a>@Text</a>
                <a>
                    <MudIcon Size="Size.Medium" Icon="@Icons.Filled.Close"
                             Style="display: inline; margin-left: -12.8px; margin-right: -7px; visibility: hidden;"/></a>
            }
        </a>
    }
    

</button>

@code {
    [Parameter]
    public TypeButton Type { get; set; }
    
    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public bool IsSmall { get; set; }
    
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }
    
    [Parameter]
    public bool IsDisabled { get; set; }
    
    [Parameter]
    public EventCallback<MouseEventArgs> OnContextMenu { get; set; }

    [Parameter]
    public string Style { get; set; }
    
    [Parameter]
    public string Class { get; set; }

    private bool _showX;

    protected override void OnInitialized()
    {
        _showX = false;
    }

    private string GiveSmall()
    {
        return IsSmall ? "btn-sm" : "";
    }

}
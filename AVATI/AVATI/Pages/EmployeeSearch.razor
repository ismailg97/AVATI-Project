@page "/SearchEmployee"
@page "/SearchEmployee/{Id:int}"

@using AVATI.Data
@using Microsoft.AspNetCore.Components
@using System.Linq
@using Microsoft.Extensions.Configuration
@inject SearchService _searchService
@inject IHardskillService _hard
@inject JsonImport _import
@inject IEmployeeService _employee
@inject IProposalService _proposal
@inject NavigationManager _navigation
@inject IBasicDataService _basic
@inject IProjektService _project

@if (PageIsLoaded)
{
    
    <div class="container h-100 @(IsProject ? "col" : "col-10")">
    <div class="row h-100 justify-content-center align-items-center">
    <div class="@(IsProject ? "col" : "col-12") text-left">
    <EditForm Model="_searchService">
        @if (Id != 0 && (_proposal.GetProposal(Id) != null || ProjectToAlter != null))
        {
            <h1 class="mb-4">Mitarbeitersuche für <br><strong>(@IsProject ? @_project.GetProject(Id).Projecttitel : @_proposal.GetProposal(Id).ProposalTitle)</strong>:</h1>
        }
        else
        {
            <h1 class="mb-4">Mitarbeitersuche</h1>
        }
        <div class="form-group">
            <label class="font-weight-bold">Mitarbeitername <small class="text-muted">(Optional)</small> </label>
            <InputText type="text" class="form-control col-8" placeholder="Vor- und Nachname" @bind-Value="_searchService.EmployeeName"/>
        </div>
        <label class="font-weight-bold">Hardskills/Kategorien: </label>
        <div class="form-group col-9" style="min-height: 96px; border: 2px solid darkslategray;  border-radius: 6px">

            <div class="row">
                @if (!_searchService.HardskillsToSearch.Any() && !_searchService.CategoriesToSearch.Any())
                {
                    <div class="text-muted mt-2 ml-2">[Über die untenstehenden Buttons Hardskills/Kategorien ergänzen]</div>
                }
                @foreach (var hardskill in  _searchService.HardskillsToSearch)
                {
                    <button type="button" class="btn btn-success btn-sm border border-dark section" @onclick=@(() => { _searchService.HardskillsToSearch.Remove(hardskill); _searchService.HardskillsToDisplay.Add(hardskill); _searchService.HardskillsToDisplay = _searchService.HardskillsToDisplay.OrderBy(e => e.Description).ToList();})>
                        @hardskill.Description <span class="oi oi-x cross"></span>
                    </button>
                }
                @foreach (var hardskill in _searchService.CategoriesToSearch)
                {
                    <button type="button" class="btn btn-info btn-sm border border-dark section" @onclick=@(() => { _searchService.CategoriesToSearch.Remove(hardskill); _searchService.HardskillsToDisplay.Add(hardskill); _searchService.HardskillsToDisplay = _searchService.HardskillsToDisplay.OrderBy(e => e.Description).ToList();})>
                        @hardskill.Description <span class="oi oi-x cross"></span>
                    </button>
                }
            </div>
        </div>

        <div class="form-group row">
            <div class="@(IsProject ? "col-5" : "col-4") mr-4">
                <label for="suche">Filter <small class="text-muted">(Nach individuellen Hardskills suchen)</small></label>
                <input type="search" class="col form-control" id="suche" @bind-value="TempHardskill" @bind-value:event="oninput" placeholder="Hardskill..."/>
                <div class="form-group row col">

                </div>
                <div class="list-group overflow-auto" style="height: 200px;  border: 3px solid lightgreen; border-radius: 6px; min-width:@(IsProject ? 100 : 90)%">
                    @foreach (var hardskill in _searchService.HardskillsToDisplay)
                    {
                        @if (TempHardskill == null || hardskill.Description.Contains(TempHardskill, StringComparison.OrdinalIgnoreCase))
                        {
                            <button class="btn btn-outline-dark" @onclick=@(() => { _searchService.AddHardSearch(hardskill); })>@hardskill.Description</button>
                        }
                    }
                </div>
            </div>
            <div class="@(IsProject ? "col-5" : "col-4") mr-4">
                <label for="suche">Filter <small class="text-muted">(Nach Hardskillkategorien suchen)</small></label>
                <input type="search" class="col form-control" id="suche" @bind-value="TempHardskill" @bind-value:event="oninput" placeholder="Hardskillkategorie..."/>
                <div class="form-group row col">
                </div>
                <div class="list-group overflow-auto" style="height: 200px;  border: 3px solid lightblue; border-radius: 6px; min-width:90%">
                    @foreach (var hardskill in _searchService.CategoriesToDisplay)
                    {
                        @if (TempHardskill == null || hardskill.Description.Contains(TempHardskill, StringComparison.OrdinalIgnoreCase))
                        {
                            <button class="btn btn-outline-dark" @onclick=@(() => { _searchService.AddCategorySearch(hardskill); })>@hardskill.Description</button>
                        }
                    }
                </div>
            </div>
        </div>
        <div class="form-group">
            <label class="font-weight-bold">Softskills</label>
            <div class="form-group col-9" style="min-height: 100px; border: 2px solid darkslategray;  border-radius: 6px">
                <div class="row">
                    @if (!_searchService.SoftskillsToSearch.Any())
                    {
                        <div class="text-muted mt-2 ml-2">[Über die untenstehenden Buttons Softskills ergänzen]</div>
                    }
                    @foreach (var softskill in _searchService.SoftskillsToSearch)
                    {
                        <button type="button" class="btn btn-info btn-sm border border-dark section" @onclick=@(() => { _searchService.SoftskillsToSearch.Remove(softskill); _searchService.SoftskillsToDisplay.Add(softskill); _searchService.SoftskillsToDisplay.Sort();})>
                            @softskill <span class="oi oi-x cross"></span>
                        </button>
                    }

                </div>
            </div>
        </div>
        <div class="form-group">

            <div class="form-group col-9">
                <div class="row">
                    @foreach (var softskill in _searchService.SoftskillsToDisplay)
                    {
                        <button class="btn btn-sm btn-outline-info mb-1 mr-1" @onclick=@(() => { _searchService.AddSoftSearch(softskill); })>@softskill</button>
                    }

                </div>
            </div>
        </div>
        <div class="form-group">
            <label class="font-weight-bold">Rolle(n)</label>
            <div class="form-group col-9" style="min-height: 35px; border: 2px solid darkslategray; border-radius: 6px">
                <div class="row">
                    @if (!_searchService.RolesToSearch.Any())
                    {
                        <div class="text-muted mt-1 ml-2">[Über die untenstehenden Buttons Rollen ergänzen]</div>
                    }
                    @foreach (var role in _searchService.RolesToSearch)
                    {
                        <button type="button" class="btn btn-info btn-sm border border-dark section" @onclick=@(() => { _searchService.RolesToSearch.Remove(role); _searchService.RolesToDisplay.Add(role);})>
                            @role <span class="oi oi-x cross"></span>
                        </button>
                    }

                </div>
            </div>
        </div>
        <div class="form-group row col-9 mb-4">
            @foreach (var role in _searchService.RolesToDisplay)
            {
                <button class="btn btn-sm btn-outline-info  mb-1 mr-1" @onclick=@(() => { _searchService.AddRoleSearch(role); })>@role</button>
            }
        </div>
        <button type="submit" @onclick=@(() => {CallSearch(); _searchService.TableIsVisible = true;}) class="btn btn-success col-2 text-center mb-5">Suchen</button>
    </EditForm>
    @if (_searchService.TableIsVisible)
    {
        if (!_searchService.PerfectMatch && SelectEmployees.Any())
        {
            <div class="alert alert-danger">Es konnte kein(e) MitarbeiterIn gefunden werden, der/die alle Kriterien erfüllt!</div>
        }

        @if (!SelectEmployees.Any())
        {
            <div class="alert alert-danger">Es konnte kein(e) MitarbeiterIn gefunden werden, der/die mindestens eines der Kriterien erfüllt!</div>
        }
        else
        {
            <h4 class="mb-3 font-weight-bold">Gefundene Mitarbeiter:</h4>

            <table class="table table-bordered table-striped text-center">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>RC</th>
                    <th>Hardskills</th>
                    <th>Softskills</th>
                    <th>Rolle(n)</th>
                    @if (Id == 0)
                    {
                        <th>Status</th>
                    }
                    else
                    {
                        <th>Hinzufügen</th>
                    }
                </tr>
                </thead>
                <tbody>
                @foreach (var employee in SelectEmployees)
                {
                    <tr>
                        <td class="font-weight-bold" style="width: 15%">@employee.FirstName @employee.LastName</td>
                        <td style="width: 5%">

                            <button type="button" class="btn btn-primary align-middle col">@employee.Rc</button>
                        </td>
                        <td style="width:20%">
                            <div class="form-group row col">
                                @foreach (var hardskill in employee.Hardskills)
                                {
                                    if (_searchService.HardskillsToSearchTemp.Exists(e => e.Description.Equals(hardskill.Description)))
                                    {
                                        <button class="btn btn-primary btn-sm mr-1 mb-1">@hardskill.Description</button>
                                    }
                                }
                            </div>
                        </td>
                        <td style="width:20%">
                            <div class="form-group row col">
                                @foreach (var softskill in employee.Softskills)
                                {
                                    if (_searchService.SoftskillsToSearchTemp.Contains(softskill))
                                    {
                                        <button class="btn btn-secondary btn-sm mr-1 mb-1">@softskill</button>
                                    }
                                }
                            </div>
                        </td>
                        <td style="width: 20%">
                            <div class="form-group row col">
                                @foreach (var role in employee.Roles)
                                {
                                    if (_searchService.RolesToSearchTemp.Contains(role))
                                    {
                                        <button class="btn btn-secondary btn-sm mr-1 mb-1">@role</button>
                                    }
                                }
                            </div>
                        </td>
                        <td style="width: 10%" class="text-center">

                            @if (Id != 0 && _proposal.GetProposal(Id).Employees.Find(e => e.EmployeeID == employee.EmployeeID) == null)
                            {
                                <button class="btn btn-sm btn-outline-success" @onclick=@(() => { _proposal.AddEmployee(Id, employee.EmployeeID, employee.Rc); })>Hinzufügen</button>
                            }
                            else if (Id != 0 && _proposal.GetProposal(Id).Employees.Find(e => e.EmployeeID == employee.EmployeeID) != null)
                            {
                                <button class="btn btn-sm btn-outline-danger" @onclick=@(() => { _proposal.RemoveEmployee(Id, employee.EmployeeID); })>Löschen</button>
                            } else if (IsProject)
                            {
                                if (ProjectToAlter.Employees.Find(e => e.EmployeeID == employee.EmployeeID) != null)
                                {
                                    <button class="btn btn-sm btn-outline-success" @onclick=@(() => { ProjectToAlter.Employees.Add(employee); })>Hinzufügen</button>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-outline-danger" @onclick=@(() => { ProjectToAlter.Employees.Remove(employee);})>Löschen</button>
                                }
                            }
                            else if (employee.IsActive)
                            {
                                <button class="btn btn-sm btn-success" @onclick=@(() => { employee.IsActive = !employee.IsActive; })>Aktiv</button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-danger" @onclick=@(() => { employee.IsActive = !employee.IsActive; })>Inaktiv</button>
                            }
                        </td>
                    </tr>
                }
                </tbody>
            </table>
            @if (Id != 0)
            {
                <button class="btn btn-info mt-2" @onclick=@(() => { ReturnToProposal(Id); })>Zum Angebot zurück</button>
            }
        }
    }

    </div>
    </div>
    </div>
    @if (IsProject)
    {
        <button class="btn-danger">OK</button>
    }
}
else
{
    <div class="d-flex flex-column align-items-center justify-content-center">
       <div class="row">
           <div class="spinner-border" role="status">
               <span class="sr-only">Loading...</span>
           </div>
        </div>
        <div class="row">
          <strong>Lade...</strong>
        </div>
    </div>
}

@code {
    
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public bool IsProject { get; set; } = false;

    private bool PageIsLoaded = false;

    private Data.Project ProjectToAlter;
    
    public string TempHardskill { get; set; }

    public List<Hardskill> PseudoHardskills { get; set; }

    public List<Employee> AllEmployees { get; set; }

    public List<Employee> SelectEmployees { get; set; }
    

    private List<Hardskill> _hardskills = new List<Hardskill>();
    private List<string> _roles = new List<string>();
    private List<string> _softskills = new List<string>();
    private List<Hardskill> _hardskillCategory = new List<Hardskill>();
    
    protected override async Task OnInitializedAsync()
    {
        _searchService.EmptyQuery();
        Task<List<Hardskill>> TempHard = _hard.GetAllHardskills();
        Task<List<Hardskill>> TempKat = _hard.GetAllHardskillCategorys();
        _hardskillCategory = await TempKat;
        _hardskills = await TempHard;
        AllEmployees = _employee.GetAllEmployees();
        _roles = _basic.GetAllRoles();
        _softskills = _basic.GetAllSoftSkills();
        _searchService.InitAttributes(_softskills, _roles, _hardskills, _hardskillCategory);
        if (IsProject)
        {
            ProjectToAlter = _project.GetProject(Id);
        }
        PageIsLoaded = true;
    }

    public void CallSearch()
    {
        SelectEmployees = _searchService.SearchEmployee(_searchService.EmployeeName, _searchService.SoftskillsToSearch, _searchService.HardskillsToSearch, _searchService.RolesToSearch, _searchService.CategoriesToSearch);
        _searchService.EmptyQuery();
    }

    public void AddToProposal(Employee emp)
    {
        _proposal.GetProposal(Id).Employees.Add(emp);
        _proposal.GetProposal(Id).AltRc.Add(emp.EmployeeID, emp.Rc);
    }

    public void RemoveFromProposal(Employee emp)
    {
        _proposal.GetProposal(Id).Employees.Remove(emp);
        _proposal.GetProposal(Id).AltRc.Remove(emp.EmployeeID);
    }

    private void ReturnToProposal(int proposalId)
    {
        _navigation.NavigateTo("/ProposalOverview/" + proposalId.ToString());
    }

}
@page "/SearchEmployee"
@page "/SearchEmployee/{Id:int}"

@using AVATI.Data
@using Microsoft.AspNetCore.Components
@using System.Linq
@inject ISearchService _searchService
@inject IHardskillService _hard
@inject JsonImport _import
@inject IEmployeeService _employee
@inject IProposalService _proposal
@inject NavigationManager _navigation
@inject IBasicDataService _basic
@inject IJSRuntime _jsRuntime


<AuthorizeView Roles="SalesStaff">
<NotAuthorized>
    @if (true)
    {
        _navigation.NavigateTo("/profile");
    }
</NotAuthorized>
<Authorized Context="authContext">



@if (_pageIsLoaded)
{
    <div class="col-12 text-left" id="scrollContainer">
    <EditForm Model="_searchService">
        @if (Id != 0)
        {
            <h1 class="mb-4">Mitarbeitersuche für <br><strong>@_proposal.GetProposal(Id).ProposalTitle</strong>:</h1>
        }
        else
        {
            <h1 class="mb-4">Mitarbeitersuche</h1>
            <hr/>
        }
        <div class="form-group">
            <label class="font-weight-bold">Mitarbeitername <small class="text-muted">(Optional)</small> </label>
            <InputText type="text" class="form-control col-8" placeholder="Vor- und Nachname" @bind-Value="_searchService.EmployeeName"/>
        </div>
        <label class="font-weight-bold">Hardskills/Kategorien: </label>
        <div class="form-group col-lg-9 col-md-12" style="min-height: 96px; border: 2px solid darkslategray;  border-radius: 6px">

            <div class="row">
                @if (!_searchService.HardskillsToSearch.Any() && !_searchService.CategoriesToSearch.Any())
                {
                    <div class="text-muted mt-2 ml-2">[Über die untenstehenden Buttons Hardskills/Kategorien ergänzen]</div>
                }
                @foreach (var hardskill in  _searchService.HardskillsToSearch)
                {
                    <button type="button" class="btn btn-success btn-sm border border-dark section" @onclick=@(() => { _searchService.HardskillsToSearch.Remove(hardskill); _searchService.HardskillsToDisplay.Add(hardskill); _searchService.HardskillsToDisplay = _searchService.HardskillsToDisplay.OrderBy(e => e.Description).ToList();})>
                        @hardskill.Description <span class="oi oi-x cross"></span>
                    </button>
                }
                @foreach (var hardskill in _searchService.CategoriesToSearch)
                {
                    <button type="button" class="btn btn-info btn-sm border border-dark section" @onclick=@(() => { _searchService.CategoriesToSearch.Remove(hardskill); _searchService.CategoriesToDisplay.Add(hardskill); _searchService.CategoriesToDisplay = _searchService.CategoriesToDisplay.OrderBy(e => e.Description).ToList();})>
                        @hardskill.Description <span class="oi oi-x cross"></span>
                    </button>
                }
            </div>
        </div>
        <div class="form-group row">
            <div class="col-lg-5 col-md-6">
                <label for="suche">Filter <small class="text-muted">(Nach Hardskills suchen)</small></label>
                <input type="search" class="col form-control" id="suche" @bind-value="TempHardskill" @bind-value:event="oninput" placeholder="Hardskill..."/>
                <div class="form-group row col">

                </div>
                <div class="list-group overflow-auto" style="height: 200px;  border: 3px solid lightgreen; border-radius: 6px;">
                    @foreach (var hardskill in _searchService.HardskillsToDisplay)
                    {
                        @if (TempHardskill == null || hardskill.Description.Contains(TempHardskill, StringComparison.OrdinalIgnoreCase))
                        {
                            <button class="btn btn-outline-dark" id="hardskillsToAdd" @onclick=@(() => { _searchService.AddHardSearch(hardskill); })>@hardskill.Description</button>
                        }
                    }
                </div>
            </div>
            <div class="col-lg-5 col-md-6">
                <label for="suche">Filter <small class="text-muted">(Nach Hardskillkategorien suchen)</small></label>
                <input type="search" class="col form-control" id="suche" @bind-value="TempCategory" @bind-value:event="oninput" placeholder="Hardskillkategorie..."/>
                <div class="form-group row col">
                </div>
                <div class="list-group overflow-auto" style="height: 200px;  border: 3px solid lightblue; border-radius: 6px; min-width:90%">
                    @foreach (var hardskill in _searchService.CategoriesToDisplay)
                    {
                        @if (TempCategory == null || hardskill.Description.Contains(TempCategory, StringComparison.OrdinalIgnoreCase))
                        {
                            <button class="btn btn-outline-dark" id="categoriesToAdd" @onclick=@(() => { _searchService.AddCategorySearch(hardskill); })>@hardskill.Description</button>
                        }
                    }
                </div>
            </div>
        </div>
        <div class="form-group">
            <label class="font-weight-bold">Softskills</label>
            <div class="form-group col-lg-9 col-md-12" style="min-height: 100px; border: 2px solid darkslategray;  border-radius: 6px">
                <div class="row">
                    @if (!_searchService.SoftskillsToSearch.Any())
                    {
                        <div class="text-muted mt-2 ml-2">[Über die untenstehenden Buttons Softskills ergänzen]</div>
                    }
                    @foreach (var softskill in _searchService.SoftskillsToSearch)
                    {
                        <button type="button" class="btn btn-info btn-sm border border-dark section" @onclick=@(() => { _searchService.SoftskillsToSearch.Remove(softskill); _searchService.SoftskillsToDisplay.Add(softskill); _searchService.SoftskillsToDisplay.Sort();})>
                            @softskill <span class="oi oi-x cross"></span>
                        </button>
                    }

                </div>
            </div>
        </div>
        <div class="form-group">

            <div class="form-group col-lg-9 col-md-12">
                <div class="row">
                    @foreach (var softskill in _searchService.SoftskillsToDisplay)
                    {
                        <button class="btn btn-sm btn-outline-info mb-1 mr-1" id="softskillsToAdd" @onclick=@(() => { _searchService.AddSoftSearch(softskill); })>@softskill</button>
                    }

                </div>
            </div>
        </div>
        <div class="form-group">
            <label class="font-weight-bold">Rolle(n)</label>
            <div class="form-group col-lg-9 col-md-12" style="min-height: 35px; border: 2px solid darkslategray; border-radius: 6px">
                <div class="row">
                    @if (!_searchService.RolesToSearch.Any())
                    {
                        <div class="text-muted mt-1 ml-2">[Über die untenstehenden Buttons Rollen ergänzen]</div>
                    }
                    @foreach (var role in _searchService.RolesToSearch)
                    {
                        <button type="button" class="btn btn-info btn-sm border border-dark section" @onclick=@(() => { _searchService.RolesToSearch.Remove(role); _searchService.RolesToDisplay.Add(role);})>
                            @role <span class="oi oi-x cross"></span>
                        </button>
                    }

                </div>
            </div>
        </div>
        <div class="form-group col-lg-9 col-md-12 mb-4">
            <div class="row">

                @foreach (var role in _searchService.RolesToDisplay)
                {
                    <button class="btn btn-sm btn-outline-info  mb-1 mr-1" id="rolesToAdd" @onclick=@(() => { _searchService.AddRoleSearch(role); })>@role</button>
                }
            </div>
        </div>
        <button type="submit" id="submitQuery" @onclick=@(async () => {await CallSearch(); _searchService.TableIsVisible = true;}) class="btn btn-success col-2 mb-5">Suchen</button>
    </EditForm>

    @if (_searchService.TableIsVisible)
    {
        @if (!SelectEmployees.Any() || (Id != 0 && (SelectEmployees.Count(e => employeeList.Any(x => x.EmployeeID == e.EmployeeID)) == SelectEmployees.Count)))
        {
            <div class="alert alert-danger col-11">Es konnte kein(e) MitarbeiterIn gefunden werden, der/die mindestens eines der Kriterien erfüllt!</div>
        }
        else
        {
            if (!_searchService.PerfectMatch && SelectEmployees.Any())
            {
                <div class="alert alert-danger col-11">Es konnte kein(e) MitarbeiterIn gefunden werden, der/die alle Kriterien erfüllt!</div>
            }

            <h4 class="mb-3 font-weight-bold">Gefundene Mitarbeiter:</h4>

            <table class="table table-hover text-center col-lg-11 mb-4 col-md-12" id="result-table">
                <thead class="thead-dark">
                <tr>
                    <th>Name</th>
                    <th>RC</th>
                    <th>Hardskills / Kategorien</th>
                    <th>Softskills</th>
                    <th>Rolle(n)</th>
                    @if (Id != 0)
                    {
                        <th>Hinzufügen</th>
                    }
                    else
                    {
                        <th>Status</th>
                    }

                </tr>
                </thead>
                <tbody>
                @foreach (var employee in SelectEmployees)
                {
                    if (Id == 0 || employeeList.Find(e => e.EmployeeID == employee.EmployeeID) == null)
                    {
                        <tr>
                            <td class="font-weight-bold" style="width: 15%">@employee.FirstName @employee.LastName</td>
                            <td style="width: 5%">

                                <button type="button" class="btn btn-primary align-middle col">@employee.Rc</button>
                            </td>
                            <td style="width:30%">
                                <div class="form-group row col">
                                    @foreach (var hardskill in employee.Hardskills)
                                    {
                                        if (_searchService.HardskillsToSearchTemp.Exists(e => e.Description.Equals(hardskill.Description)))
                                        {
                                            <button class="btn btn-success btn-sm mr-1 mb-1">@hardskill.Description | @employee.HardSkillLevel.Find(e => e.Item1.Description.Equals(hardskill.Description)).Item2</button>
                                        }
                                    }
                                    @foreach (var tuple in _employeesWithCategories.FindAll(e => e.Item2 == employee.EmployeeID))
                                    {
                                        <button class="btn btn-info btn-sm mr-1 mb-1">@tuple.Item1</button>
                                    }

                                </div>
                            </td>
                            <td style="width:20%">
                                <div class="form-group row col">
                                    @foreach (var softskill in employee.Softskills)
                                    {
                                        if (_searchService.SoftskillsToSearchTemp.Contains(softskill))
                                        {
                                            <button class="btn btn-secondary btn-sm mr-1 mb-1">@softskill</button>
                                        }
                                    }
                                </div>
                            </td>
                            <td style="width: 20%">
                                <div class="form-group row col">
                                    @foreach (var role in employee.Roles)
                                    {
                                        if (_searchService.RolesToSearchTemp.Contains(role))
                                        {
                                            <button class="btn btn-secondary btn-sm mr-1 mb-1">@role</button>
                                        }
                                    }
                                </div>
                            </td>
                            @if (Id != 0)
                            {
                                <td style="width: 10%" class="text-center">

                                    @if (Id != 0 && _proposal.GetProposal(Id).Employees.Find(e => e.EmployeeID == employee.EmployeeID) == null)
                                    {
                                        <button class="btn btn-outline-success" id="employeeAdd" @onclick=@(() => { _proposal.AddEmployee(Id, employee.EmployeeID, employee.Rc); employeeList.Add(employee); StateHasChanged(); })>
                                            <span class="oi oi-plus"></span>
                                        </button>
                                    }


                                </td>
                            }
                            else
                            {
                                <td style="width: 10%" class="text-center">
                                    <MudSwitch @bind-Checked="employee.IsActive" Color="MudBlazor.Color.Success" class="ml-1" @onclick=@(() => {Emp = employee; _booleanStatus = true;})></MudSwitch>
                                </td>
                            }

                        </tr>
                    }
                }
                </tbody>

            </table>
        }
    }

    @if (_proposalToCompare != null && Id != 0 && employeeList.Count != 0)
    {
        <h4 class="mb-3 mt-4 font-weight-bold">In <b> @_proposalToCompare.ProposalTitle </b> befindliche Mitarbeiter: </h4>


        <table class="table table-hover text-center col-lg-11 col-md-12" id="result-table">
            <thead class="thead-light">
            <tr>
                <th>Name</th>
                <th>RC</th>
                <th>Hardskills / Kategorien</th>
                <th>Softskills</th>
                <th>Rolle(n)</th>
                @if (Id != 0)
                {
                    <th>Entfernen</th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (var employee in employeeList)
            {
                <tr>
                    <td class="font-weight-bold" style="width: 15%">@employee.FirstName @employee.LastName</td>
                    <td style="width: 5%">

                        <button type="button" class="btn btn-primary align-middle col">@employee.Rc</button>
                    </td>
                    <td style="width:30%">
                        <div class="form-group row col">
                            @foreach (var hardskill in employee.Hardskills)
                            {
                                if (_searchService.HardskillsToSearchTemp.Exists(e => e.Description.Equals(hardskill.Description)))
                                {
                                    <button class="btn btn-success btn-sm mr-1 mb-1">@hardskill.Description | @employee.HardSkillLevel.Find(e => e.Item1.Description.Equals(hardskill.Description)).Item2</button>
                                }
                            }
                            @foreach (var tuple in _employeesWithCategories.FindAll(e => e.Item2 == employee.EmployeeID))
                            {
                                <button class="btn btn-info btn-sm mr-1 mb-1">@tuple.Item1</button>
                            }

                        </div>
                    </td>
                    <td style="width:20%">
                        <div class="form-group row col">
                            @foreach (var softskill in employee.Softskills)
                            {
                                if (_searchService.SoftskillsToSearchTemp.Contains(softskill))
                                {
                                    <button class="btn btn-secondary btn-sm mr-1 mb-1">@softskill</button>
                                }
                            }
                        </div>
                    </td>
                    <td style="width: 20%">
                        <div class="form-group row col">
                            @foreach (var role in employee.Roles)
                            {
                                if (_searchService.RolesToSearchTemp.Contains(role))
                                {
                                    <button class="btn btn-secondary btn-sm mr-1 mb-1">@role</button>
                                }
                            }
                        </div>
                    </td>
                    <td style="width: 10%" class="text-center">
                        <button class="btn btn-outline-danger" id="employeeRemove" @onclick=@(() => { _proposal.RemoveEmployee(Id, employee.EmployeeID); employeeList.Remove(employee); StateHasChanged(); })>
                            <span class="oi oi-x"></span>
                        </button>

                    </td>
                </tr>
            }
            </tbody>

        </table>
    }

    @if (Id != 0 && _searchService.TableIsVisible)
    {
        <button class="btn btn-info mt-2" id="returnBtn" style="margin-bottom: 100px" @onclick=@(() => { ReturnToProposal(Id); })>Zum Angebot zurück</button>
    }
    </div>
}
else
{
    <div class="d-flex flex-column align-items-center justify-content-center">
        <div class="row">
            <div class="spinner-border text-primary mb-2" role="status" style="height: 5rem; width: 5rem">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div class="row" style="font-size: larger">
            <strong>Lade...</strong>
        </div>
    </div>
}

@if (_booleanStatus)
{
    <div class="modal fade show" id="myModal" style=" display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Status verändern</h4>
                    <button type="button" class="close" data-dismiss="modal" @onclick="() => {_booleanStatus = !_booleanStatus; StateHasChanged();}">&times;</button>
                </div>
                <div class="modal-body">
                    @if (Emp.IsActive)
                    {
                        <text>Sind Sie sicher, dass sie den Status des <br> Mitarbeiters <span class="font-weight-bolder"> @Emp.FirstName @Emp.LastName </span> von Aktiv auf Inaktiv setzen wollen?</text>
                    }
                    else
                    {
                        <text>Sind Sie sicher, dass sie den Status des <br> Mitarbeiters <span class="font-weight-bolder"> @Emp.FirstName @Emp.LastName </span> von Inaktiv auf Aktiv setzen wollen?</text>
                    }
                       
                    <!-- HTML to write -->
                </div>
                <div class="modal-footer" >
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="() => {_booleanStatus = !_booleanStatus; Emp.IsActive = !Emp.IsActive;  StateHasChanged(); }"><MudIcon Icon="@Icons.Filled.Cancel"/> Abbrechen</button>
                    <button type="button" class="btn btn-success" data-dismiss="modal" @onclick="() => {StateHasChanged(); _booleanStatus = !_booleanStatus; _employee.EditStatus(Emp.EmployeeID ,Emp.IsActive);}"><MudIcon Icon="@Icons.Filled.Save"/> Bestätigen</button>
                </div>
                   
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

</Authorized>
</AuthorizeView>

@code {

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public int ProjectId { get; set; }

    private bool _pageIsLoaded;

    private Employee Emp;
    private bool _booleanStatus;

    private Data.Proposal _proposalToCompare;

    private List<Employee> employeeList = new List<Employee>();

    private List<Tuple<string, int>> _employeesWithCategories;

    public string TempHardskill { get; set; }

    public string TempCategory { get; set; }
    public List<Hardskill> PseudoHardskills { get; set; }

    public List<Employee> AllEmployees { get; set; }

    public List<Employee> SelectEmployees { get; set; }


    private List<Hardskill> _hardskills = new List<Hardskill>();
    private List<string> _roles = new List<string>();
    private List<string> _softskills = new List<string>();
    private List<Hardskill> _hardskillCategory = new List<Hardskill>();

    protected override async Task OnInitializedAsync()
    {
        _searchService.EmptyQuery();
        Task<List<Hardskill>> tempHard = _hard.GetAllHardskills();
        Task<List<Hardskill>> tempKat = _hard.GetAllHardskillCategorys();
        _hardskillCategory = await tempKat;
        _hardskills = await tempHard;
        AllEmployees = _employee.GetAllEmployees();
        _roles = _basic.GetAllRoles();
        _softskills = _basic.GetAllSoftSkills();
        _searchService.InitAttributes(_softskills, _roles, _hardskills, _hardskillCategory);
        _pageIsLoaded = true;
    }

    public async Task CallSearch()
    {
        _pageIsLoaded = false;
        _employeesWithCategories = new List<Tuple<string, int>>();
        foreach (var emp in AllEmployees)
        {
            foreach (var hard in emp.Hardskills)
            {
                foreach (var cat in _searchService.CategoriesToSearch)
                {
                    Task<List<string>> placeholder = _hard.GetHardskillsOfCategory(cat.Description);
                    var resultedList = await placeholder;
                    if ((resultedList.Find(e => e.Equals(hard.Description))) != null)
                    {
                        if (_employeesWithCategories.Find(e => e.Item1.Equals(cat.Description) && e.Item2 == emp.EmployeeID) == null)
                        {
                            _employeesWithCategories.Add(new Tuple<string, int>(cat.Description, emp.EmployeeID));
                        }
                    }
                }
            }
        }
        SelectEmployees = _searchService.SearchEmployee(_searchService.EmployeeName, _searchService.SoftskillsToSearch, _searchService.HardskillsToSearch, _searchService.RolesToSearch, _searchService.CategoriesToSearch, _employeesWithCategories, (Id != 0) ? true : false);
        _searchService.EmptyQuery();
        _pageIsLoaded = true;
        _searchService.TableIsVisible = true;
        StateHasChanged();
        if (Id != 0)
        {
            _proposalToCompare = _proposal.GetProposal(Id);
            employeeList = new List<Employee>();
            foreach (var em in _proposalToCompare.Employees)
            {
                Employee temp = _employee.GetEmployeeProfile(em.EmployeeID);
                employeeList.Add(temp);
            }
        }
        if (SelectEmployees.Any())
        {
            await Task.Delay(300);
            await _jsRuntime.InvokeAsync<string>("OnScrollEvent");
        }
    }


    public void AddToProposal(Employee emp)
    {
        _proposal.GetProposal(Id).Employees.Add(emp);
        _proposal.GetProposal(Id).AltRc.Add(emp.EmployeeID, emp.Rc);
    }

    public void RemoveFromProposal(Employee emp)
    {
        _proposal.GetProposal(Id).Employees.Remove(emp);
        _proposal.GetProposal(Id).AltRc.Remove(emp.EmployeeID);
    }

    private void ReturnToProposal(int proposalId)
    {
        _navigation.NavigateTo("/ProposalOverview/" + proposalId);
    }



}
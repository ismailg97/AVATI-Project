@page "/ProposalOverview"
@page "/ProposalOverview/{Open:int}"
@using System.IO
@using System.Linq
@using System.Text.RegularExpressions
@using AVATI.Data
@using AVATI.Data.EmployeeDetailFiles
@using BlazorDownloadFile
@using DocumentFormat.OpenXml
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Wordprocessing
@using Paragraph = DocumentFormat.OpenXml.Wordprocessing.Paragraph
@using Run = DocumentFormat.OpenXml.Wordprocessing.Run
@using Text = DocumentFormat.OpenXml.Wordprocessing.Text
@using ParagraphProperties = DocumentFormat.OpenXml.Wordprocessing.ParagraphProperties
@using RunProperties = DocumentFormat.OpenXml.Wordprocessing.RunProperties
@using WordColor = DocumentFormat.OpenXml.Wordprocessing.Color

@inject IProjectActivityService _activity
@inject IBlazorDownloadFileService _blazorDownloadFileService
@inject IProjectService _project
@inject IProposalService _proposal
@inject NavigationManager _navManager
@inject SearchService _search
@inject IJSRuntime _jsRuntime
@inject IEmployeeDetailService _detailService
@inject IEmployeeService _employeeService


<AuthorizeView Roles="SalesStaff">
    <NotAuthorized>
        @if(true){_navManager.NavigateTo("/profile");}
    </NotAuthorized>
    <Authorized Context="authContext">
        
 

<ModalEmpDetail @ref="_employeeDetail" Abstract="@this"/>
<EditProposal @ref="_editProposal" Abstract="@this"/>

@if (_isLoaded)
{
    <button class="btn btn-success float-right mr-2" id="createNew" @onclick=@(() => { ShowEdit(0); })>Neues Angebot</button>
    <div class="form-group row">
        <label for="sucheprop" class="col-form-label mr-2 font-weight-bold">Suche:</label>
        <input type="search" class="col-5 form-control" id="sucheProp" @bind-value="_filterSearch" placeholder="Angebotstitel..." @bind-value:event="oninput"/>
    </div>
    <div class="row @((_proposals.FindAll((e => e.ProposalTitle.Contains(_filterSearch, StringComparison.OrdinalIgnoreCase))).Count < 3) ? "justify-content-center" : "")">
        @{
            Proposal proposalToSwap;
            if (Open != 0 && (proposalToSwap = _proposals.Find(e => e.ProposalID == Open)) != null)
            {
                _proposals.Remove(proposalToSwap);
                _proposals.Insert(0, proposalToSwap);
            }
        }
        @foreach (var proposal in _proposals)
        {
            @if (proposal.ProposalTitle.Contains(_filterSearch, StringComparison.OrdinalIgnoreCase))
            {
                <div class="col-lg-4 col-md-6 col-sm-12 mb-4" id=@proposal.ProposalID.ToString()>
                    <div class="card border-dark h-100">
                        <div class="card-header text-center">
                            <p class="font-weight-bolder">Angebot: @proposal.ProposalID.ToString()</p>
                            <div class="row justify-content-center mb-1">
                                <button class="btn btn-outline-dark btn-sm" @onclick=@(async () => { await CreateProposalDocument(proposal.ProposalID); })>Dokument erzeugen</button>
                                <button class="btn btn-outline-success btn-sm ml-1" id="createProj" @onclick=@(() => { CallConfirmation(proposal.ProposalID); })>Projekt erzeugen</button>
                            </div>
                            <button class="btn btn-outline-secondary btn-sm" id="editProposal" @onclick=@(() => { ShowEdit(proposal.ProposalID); })> Editieren</button>
                            <button class="btn btn-outline-info btn-sm" id="copyProposal" @onclick=@(async () => { await CallCopy(proposal.ProposalID); })>Kopieren</button>
                            <button class="btn btn-outline-danger btn-sm" id="deleteProp" @onclick=@(() => {_propToDelete = proposal.ProposalID; _promptPropDelete = !_promptPropDelete;})>Löschen</button>
                        </div>
                        <div class="card-body text-center">
                            <h5 class="card-title text-center">@proposal.ProposalTitle</h5>
                            <button class="btn btn-outline-dark btn-block mb-3" id="empProfile" @onclick="(() => { ChangeVisible(1, proposal.ProposalID); })">
                                Mitarbeiterprofile
                            </button>
                            <div class="card-text @(_showEmployee[proposal.ProposalID] ? "collapse" : "")">
                                @if (_promptDelete[proposal.ProposalID])
                                {
                                    <button class="btn btn-danger btn-sm mr-3 mb-3" @onclick=@(() => { OpenDeletePrompt(proposal.ProposalID); })>Entfernen</button>
                                    <button class="btn btn-success btn-sm  mb-3" id="addEmployee" @onclick=@(() => { CallSearch(proposal.ProposalID); })>Hinzufügen</button>
                                }
                                else
                                {
                                    <button class="btn btn-outline-danger btn-sm mb-3" @onclick=@(() => { OpenDeletePrompt(proposal.ProposalID); })>Abbrechen</button>
                                }
                                <ul class="list-group mb-3 text-left">
                                    @foreach (var employee in proposal.Employees)
                                    {
                                        @if (_promptDelete[proposal.ProposalID])
                                        {
                                            <li class="list-group-item border-dark bg-light font-weight-bold text-black">
                                                <span id="empName">@employee.FirstName @employee.LastName</span>
                                                <div class="btn-group float-right">
                                                    <button class="btn btn-info btn-sm mr-2" id="empDetail" @onclick=@(async () => { await ShowDetail(employee.EmployeeID, proposal.ProposalID); })>Details</button>
                                                    <button class="btn btn-primary btn-sm " @onclick=@(() => { ShowRcEdit(proposal, employee.EmployeeID, 3); })>RC: @proposal.AltRc[employee.EmployeeID] </button>
                                                </div>

                                            </li>
                                        }
                                        else
                                        {
                                            <li class="list-group-item border-danger bg-light text-left font-weight-bold text-black">
                                                @if (_tempEmpList.Exists(e => e.EmployeeID == employee.EmployeeID))
                                                {
                                                    <span class="align-middle d-inline-block">@employee.FirstName @employee.LastName</span>
                                                    <button type="button" class="btn float-right btn-sm" @onclick=@(() => { _tempEmpList.RemoveAll(e => e.EmployeeID == employee.EmployeeID); })>
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                                                            <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z"/>
                                                        </svg>
                                                    </button>
                                                }
                                                else
                                                {
                                                    <span class="align-middle d-inline-block font-weight-bolder" style="color: red">@employee.FirstName @employee.LastName</span>
                                                    <button type="button" class="btn float-right btn-sm" @onclick=@(() => { _tempEmpList.Add(employee); })>
                                                        <span class="oi oi-x"></span>
                                                    </button>
                                                }
                                            </li>
                                        }
                                    }
                                </ul>
                                @if (!_promptDelete[proposal.ProposalID] && (_tempEmpList.Count != proposal.Employees.Count))
                                {
                                    <button class="btn btn-success btn-sm mb-3" @onclick=@(() => { RemoveEmpFromProposal(proposal.ProposalID); })>Speichern</button>
                                }
                            </div>

                            <button class="btn btn-outline-dark btn-block mb-3" @onclick="(() => { ChangeVisible(2, proposal.ProposalID); })">
                                Branchen, Hard- und Softskills
                            </button>
                            <div class=@(_showAttributes[proposal.ProposalID] ? "collapse" : "")>
                                <ul class="list-group mb-3 text-left">
                                    <li class="list-group-item border-dark bg-light text-left text-black mb-1">
                                        <b>Hardskills:</b> @string.Join(" | ", proposal.Hardskills.Select(e => e.Description))
                                    </li>
                                    <li class="list-group-item border-dark bg-light text-left text-black mb-1">
                                        <b>Softskills:</b> @string.Join(" | ", proposal.Softskills)
                                    </li>
                                    <li class="list-group-item border-dark bg-light text-left text-black mb-1">
                                        <b>Branchen:</b> @string.Join(" | ", proposal.Fields)
                                    </li>
                                </ul>
                            </div>
                            <button class="btn btn-outline-dark btn-block mb-3" @onclick="(() => { ChangeVisible(3, proposal.ProposalID); })">
                                Zusatzinformationen
                            </button>
                            <li class="list-group-item border-dark bg-light text-left text-black mb-1 @(_showAdditionalInfo[proposal.ProposalID] ? "collapse" : "")">
                                @proposal.AdditionalInfo
                            </li>
                        </div>
                        <div class="card-footer">
                            <div class="float-left">
                                Start: <b> @proposal.Start.ToString("dd.MM.yy") </b>
                            </div>
                            <div class="float-right">
                                Ende: <b> @proposal.End.ToString("dd.MM.yy") </b>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
}
@if (!_isLoaded)
{
    <div class="d-flex flex-column align-items-center justify-content-center">
        <div class="row">
            <div class="spinner-border text-primary mb-2" role="status" style="height: 5rem; width: 5rem">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div class="row" style="font-size: larger">
            <strong>Lade...</strong>
        </div>
    </div>
}
<!-- RC - Level Pop-Up -->
@if (ShowPop)
{
    <EditForm Model="@RcToEdit" OnValidSubmit=@UpdateRc>
    <DataAnnotationsValidator/>
    <ValidationSummary/>    
    <div class="modal fade show mt-5" id="myModal" style=" display: inline-block;">
        <div class="modal-dialog modal-sm border border-5 border-dark">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title col-12">RC - Level anpassen</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group row col align-content-center">
                        <label for="number-input" class="col-form-label-lg mr-4">Level:</label>

                        <InputNumber class="form-control-lg col-4" min="1" max="7" @bind-Value=@RcToEdit.Rc id="number-input"/>

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="(() => { ShowPop = !ShowPop; })">Abbrechen</button>
                    <button type="submit" class="btn btn-success" data-dismiss="modal">Speichern</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
    </EditForm>
}

@if (_promptPropDelete)
{
    <div class="modal fade show mt-5" id="myModal" style=" display: inline-block;">
        <div class="modal-dialog">
            <div class="modal-content" style="border-color: darkslategray; border-width: 5px">
                <div class="modal-header flex-column">
                    <h4 class="modal-title col-12 text-center">Löschen bestätigen</h4>
                </div>
                <div class="modal-body text-left">
                    <p>Wollen Sie das Angebot <b> "@_proposal.GetProposal(_propToDelete).ProposalTitle" </b> wirklich löschen? Der Prozess kann nicht rückgängig gemacht werden!</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-info" data-dismiss="modal" @onclick="(() => { _promptPropDelete = !_promptPropDelete; })">Abbrechen</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" id="deletePropConfirm" @onclick="(async () => {_promptPropDelete = !_promptPropDelete; await CallDelete(_propToDelete);})">Löschen</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (PromptConfirmation)
{
    <div class="modal fade show mt-5 overflow-auto" id="myModal" style=" display: inline-block; max-height: 80%">
        <div class="modal-dialog modal-lg border border-5 border-dark">
            <div class="modal-content" style="border-color: darkslategray; border-width: 5px">
                <div class="modal-header">
                    <div class="modal-title justify-content-center">Angebot Nr.@Temp.ProposalID in ein Projekt umwandeln? </div>
                </div>
                <div class="modal-body text-left">
                    <div class=" border border-dark bg-light mb-3">
                        <div class="form-group col mt-2">
                            <label>Angebotstitel: </label>
                            <h5 class="font-weight-bold">@Temp.ProposalTitle</h5>
                        </div>
                    </div>
                    <div class=" border border-dark bg-light mb-3">
                        <div class="form-group col mt-2">
                            <label>Mitarbeiter/innen</label>
                            <ul class="list-group mb-3 text-left col">
                                @foreach (var employee in Temp.Employees)
                                {
                                    <li class="list-group-item font-weight-bold text-black">
                                        <span>@employee.FirstName @employee.LastName</span>
                                        <div class="btn-group float-right">
                                            <button class="btn btn-primary ">RC: @Temp.AltRc[employee.EmployeeID] </button>
                                        </div>

                                    </li>
                                }
                            </ul>

                        </div>
                    </div>
                    <div class=" border border-dark bg-light mb-3">

                        <div class="form-group col mt-2">
                            <label>Hardskills: </label>
                            <div >
                                @foreach (var hardskill in Temp.Hardskills)
                                {
                                    <button type="button" class="btn btn-outline-secondary mr-1">
                                        @hardskill.Description
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                    <div class=" border border-dark bg-light mb-3">

                        <div class="form-group col mt-2">
                            <label>Softskills: </label>
                            <div >
                                @foreach (var softskill in Temp.Softskills)
                                {
                                    <button type="button" class="btn btn-outline-secondary mr-1">
                                        @softskill
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                    <div class=" border border-dark bg-light mb-3">
                        <div class="form-group col mt-2">
                            <label>Branchen: </label>
                            <div >
                                @foreach (var field in Temp.Fields)
                                {
                                    <button type="button" class="btn btn-outline-secondary mr-1">
                                        @field
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                    <div class=" border border-dark bg-light mb-3">
                        <div class="form-row col mt-2">
                            <div class="col-8">
                                <label class="font-weight-bold" for="start">Vsl. Start: </label>
                                @Temp.Start.ToString("dd.MM.yyyy")
                            </div>
                            <div class="col-4">
                                <label class="font-weight-bold" for="ende">Vsl. Ende: </label>
                                @Temp.End.ToString("dd.MM.yyyy")
                            </div>
                        </div>

                    </div>
                    <div class="float-right">
                        <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="(() => { PromptConfirmation = !PromptConfirmation; })">Abbrechen</button>
                        <button type="button" class="btn btn-success" id="createBtn" @onclick="(() => { HandleProjectCreate(); })">Projekt erzeugen</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

    
        </Authorized>
    </AuthorizeView>
    
    @code {

    [Parameter]
    public int Open { get; set; }


    private bool _promptPropDelete;
    private bool _isLoaded;
    private List<Proposal> _proposals;
    private string _filterSearch = "";
    EditProposal _editProposal;
    ModalEmpDetail _employeeDetail;
    Dictionary<int, bool> _showEmployee;
    Dictionary<int, bool> _showAttributes;
    Dictionary<int, bool> _showAdditionalInfo;
    Dictionary<int, bool> _promptDelete;
    public bool ShowPop { get; set; }
    public bool PromptConfirmation { get; set; }
    public Data.EmployeeDetailFiles.EmployeeDetail RcToEdit { get; set; }
    public static int EmpEdit { get; set; }
    public Proposal Temp { get; set; }
    private int _propToDelete;
    private List<Employee> _tempEmpList;

    protected override async Task OnInitializedAsync()
    {
        var tempValue = _proposal.GetAllProposals();
        _proposals = await tempValue;
        _promptDelete = new Dictionary<int, bool>();
        _showEmployee = new Dictionary<int, bool>();
        _showAttributes = new Dictionary<int, bool>();
        _showAdditionalInfo = new Dictionary<int, bool>();
        foreach (var proposal in _proposals)
        {
            _promptDelete.Add(proposal.ProposalID, true);
            _showEmployee.Add(proposal.ProposalID, Open != proposal.ProposalID);
            _showAttributes.Add(proposal.ProposalID, true);
            _showAdditionalInfo.Add(proposal.ProposalID, true);
        }
        _isLoaded = true;
        StateHasChanged();
    }

    public async Task Update()
    {
        _isLoaded = false;
        var tempValue = _proposal.GetAllProposals();
        _proposals = await tempValue;
        _promptDelete = new Dictionary<int, bool>();
        _showEmployee = new Dictionary<int, bool>();
        _showAttributes = new Dictionary<int, bool>();
        _showAdditionalInfo = new Dictionary<int, bool>();
        foreach (var proposal in  _proposals)
        {
            _promptDelete.Add(proposal.ProposalID, true);
            _showEmployee.Add(proposal.ProposalID, Open != proposal.ProposalID);
            _showAttributes.Add(proposal.ProposalID, true);
            _showAdditionalInfo.Add(proposal.ProposalID, true);
        }
        _isLoaded = true;
        StateHasChanged();
    }

    public void ChangeVisible(int typeOfInfo, int identifier)
    {
        if (typeOfInfo == 1)
        {
            _showEmployee[identifier] = !_showEmployee[identifier];
        }
        else if (typeOfInfo == 2)
        {
            _showAttributes[identifier] = !_showAttributes[identifier];
        }
        else
        {
            _showAdditionalInfo[identifier] = !_showAdditionalInfo[identifier];
        }
    }

    private void ShowEdit(int propId)
    {
        Open = 0;
        _editProposal.Show(propId);
    }

    private async void UpdateRc()
    {
        _proposal.UpdateAltRc(RcToEdit.ProposalId, RcToEdit.EmployeeId, RcToEdit.Rc); ShowPop = !ShowPop; Open = RcToEdit.ProposalId; 
        await Update();
    }
    
    private async void RemoveEmpFromProposal(int propId)
    {
        var proposalTemporary = _proposal.GetProposal(propId);
        foreach (var emp in proposalTemporary.Employees)
        {
            if (!_tempEmpList.Exists(e => e.EmployeeID == emp.EmployeeID))
            {
                _proposal.RemoveEmployee(propId, emp.EmployeeID);
            }
        }
        _isLoaded = false;
        var tempValue = _proposal.GetAllProposals();
        _isLoaded = true;
        _proposals = await tempValue;
        Open = propId;
        await Update();
        StateHasChanged();
    }

    private async Task ShowDetail(int employeeId, int proposalId)
    {
        _isLoaded = false;
        StateHasChanged();
        await _employeeDetail.Show(employeeId, proposalId);
        _isLoaded = true;
        StateHasChanged();
    }

    private void ShowRcEdit(Proposal prop, int employeeId, int response)
    {
        if (!ShowPop)
        {
            RcToEdit = new Data.EmployeeDetailFiles.EmployeeDetail {ProposalId = prop.ProposalID, EmployeeId = employeeId, Rc =  prop.AltRc[employeeId]};
            EmpEdit = employeeId;
        }

        ShowPop = !ShowPop;
        StateHasChanged();
    }


    private async Task CallCopy(int id)
    {
        if ((_proposal.CopyProposal(id)) != 0)
        {
            await Update();
        }
    }

    private async Task CallDelete(int id)
    {
        if (_proposal.GetProposal(id) != null)
        {
            _proposal.DeleteProposal(id);
            _isLoaded = true;
            await Update();
        }
    }

    private void CallSearch(int id)
    {
        _navManager.NavigateTo("/SearchEmployee/" + id.ToString());
    }

    public void OpenDeletePrompt(int id)
    {
        _tempEmpList = _proposal.GetProposal(id).Employees;
        _promptDelete[id] = !_promptDelete[id];
    }


    public void CallConfirmation(int proposalId)
    {
        if ((Temp = _proposal.GetProposal(proposalId)) != null)
        {
            PromptConfirmation = !PromptConfirmation;
        }
    }

    private bool HandleProjectCreate()
    {
        PromptConfirmation = !PromptConfirmation;
        if (_project.CreateProject(new Project()
        {
            Employees = Temp.Employees, Fields = Temp.Fields, Projectdescription = Temp.AdditionalInfo,
            Projectbeginning = Temp.Start, Projecttitel = Temp.ProposalTitle, Projectend = Temp.End
        }))
        {
            if (_proposal.DeleteProposal(Temp.ProposalID))
            {
                _navManager.NavigateTo("/Projektübersicht", true);
                return true;
            }
            return false;
        }
        return false;
    }

    public static Paragraph GenerateHardskillListItem(string text)
    {
        var element = new Paragraph(
            new ParagraphProperties(new ParagraphStyleId() {Val = "Listenabsatz"}, new NumberingProperties(new NumberingLevelReference() {Val = 0}, new NumberingId() {Val = 3})),
            new Run(new RunProperties(new RunFonts() {ComplexScriptTheme = ThemeFontValues.MinorHighAnsi}, new FontSize() {Val = "28"}), new Text(text))) {RsidRunAdditionDefault = "008C3DD7", RsidParagraphAddition = "008C3DD7", RsidParagraphProperties = "001D367B", RsidParagraphMarkRevision = "008C3DD7", ParagraphId = "66D57D28", TextId = "5066FE5B"};
        return element;
    }

    public static Paragraph GenerateSoftskillListItem(string text)
    {
        var element = new Paragraph(
            new ParagraphProperties(new ParagraphStyleId() {Val = "Listenabsatz"}, new NumberingProperties(new NumberingLevelReference() {Val = 0}, new NumberingId() {Val = 3})),
            new Run(new RunProperties(new RunFonts() {ComplexScriptTheme = ThemeFontValues.MinorHighAnsi}, new FontSize() {Val = "28"}), new Text(text))) {RsidRunAdditionDefault = "001D367B", RsidParagraphAddition = "001D367B", RsidParagraphProperties = "00DC35F6", RsidParagraphMarkRevision = "00DC35F6", ParagraphId = "0FC777E4", TextId = "43F5F574"};
        return element;
    }

    public static Paragraph GenerateFieldListItem(string text)
    {
        var element = new Paragraph(
            new ParagraphProperties(new ParagraphStyleId() {Val = "Listenabsatz"}, new NumberingProperties(new NumberingLevelReference() {Val = 0}, new NumberingId() {Val = 3})),
            new Run(new RunProperties(new RunFonts() {ComplexScriptTheme = ThemeFontValues.MinorHighAnsi}, new FontSize() {Val = "28"}), new Text(text))) {RsidRunAdditionDefault = "001D367B", RsidParagraphAddition = "00147E2B", RsidParagraphProperties = "00DC35F6", RsidParagraphMarkRevision = "00DC35F6", ParagraphId = "41A90976", TextId = "7230A5BB"};
        return element;
    }

    public static Paragraph GenerateLanguageListItem(Tuple<string, LanguageLevel> lang)
    {
        var element = new Paragraph(
            new ParagraphProperties(new ParagraphStyleId() {Val = "Listenabsatz"}, new NumberingProperties(new NumberingLevelReference() {Val = 0}, new NumberingId() {Val = 3})),
            new Run(new RunProperties(new RunFonts() {ComplexScriptTheme = ThemeFontValues.MinorHighAnsi}, new FontSize() {Val = "28"}), new Text(lang.Item1), new TabChar(), new Text(lang.Item2.ToString()))) {RsidRunAdditionDefault = "00A20795", RsidParagraphAddition = "00A20795", RsidParagraphProperties = "00A20795", RsidParagraphMarkRevision = "00DC35F6", ParagraphId = "2F558D7D", TextId = "77777777"};
        return element;
    }

    public static Paragraph GenerateRoleList(string role)
    {
        var element = new Paragraph(
            new ParagraphProperties(new ParagraphStyleId() {Val = "Listenabsatz"}, new NumberingProperties(new NumberingLevelReference() {Val = 0}, new NumberingId() {Val = 3})),
            new Run(new RunProperties(new RunFonts() {ComplexScriptTheme = ThemeFontValues.MinorHighAnsi}, new FontSize() {Val = "28"}), new Text(role))) {RsidRunAdditionDefault = "00A20795", RsidParagraphAddition = "00A20795", RsidParagraphProperties = "00A20795", RsidParagraphMarkRevision = "00DC35F6", ParagraphId = "287FC6A0", TextId = "610EA71A"};
        return element;
    }

        public Table GenerateProjectActivityTable(EmployeeDetail emp, Dictionary<int, List<ProjectActivity>> dictionary)
        {
            var counter = 0;
            var keyCollection = dictionary.Keys;
            var projectTable = new Table();
            var projectTableProp = new TableProperties(
                new TableStyle() {Val = "EinfacheTabelle4"}, new TableWidth() {Type = TableWidthUnitValues.Dxa, Width = 9000.ToString()});
            projectTable.AppendChild(projectTableProp);
            var tableHead = new TableRow(new TableRowProperties(new TableRowHeight() {HeightType = HeightRuleValues.AtLeast, Val = UInt32Value.ToUInt32(555)}));
            var leftHeadCell = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Double}), new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Center}), new Run(new RunProperties(new FontSize() {Val = 28.ToString()}), new Text("Projekttitel"))));
            var rightHeadCell = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Double}), new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Center}), new Run(new RunProperties(new FontSize() {Val = 28.ToString()}), new Text("Projekttätigkeit(en)"))));
            tableHead.Append(leftHeadCell, rightHeadCell);
            projectTable.AppendChild(tableHead);
            foreach (var key in keyCollection)
            {
                var projectActivities = dictionary[key];
                foreach (var proj in projectActivities.ToList())
                {
                    if (emp.ProjectActivities.Exists(e => e.ProjectActivityID == proj.ProjectActivityID) == false)
                        projectActivities.Remove(proj);
                }
                if (projectActivities.Count > 0)
                {
                    var projectTitle = _project.GetProject(projectActivities.First().ProjectID).Projecttitel;
                    var tableRow = new TableRow(new TableRowProperties(new TableRowHeight() {HeightType = HeightRuleValues.AtLeast, Val = UInt32Value.ToUInt32(555)}));
                    var leftCell = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single}), new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Center}), new Run(new RunProperties(new FontSize() {Val = 28.ToString()}), new Text(projectTitle))));
                    var rightCell = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single}));
                    var rightPar = new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Center}));
                    var rightRun = new Run(new RunProperties(new FontSize() {Val = 28.ToString()}));
                    var rightText = new Text() {Space = SpaceProcessingModeValues.Preserve};
                    var k = projectActivities.Count - 1;
                    foreach (var activity in projectActivities)
                    {
                        rightText.Text += activity.Description;
                        if (k > 0)
                        {
                            rightText.Text += ", ";
                            --k;
                            
                        }
                    }
                    rightRun.AppendChild(rightText);
                    rightPar.AppendChild(rightRun);
                    rightCell.AppendChild(rightPar);
                    tableRow.Append(leftCell, rightCell);
                    projectTable.AppendChild(tableRow);
                    ++counter;
                }
            }
            if (counter == 0)
                tableHead.Remove();
            return projectTable;
    }

    public Table GenerateRoleTable(Proposal prop)
    {
        var table = new Table();
        var tableProp = new TableProperties(
            new TableStyle() {Val = "EinfacheTabelle4"}, new TableWidth() {Type = TableWidthUnitValues.Dxa, Width = 9000.ToString()});
        table.AppendChild(tableProp);
        foreach (var emp in _detailService.GetAllEmployeeDetail(prop.ProposalID))
        {
            var j = emp.Roles.Count - 1;
            var tableRow = new TableRow(new TableRowProperties(new TableRowHeight() {HeightType = HeightRuleValues.AtLeast, Val = UInt32Value.ToUInt32(555)}));
            var cell1 = new TableCell(new TableCellProperties(new TableCellWidth() {Type = TableWidthUnitValues.Dxa, Width = 3500.ToString()}));
            cell1.AppendChild(new Paragraph(new Run(new RunProperties(new FontSize() {Val = 28.ToString()}, new Bold() {Val = OnOffValue.FromBoolean(false)}), new Text(prop.Employees.Find(e => e.EmployeeID == emp.EmployeeId)?.FirstName + " " + prop.Employees.Find(e => e.EmployeeID == emp.EmployeeId)?.LastName){Space = SpaceProcessingModeValues.Preserve})));
            var cell2 = new TableCell(new TableCellProperties(new TableCellWidth() {Type = TableWidthUnitValues.Dxa, Width = 5500.ToString()}));
            var cell2Par = new Paragraph();
            var cell2Run = new Run(new RunProperties(new FontSize() {Val = 28.ToString()}, new Bold() {Val = OnOffValue.FromBoolean(false)}));
            var cell2Text = new Text() {Space = SpaceProcessingModeValues.Preserve};
            foreach (var role in emp.Roles)
            {
                cell2Text.Text += role;
                if (j > 0)
                {
                    cell2Text.Text += ", ";
                    --j;
                }
            }
            cell2Run.AppendChild(cell2Text);
            cell2Par.AppendChild(cell2Run);
            cell2.AppendChild(cell2Par);
            tableRow.Append(cell1, cell2);
            table.AppendChild(tableRow);
        }
        return table;
    }

    public int GetCash(int rc)
    {
        return rc switch
        {
            1 => (int) Cash.Rc1,
            2 => (int) Cash.Rc2,
            3 => (int) Cash.Rc3,
            4 => (int) Cash.Rc4,
            5 => (int) Cash.Rc5,
            6 => (int) Cash.Rc6,
            7 => (int) Cash.Rc7,
            _ => 0
            };
    }
        
    enum Cash //Hourly Rate in €
    {
        Rc1 = 80,
        Rc2 = 95,
        Rc3 = 105,
        Rc4 = 120,
        Rc5 = 135,
        Rc6 = 155,
        Rc7 = 195,
    }
    
    public async Task CreateProposalDocument(int id)
    {
    var i = 0;
        const string costCalcTemplateDoc = "wwwroot\\templates\\AvatiCostCalcDoc.docx";
        const string empTempDocPath = "wwwroot\\templates\\AvatiTempDoc.docx";
        const string empTemplatePath = "wwwroot\\templates\\AvatiWorkerDoc.docx";
        const string templatePath = "wwwroot\\templates\\AvatiProposalDoc.docx";
        
        var memStream = new MemoryStream();
        var pageBreaker = new Paragraph(new Run(new Break {Type = BreakValues.Page}));
        await using (var fileStream = new FileStream(templatePath, FileMode.Open, FileAccess.Read))
            await fileStream.CopyToAsync(memStream);
        using (var wordDoc = WordprocessingDocument.Open(memStream, true))
        {
            var tempProp = _proposal.GetProposal(id); 
            wordDoc.ChangeDocumentType(WordprocessingDocumentType.Document);
            var body = wordDoc.MainDocumentPart?.Document.Body;         //? added to prevent possible System Null Reference
            var paragraphs = body.Descendants<Paragraph>().ToList();
            foreach (var par in paragraphs)
            {
                foreach (var run in par.Descendants<Run>().ToList())
                {
                    foreach (var element in run.Descendants<Text>().ToList())
                    {
                        switch (element.Text)
                        {
                            case "Angebotstitel":
                                element.Text = element.Text.Replace("Angebotstitel", tempProp.ProposalTitle);
                                break;
                            case "Beschreibungstext":
                                element.Text = element.Text.Replace("Beschreibungstext", tempProp.AdditionalInfo);
                                break;
                            case "Hard":
                            {
                                foreach (var hardskill in tempProp.Hardskills)
                                {
                                    par.InsertAfterSelf(GenerateHardskillListItem(hardskill.Description));
                                }
                                par.Remove();
                                break;
                            }
                            case "Soft":
                                foreach (var softskill in tempProp.Softskills)
                                {
                                    par.InsertAfterSelf(GenerateSoftskillListItem(softskill));
                                }
                                par.Remove();
                                break;
                            case "Field":
                                foreach (var field in tempProp.Fields)
                                {
                                    par.InsertAfterSelf(GenerateFieldListItem(field));
                                }
                                par.Remove();
                                break;
                            case "Rollenverteilung":
                                body.AppendChild(GenerateRoleTable(tempProp));
                                body.AppendChild(pageBreaker.CloneNode(true));
                                break;
                        }
                    }
                }
            }
            foreach (var emp in tempProp.Employees)
            {
                var empMemStream = new MemoryStream();
                await using (var employeeFs = new FileStream(empTemplatePath, FileMode.Open, FileAccess.Read))
                    await employeeFs.CopyToAsync(empMemStream);
                i++;
                var clearTempDoc = new FileStream(empTempDocPath, FileMode.Create, FileAccess.ReadWrite);
                await clearTempDoc.DisposeAsync();
                var tempEmp = _detailService.GetEmployeeDetail(emp.EmployeeID, id).Result;
                using (var empDoc = WordprocessingDocument.Open(empMemStream, true))
                {
                    var empBody = empDoc.MainDocumentPart.Document.Body;
                    var empParagraphs = empBody.Descendants<Paragraph>().ToList();
                    foreach (var par in empParagraphs)
                    {
                        foreach (var run in par.Descendants<Run>().ToList())
                        {
                            foreach (var text in run.Descendants<Text>().ToList())
                            {
                                switch (text.Text)
                                {
                                    case "Name":
                                        var tempName = emp.FirstName + " " + emp.LastName;
                                        text.Text = text.Text.Replace("Name", tempName);
                                        break;
                                    case "numb":
                                        text.Text = text.Text.Replace("numb", tempEmp.Rc.ToString());
                                        break;
                                    case "Branchen":
                                        if (tempEmp.Fields.Count == 0) 
                                            par.Remove();
                                        break;
                                    case "branch":
                                        foreach (var field in tempEmp.Fields)
                                            {
                                                par.InsertAfterSelf(GenerateFieldListItem(field));
                                            }
                                        par.Remove();
                                        break;
                                    case "Hardskills":
                                        if (tempEmp.Hardskills.Count == 0) 
                                            par.Remove();
                                        break;
                                    case "hards":
                                        foreach (var hardskill in tempEmp.Hardskills)
                                        {
                                            par.InsertAfterSelf(GenerateHardskillListItem(hardskill.Description));
                                        }
                                        par.Remove();
                                        break;
                                        case "Softskills":
                                            if (tempEmp.Softskills.Count == 0) 
                                                par.Remove();
                                            break;
                                    case "softs":
                                        foreach (var softskill in tempEmp.Softskills)
                                        {
                                            par.InsertAfterSelf(GenerateSoftskillListItem(softskill));
                                        }
                                        par.Remove();
                                        break;
                                        case "Sprachen:":
                                            if (tempEmp.Languages.Count == 0) 
                                                par.Remove();
                                            break;
                                    case "langs":
                                        foreach (var lang in tempEmp.Languages)
                                        {
                                            par.InsertAfterSelf(GenerateLanguageListItem(lang));
                                        }
                                        par.Remove();
                                        break;
                                    case "Projekte:":
                                        if (tempEmp.ProjectActivities.Count == 0)
                                            par.Remove();
                                        else
                                        {
                                            par.InsertBeforeSelf(pageBreaker.CloneNode(true));
                                            empBody.AppendChild(GenerateProjectActivityTable(tempEmp, _activity.GetActivitiesWithProjectsGrouped(tempEmp.EmployeeId)));
                                        }
                                        break;
                                        case "Rollen":
                                            if (tempEmp.Roles.Count == 0) 
                                                par.Remove();
                                            break;
                                    case "roles":
                                        foreach (var role in tempEmp.Roles)
                                        {
                                            par.InsertAfterSelf(GenerateRoleList(role));
                                        }
                                        par.Remove();
                                        break;
                                }
                            }
                        }
                    }
                    empBody.AppendChild(pageBreaker.CloneNode(true));
                    empDoc.SaveAs(empTempDocPath).Close();
                }
                paragraphs = body.Descendants<Paragraph>().ToList();
                var altChunkId = "AltChunkId" + i;
                var chunk = wordDoc.MainDocumentPart.AddAlternativeFormatImportPart(AlternativeFormatImportPartType.WordprocessingML, altChunkId);
                await using (var empFs = File.Open(empTempDocPath, FileMode.Open))
                {
                    chunk.FeedData(empFs);
                }
                var altChunk = new AltChunk {Id = altChunkId};
                body.InsertAfter(altChunk, paragraphs.Last());
            }
            var costCalcMemStream = new MemoryStream();
            await using (var costCalcFs = new FileStream(costCalcTemplateDoc, FileMode.Open, FileAccess.Read))
                await costCalcFs.CopyToAsync(costCalcMemStream);
            using (var costDoc = WordprocessingDocument.Open(costCalcMemStream, true))
            {
                i++;
                costDoc.ChangeDocumentType(WordprocessingDocumentType.Document);
                var costBody = costDoc.MainDocumentPart.Document.Body;
                costBody.AppendChild(new Paragraph(new Run(new RunProperties(new FontSize() {Val = 64.ToString()}, new RunFonts() {Ascii = "Calibri Light"}, new WordColor() {Val = "8496B0"}), new Text("Kostenmixkalkulation"))));
                var runtime = (int)(tempProp.End - tempProp.Start).TotalDays / 7;
                double overallHours = 0, overallPt = 0, overallListPrice = 0, overallRealPrice = 0;
                var costTable = new Table();
                var costTableProp = new TableProperties( new TableWidth() {Type = TableWidthUnitValues.Dxa, Width = 10000.ToString()});
                var tableStyle = new TableStyle() {Val = "EinfacheTabelle4"};
                costTableProp.TableStyle = tableStyle;
                costTable.AppendChild<TableProperties>(costTableProp);
                
                var tableRow1 = new TableRow(new TableRowHeight() {HeightType = HeightRuleValues.AtLeast, Val = UInt32Value.ToUInt32(555)});
                var tc11 = new TableCell(new Paragraph(new Run(new RunProperties(new FontSize() {Val = "24"}, new WordColor() {Val = "2f6ec2"}),new Text(tempProp.ProposalTitle) {Space = SpaceProcessingModeValues.Preserve})));
                var tc12 = new TableCell(new Paragraph(new Run(new TabChar())));
                var tc13 = new TableCell(new Paragraph(new Run(new TabChar())));
                var tc14 = new TableCell(new Paragraph(new Run(new TabChar())));
                var tc15 = new TableCell(new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new RunProperties( new WordColor() {Val = "2f6ec2"}), new Text("Laufzeit"))));
                tableRow1.Append(tc11, tc12, tc13, tc14, tc15);
                costTable.AppendChild(tableRow1);

                var tableRow2 = new TableRow(new TableRowProperties(new TableRowHeight() {HeightType = HeightRuleValues.AtLeast, Val = UInt32Value.ToUInt32(555)}));
                var tc21 = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single, Color = "2f6ec2"}), new Paragraph(new Run(new TabChar()))); 
                var tc22 = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single, Color = "2f6ec2"}) , new Paragraph(new Run(new TabChar()))); 
                var tc23 = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single, Color = "2f6ec2"}) , new Paragraph(new Run(new TabChar()))); 
                var tc24 = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single, Color = "2f6ec2"}) , new Paragraph(new Run(new TabChar()))); 
                var tc25 = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single, Color = "2f6ec2"}) , new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new RunProperties(),new Text(runtime.ToString()), new Text(" Wochen") {Space = SpaceProcessingModeValues.Preserve})));
                tableRow2.Append(tc21, tc22, tc23, tc24, tc25);
                costTable.AppendChild(tableRow2);

                var tableRow3 = new TableRow(new TableRowProperties(new BottomBorder() , new TableRowHeight() {HeightType = HeightRuleValues.AtLeast, Val = UInt32Value.ToUInt32(555)}));
                var tc31 = new TableCell(new Paragraph(new Run(new RunProperties(new WordColor() {Val = "2f6ec2"}),new Text("Rolle (Tätigkeiten, Schwerpunkte)"))));
                var tc32 = new TableCell(new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new RunProperties(new WordColor() {Val = "2f6ec2"}), new Text("Rabatt"))));
                var tc33 = new TableCell(new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new RunProperties(new WordColor() {Val = "2f6ec2"}), new Text("Sätze"))));
                var tc34 = new TableCell(new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new RunProperties(new WordColor() {Val = "2f6ec2"}), new Text("Kapazität"))));
                var tc35 = new TableCell(new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new RunProperties(new WordColor() {Val = "2f6ec2"}), new Text("Zeit und Kosten"))));
                tableRow3.Append(tc31, tc32, tc33, tc34, tc35);
                costTable.AppendChild(tableRow3);
                
                foreach (var emp in tempProp.Employees)
                {
                    var employeeDetail = _detailService.GetEmployeeDetail(emp.EmployeeID, id).Result;
                    var employeeProvHours = employeeDetail.Hours;
                    double hourlyRate = GetCash(employeeDetail.Rc); //daily rate = 8 * hourly rate
                    double dailyRate = hourlyRate * 8;              //== PT rate
                    overallHours += employeeProvHours;
                    overallPt += Math.Round((double) employeeProvHours * runtime / 8, 2);
                    overallListPrice += hourlyRate * employeeProvHours * runtime;

                    var tableRowA = new TableRow(new TableRowProperties(new TableRowHeight() {HeightType = HeightRuleValues.AtLeast, Val = UInt32Value.ToUInt32(555)}));
                    var tcA1 = new TableCell();
                    var tcA1Par = new Paragraph();
                    var tcA1Run = new Run();
                    var k = employeeDetail.Roles.Count - 1;
                    foreach (var role in employeeDetail.Roles){
                        var tempText = new Text(role) {Space = SpaceProcessingModeValues.Preserve};
                        if (k > 0)
                        {
                            tempText.Text += ", ";
                            --k;
                        }
                        tcA1Run.AppendChild(tempText);
                    }
                    tcA1Par.AppendChild(tcA1Run);
                    tcA1.AppendChild(tcA1Par);
                    var tcA2 = new TableCell();
                    var tcA2Par = new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}));
                    var tcA2Run = new Run();
                    if (employeeDetail.Discount > 0)
                    {
                        tcA2Run.AppendChild(new RunProperties( new Strike() {Val = true}));
                        tcA2Run.AppendChild(new Text(Math.Round(dailyRate, 2) + "€/PT"));
                    }
                    else
                        tcA2Run.AppendChild(new TabChar());
                    tcA2Par.AppendChild(tcA2Run);
                    tcA2.AppendChild(tcA2Par);
                    var tcA3 = new TableCell();
                    var tcA3Par = new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}));
                    var tcA3Run = new Run();
                    tcA3Run.AppendChild(employeeDetail.Discount > 0 ? new Text(Math.Round(dailyRate / 100 * (100 - employeeDetail.Discount), 2) + "€/PT") : new Text(Math.Round(dailyRate, 2) + "€/PT"));
                    tcA3Par.AppendChild(tcA3Run);
                    tcA3.AppendChild(tcA3Par);
                    var tcA4 = new TableCell(new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new Text(Math.Round((double)employeeProvHours / 40, 2) + " FTE") {Space = SpaceProcessingModeValues.Preserve})));//FTE = Vollzeitäquivalent --> Vollzeitkraft: 8h/d; 5d/w; ==> 40h/week
                    var tcA5 = new TableCell(new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new Text(Math.Round((double)employeeProvHours * runtime / 8, 2) + " PT") {Space = SpaceProcessingModeValues.Preserve})));
                    tableRowA.Append( tcA1, tcA2, tcA3, tcA4, tcA5);
                    
                    var tableRowB = new TableRow(new TableRowProperties(new TableRowHeight() {HeightType = HeightRuleValues.AtLeast, Val = UInt32Value.ToUInt32(555)}));
                    var tcB1 = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single}), new Paragraph(new Run(new Text("Level: " + employeeDetail.Rc) {Space = SpaceProcessingModeValues.Preserve})));
                    var tcB2 = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single}));
                    var tcB2Par = new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}));
                    var tcB2Run = new Run();
                    if (employeeDetail.Discount > 0)
                        tcB2Run.AppendChild(new Text(employeeDetail.Discount + "%"));
                    else
                        tcB2Run.AppendChild(new TabChar());
                    tcB2Par.AppendChild(tcB2Run);
                    tcB2.AppendChild(tcB2Par);
                    var tcB3 = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single}));
                    var tcB3Par = new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}));
                    var tcB3Run = new Run();
                    tcB3Run.AppendChild(employeeDetail.Discount > 0 ? new Text(Math.Round(dailyRate / 100 * (100 - employeeDetail.Discount) / 8, 2) + "€/h") : new Text(hourlyRate + "€/h"));
                    tcB3Par.AppendChild(tcB3Run);
                    tcB3.AppendChild(tcB3Par);
                    var tcB4 = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single}), new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new Text(employeeProvHours + " h/Woche"))));
                    var tcB5 = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single}));
                    
                    if (employeeDetail.Discount > 0)
                    {
                        tcB5.AppendChild(new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new Text(Math.Round(dailyRate / 100 * (100 - employeeDetail.Discount) / 8 * employeeProvHours * runtime, 2) + " €") {Space = SpaceProcessingModeValues.Preserve})));
                        overallRealPrice += Math.Round(dailyRate / 100 * (100 - employeeDetail.Discount) / 8 * employeeProvHours * runtime, 2);
                    }
                    else
                    {
                        tcB5.AppendChild(new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new Text(hourlyRate * employeeProvHours * runtime + " €") {Space = SpaceProcessingModeValues.Preserve})));
                        overallRealPrice += hourlyRate * employeeProvHours * runtime;
                    }
                    tableRowB.Append(tcB1, tcB2, tcB3, tcB4, tcB5);
                    costTable.Append(tableRowA, tableRowB);
                }

                var tableRow4A = new TableRow(new TableRowProperties(new TableRowHeight() {HeightType = HeightRuleValues.AtLeast, Val = UInt32Value.ToUInt32(555)}));
                var tc41A = new TableCell(new TableCellProperties(new TopBorder() {Val = BorderValues.Double}), new Paragraph(new Run(new RunProperties(new DocumentFormat.OpenXml.Wordprocessing.Color() {Val = "2f6ec2"}), new Text("Gesamt über Laufzeit"))));
                var tc42A = new TableCell(new TableCellProperties(new TopBorder() {Val = BorderValues.Double}), new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new Text(Math.Round((1 - overallRealPrice / overallListPrice) * 100, 2) + "%"))));
                var tc43A = new TableCell(new TableCellProperties(new TopBorder() {Val = BorderValues.Double}), new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new Text(Math.Round(overallRealPrice / overallPt, 2) + " €/PT") {Space = SpaceProcessingModeValues.Preserve})));
                var tc44A = new TableCell(new TableCellProperties(new TopBorder() {Val = BorderValues.Double}), new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new Text(Math.Round(overallHours / 40, 2) + " FTE") {Space = SpaceProcessingModeValues.Preserve})));
                var tc45A = new TableCell(new TableCellProperties(new TopBorder() {Val = BorderValues.Double}), new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new Text(overallPt + " PT") {Space = SpaceProcessingModeValues.Preserve})));
                tableRow4A.Append(tc41A, tc42A, tc43A, tc44A, tc45A);
                var tableRow4B = new TableRow(new TableRowProperties(new TableRowHeight() {HeightType = HeightRuleValues.AtLeast, Val = UInt32Value.ToUInt32(555)}));
                var tc41B = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Thick}), new Paragraph(new Run(new TabChar())));
                var tc42B = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Thick}), new Paragraph(new Run(new TabChar())));
                var tc43B = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Thick}), new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new Text(Math.Round(overallRealPrice / (overallPt * 8), 2) + " €/h") {Space = SpaceProcessingModeValues.Preserve})));
                var tc44B = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Thick}), new Paragraph(new Run(new TabChar())));
                var tc45B = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Thick}), new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new RunProperties(new Bold() {Val = OnOffValue.FromBoolean(true)}), new Text(overallRealPrice + " €") {Space = SpaceProcessingModeValues.Preserve})));
                tableRow4B.Append(tc41B, tc42B, tc43B, tc44B, tc45B);
                costTable.Append(tableRow4A, tableRow4B);

                var tableRow5A = new TableRow(new TableRowProperties(new TableRowHeight() {HeightType = HeightRuleValues.AtLeast, Val = UInt32Value.ToUInt32(555)}));
                var tc51A = new TableCell(new Paragraph(new Run(new RunProperties(new DocumentFormat.OpenXml.Wordprocessing.Color() {Val = "2f6ec2"}), new Text("Listenpreis"))));
                var tc52A = new TableCell(new Paragraph(new Run(new TabChar())));
                var tc53A = new TableCell(new Paragraph(new Run(new TabChar())));
                var tc54A = new TableCell(new Paragraph(new Run(new TabChar())));
                var tc55A = new TableCell(new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new Text(overallListPrice + " €") {Space = SpaceProcessingModeValues.Preserve})));
                tableRow5A.Append(tc51A, tc52A, tc53A, tc54A, tc55A);
                var tableRow5B = new TableRow(new TableRowProperties(new TableRowHeight() {HeightType = HeightRuleValues.AtLeast, Val = UInt32Value.ToUInt32(555)}));
                var tc51B = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single}), new Paragraph(new Run(new RunProperties(new DocumentFormat.OpenXml.Wordprocessing.Color() {Val = "2f6ec2"}), new Text("Summe der Rabatte"))));
                var tc52B = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single}), new Paragraph(new Run(new TabChar())));
                var tc53B = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single}), new Paragraph(new Run(new TabChar())));
                var tc54B = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single}), new Paragraph(new Run(new TabChar())));
                var tc55B = new TableCell(new TableCellProperties(new BottomBorder() {Val = BorderValues.Single}), new Paragraph(new ParagraphProperties(new Justification() {Val = JustificationValues.Right}), new Run(new Text(Math.Round(overallRealPrice - overallListPrice, 2) + " €") {Space = SpaceProcessingModeValues.Preserve})));
                tableRow5B.Append(tc51B, tc52B, tc53B, tc54B, tc55B);
                costTable.Append(tableRow5A, tableRow5B);
                costBody.AppendChild(costTable);
                var clearTempDoc = new FileStream(empTempDocPath, FileMode.Create, FileAccess.ReadWrite);
                await clearTempDoc.DisposeAsync();
                costDoc.SaveAs("wwwroot\\templates\\AvatiTempDoc.docx").Close();
                var altChunkId = "AltChunkId" + i;
                var chunk = wordDoc.MainDocumentPart.AddAlternativeFormatImportPart(AlternativeFormatImportPartType.WordprocessingML, altChunkId);
                await using (var docFs = File.Open("wwwroot\\templates\\AvatiTempDoc.docx", FileMode.Open))
                {
                    chunk.FeedData(docFs);
                }
                var altChunk = new AltChunk {Id = altChunkId};
                body.AppendChild(altChunk);
            }
            wordDoc.Save();
            wordDoc.Close();
            await _blazorDownloadFileService.DownloadFile(tempProp.ProposalTitle.Replace(" ", "_") + ".docx", memStream, "application/octet-stream");
        }    
    }
}
@page "/ProposalOverview"
@page "/ProposalOverview/{Open:int}"
@using System.IO
@using System.Linq
@using AVATI.Data
@using BlazorDownloadFile
@using DocumentFormat.OpenXml
@using DocumentFormat.OpenXml.InkML
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Wordprocessing
@using Table = DocumentFormat.OpenXml.InkML.Table
@inject IBlazorDownloadFileService _blazorDownloadFileService
@inject IProjektService _project
@inject IProposalService _proposal
@inject NavigationManager _navManager
@inject SearchService _search
<EmployeeDetail @ref="_employeeDetail" Abstract="@this"/>
<EditProposal @ref="_editProposal" Abstract="@this"/>

@if (_isLoaded)
{
    <button class="btn btn-success float-right mr-2" id="createNew" @onclick=@(() => { ShowEdit(0); })>Neues Angebot</button>
    <div class="form-group row justify-content-center mr-5">
        <label for="sucheprop" class="col-form-label mr-2 font-weight-bold">Suche:</label>
        <input type="search" class="col-6 form-control" id="sucheProp" @bind-value="_filterSearch" @bind-value:event="oninput"/>
    </div>
    <div class="container col-sm">
        <div class="row">
            @foreach (var proposal in _proposals)
            {
                @if (proposal.ProposalTitle.Contains(_filterSearch, StringComparison.OrdinalIgnoreCase))
                {
                    <div class="col-4 mb-4">
                        <div class="card border-dark h-100">
                            <div class="card-header text-center">
                                <p class="font-weight-bolder">Angebot: @proposal.ProposalID.ToString()</p>
                                <div class="row justify-content-center mb-1">
                                    <button class="btn btn-outline-dark btn-sm" @onclick=@(async () => { await CreateDocument(proposal.ProposalID); })>Dokument erzeugen</button>
                                    <button class="btn btn-outline-success btn-sm ml-1" id="createProj" @onclick=@(() => { CallConfirmation(proposal.ProposalID); })>Projekt erzeugen</button>
                                </div>
                                <button class="btn btn-outline-secondary btn-sm" @onclick=@(() => { ShowEdit(proposal.ProposalID); })> Editieren</button>
                                <button class="btn btn-outline-info btn-sm" id="copyProposal" @onclick=@(async () => { await CallCopy(proposal.ProposalID); })>Kopieren</button>
                                <button class="btn btn-outline-danger btn-sm" id="deleteProp" @onclick=@(async () => { await CallDelete(proposal.ProposalID); })>Löschen</button>
                            </div>
                            <div class="card-body text-center">
                                <h5 class="card-title text-center">@proposal.ProposalTitle</h5>
                                <button class="btn btn-outline-dark btn-block mb-3" id="empProfile" @onclick="(() => { ChangeVisible(1, proposal.ProposalID); })">
                                    Mitarbeiterprofile
                                </button>
                                <div class="card-text @(_showEmployee[proposal.ProposalID] ? "collapse" : "")">
                                    @if (_promptDelete[proposal.ProposalID])
                                    {
                                        <button class="btn btn-danger btn-sm mr-3 mb-3" @onclick=@(() => { OpenDeletePrompt(proposal.ProposalID); })>Entfernen</button>
                                        <button class="btn btn-success btn-sm  mb-3" id="addEmployee" @onclick=@(() => { CallSearch(proposal.ProposalID); })>Hinzufügen</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-outline-danger btn-sm mb-3" @onclick=@(() => { OpenDeletePrompt(proposal.ProposalID); })>Abbrechen</button>
                                    }
                                    <ul class="list-group mb-3 text-left">
                                        @foreach (var employee in proposal.Employees)
                                        {
                                            @if (_promptDelete[proposal.ProposalID])
                                            {
                                                <li class="list-group-item border-dark bg-light font-weight-bold text-black">
                                                    <span id="empName">@employee.FirstName @employee.LastName</span>
                                                    <div class="btn-group float-right">
                                                        <button class="btn btn-info btn-sm mr-2" @onclick=@(async () => { await ShowDetail(employee.EmployeeID, proposal.ProposalID); })>Details</button>
                                                        <button class="btn btn-primary btn-sm " @onclick=@(() => { ShowRcEdit(proposal, employee.EmployeeID, 3); })>RC: @proposal.AltRc[employee.EmployeeID] </button>
                                                    </div>

                                                </li>
                                            }
                                            else
                                            {
                                                <li class="list-group-item border-danger bg-light text-left font-weight-bold text-black">
                                                    @if (_tempEmpList.Exists(e => e.EmployeeID == employee.EmployeeID))
                                                    {
                                                        <span class="align-middle d-inline-block">@employee.FirstName @employee.LastName</span>
                                                        <button type="button" class="btn float-right btn-sm" @onclick=@(() => { _tempEmpList.RemoveAll(e => e.EmployeeID == employee.EmployeeID); })>
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                                                                <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z"/>
                                                            </svg>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <span class="align-middle d-inline-block font-weight-bolder" style="color: red">@employee.FirstName @employee.LastName</span>
                                                        <button type="button" class="btn float-right btn-sm" @onclick=@(() => { _tempEmpList.Add(employee); })>
                                                            <span class="oi oi-action-redo"></span>
                                                        </button>
                                                    }
                                                </li>
                                            }
                                        }
                                    </ul>
                                    @if (!_promptDelete[proposal.ProposalID] && (_tempEmpList.Count != proposal.Employees.Count))
                                    {
                                        <button class="btn btn-success btn-sm mb-3" @onclick=@(() => { RemoveEmpFromProposal(proposal.ProposalID); })>Speichern</button>
                                    }
                                </div>

                                <button class="btn btn-outline-dark btn-block mb-3" @onclick="(() => { ChangeVisible(2, proposal.ProposalID); })">
                                    Branchen, Hard- und Softskills
                                </button>
                                <div class=@(_showAttributes[proposal.ProposalID] ? "collapse" : "")>
                                    <ul class="list-group mb-3 text-left">
                                        <li class="list-group-item border-dark bg-light text-left text-black mb-1">
                                            <b>Hardskills:</b> @string.Join(" | ", proposal.Hardskills.Select(e => e.Description))
                                        </li>
                                        <li class="list-group-item border-dark bg-light text-left text-black mb-1">
                                            <b>Softskills:</b> @string.Join(" | ", proposal.Softskills)
                                        </li>
                                        <li class="list-group-item border-dark bg-light text-left text-black mb-1">
                                            <b>Branchen:</b> @string.Join(" | ", proposal.Fields)
                                        </li>
                                    </ul>
                                </div>
                                <button class="btn btn-outline-dark btn-block mb-3" @onclick="(() => { ChangeVisible(3, proposal.ProposalID); })">
                                    Zusatzinformationen
                                </button>
                                <li class="list-group-item border-dark bg-light text-left text-black mb-1 @(_showAdditionalInfo[proposal.ProposalID] ? "collapse" : "")">
                                    @proposal.AdditionalInfo
                                </li>
                            </div>
                            <div class="card-footer">
                                <div class="float-left">
                                    Start: <b> @proposal.Start.ToString("dd.MM.yy") </b>
                                </div>
                                <div class="float-right">
                                    Ende: <b> @proposal.End.ToString("dd.MM.yy") </b>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }

        </div>
    </div>
}
@if(!_isLoaded)
{
    <div class="d-flex flex-column align-items-center justify-content-center">
                        <div class="row">
                            <div class="spinner-border" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                        <div class="row">
                            <strong>Lade...</strong>
                        </div>
                    </div>
}
<!-- RC - Level Pop-Up -->
@if (ShowPop)
{
    <div class="modal fade show mt-5" id="myModal" style=" display: inline-block;">
        <div class="modal-dialog modal-sm border border-5 border-dark">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title col-12">RC - Level anpassen</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group row col align-content-center">
                        <label for="example-number-input" class="col-form-label mr-4">Level:</label>

                        <input class="form-control col-4" min="1" max="7" type="number" @bind=@_changeValue id="example-number-input"/>

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="(() => { ShowPop = !ShowPop; })">Abbrechen</button>
                    <button type="button" class="btn btn-success" data-dismiss="modal" @onclick="(async () => { _proposal.UpdateAltRc(RcToEdit.ProposalID, EmpEdit, _changeValue); ShowPop = !ShowPop; Open = RcToEdit.ProposalID;  await Update();})">Speichern</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (PromptConfirmation)
{
    <div class="modal fade show mt-5 overflow-auto" id="myModal" style=" display: inline-block; max-height: 80%">
        <div class="modal-dialog modal-lg border border-5 border-dark">
            <div class="modal-content">
                <div class="modal-header">
                    <div class="modal-title justify-content-center">Angebot Nr.@Temp.ProposalID in ein Projekt umwandeln? </div>
                </div>
                <div class="modal-body text-left">
                    <div class=" border border-dark bg-light mb-3">
                        <div class="form-group col mt-2">
                            <label>Angebotstitel: </label>
                            <h5 class="font-weight-bold">@Temp.ProposalTitle</h5>
                        </div>
                    </div>
                    <div class=" border border-dark bg-light mb-3">
                        <div class="form-group col mt-2">
                            <label>Mitarbeiter/innen</label>
                            <ul class="list-group mb-3 text-left col">
                                @foreach (var employee in Temp.Employees)
                                {
                                    <li class="list-group-item font-weight-bold text-black">
                                        <span>@employee.FirstName @employee.LastName</span>
                                        <div class="btn-group float-right">
                                            <button class="btn btn-primary ">RC: @Temp.AltRc[employee.EmployeeID] </button>
                                        </div>

                                    </li>
                                }
                            </ul>

                        </div>
                    </div>
                    <div class=" border border-dark bg-light mb-3">

                        <div class="form-group col mt-2">
                            <label>Hardskills: </label>
                            <div >
                                @foreach (var hardskill in Temp.Hardskills)
                                {
                                    <button type="button" class="btn btn-outline-secondary mr-1">
                                        @hardskill.Description
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                    <div class=" border border-dark bg-light mb-3">

                        <div class="form-group col mt-2">
                            <label>Softskills: </label>
                            <div >
                                @foreach (var softskill in Temp.Softskills)
                                {
                                    <button type="button" class="btn btn-outline-secondary mr-1">
                                        @softskill
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                    <div class=" border border-dark bg-light mb-3">
                        <div class="form-group col mt-2">
                            <label>Branchen: </label>
                            <div >
                                @foreach (var field in Temp.Fields)
                                {
                                    <button type="button" class="btn btn-outline-secondary mr-1">
                                        @field
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                    <div class=" border border-dark bg-light mb-3">
                        <div class="form-row col mt-2">
                            <div class="col-8">
                                <label class="font-weight-bold" for="start">Vsl. Start: </label>
                                @Temp.Start.ToString("dd.MM.yyyy")
                            </div>
                            <div class="col-4">
                                <label class="font-weight-bold" for="ende">Vsl. Ende: </label>
                                @Temp.End.ToString("dd.MM.yyyy")
                            </div>
                        </div>

                    </div>
                    <div class="float-right">
                        <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="(() => { PromptConfirmation = !PromptConfirmation; })">Abbrechen</button>
                        <button type="button" class="btn btn-success" id="createBtn" @onclick="(() => { HandleProjectCreate(); })">Projekt erzeugen</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {

    [Parameter]
    public int Open { get; set; }

    private bool _isLoaded = false;
    private List<Proposal> _proposals;
    private string _filterSearch = "";
    EditProposal _editProposal;
    EmployeeDetail _employeeDetail;
    Dictionary<int, bool> _showEmployee;
    Dictionary<int, bool> _showAttributes;
    Dictionary<int, bool> _showAdditionalInfo;
    Dictionary<int, bool> _promptDelete;
    public bool ShowPop { get; set; }
    public bool PromptConfirmation { get; set; }
    public Proposal RcToEdit { get; set; }
    public static int EmpEdit { get; set; }
    public Proposal Temp { get; set; }
    private static int _changeValue;

    private List<Employee> _tempEmpList;

    protected override async Task OnInitializedAsync()
    {
        var tempValue = _proposal.GetAllProposals();
        _proposals = await tempValue;
        _promptDelete = new Dictionary<int, bool>();
        _showEmployee = new Dictionary<int, bool>();
        _showAttributes = new Dictionary<int, bool>();
        _showAdditionalInfo = new Dictionary<int, bool>();
        foreach (var proposal in _proposals)
        {
            _promptDelete.Add(proposal.ProposalID, true);
            _showEmployee.Add(proposal.ProposalID, Open != proposal.ProposalID);
            _showAttributes.Add(proposal.ProposalID, true);
            _showAdditionalInfo.Add(proposal.ProposalID, true);
        }
        _isLoaded = true;
        Open = 0;
        StateHasChanged();
    }

    public async Task Update()
    {
        _isLoaded = false;
        var tempValue = _proposal.GetAllProposals();
        _proposals = await tempValue;
        _promptDelete = new Dictionary<int, bool>();
        _showEmployee = new Dictionary<int, bool>();
        _showAttributes = new Dictionary<int, bool>();
        _showAdditionalInfo = new Dictionary<int, bool>();
        foreach (var proposal in  _proposals)
        {
            _promptDelete.Add(proposal.ProposalID, true);
            _showEmployee.Add(proposal.ProposalID, Open != proposal.ProposalID);
            _showAttributes.Add(proposal.ProposalID, true);
            _showAdditionalInfo.Add(proposal.ProposalID, true);
        }
        _isLoaded = true;
        StateHasChanged();
    }

    public void ChangeVisible(int typeOfInfo, int identifier)
    {
        if (typeOfInfo == 1)
        {
            _showEmployee[identifier] = !_showEmployee[identifier];
        }
        else if (typeOfInfo == 2)
        {
            _showAttributes[identifier] = !_showAttributes[identifier];
        }
        else
        {
            _showAdditionalInfo[identifier] = !_showAdditionalInfo[identifier];
        }
    }

    private void ShowEdit(int propId)
    {
        _editProposal.Show(propId);
    }

    private async void RemoveEmpFromProposal(int propId)
    {
        var proposalTemporary = _proposal.GetProposal(propId);
        foreach (var emp in proposalTemporary.Employees)
        {
            if (!_tempEmpList.Exists(e => e.EmployeeID == emp.EmployeeID))
            {
                _proposal.RemoveEmployee(propId, emp.EmployeeID);
            }
        }
        var tempValue = _proposal.GetAllProposals();
        _proposals = await tempValue;
        await Update();
        _showEmployee[propId] = !_showEmployee[propId];
        StateHasChanged();

    }

    private async Task ShowDetail(int employeeId, int proposalId)
    {
        await _employeeDetail.Show(employeeId, proposalId);
    }

    private void ShowRcEdit(Proposal prop, int employeeId, int response)
    {
        if (!ShowPop)
        {
            _changeValue = prop.AltRc[employeeId];
            RcToEdit = prop;
            EmpEdit = employeeId;
        }

        ShowPop = !ShowPop;
        StateHasChanged();
    }


    private async Task CallCopy(int id)
    {
        if ((_proposal.CopyProposal(id)) != 0)
        {
            await Update();
        }
    }

    private async Task CallDelete(int id)
    {
        if (_proposal.GetProposal(id) != null)
        {
            _proposal.DeleteProposal(id);
            _isLoaded = true;
            await Update();
        }
    }

    private void CallSearch(int Id)
    {
        _navManager.NavigateTo("/SearchEmployee/" + Id.ToString());
    }

    public void OpenDeletePrompt(int Id)
    {
        _tempEmpList = _proposal.GetProposal(Id).Employees;
        _promptDelete[Id] = !_promptDelete[Id];
    }


    public void CallConfirmation(int proposalId)
    {
        if ((Temp = _proposal.GetProposal(proposalId)) != null)
        {
            PromptConfirmation = !PromptConfirmation;
        }
    }

    private bool HandleProjectCreate()
    {
        PromptConfirmation = !PromptConfirmation;
        if (_project.CreateProject(new Project()
        {
            Employees = Temp.Employees, Fields = Temp.Fields, Projectdescription = Temp.AdditionalInfo,
            Projectbeginning = Temp.Start, Projecttitel = Temp.ProposalTitle, Projectend = Temp.End
        }))
        {
            if (_proposal.DeleteProposal(Temp.ProposalID))
            {
                _navManager.NavigateTo("/Projektübersicht", true);
                return true;
            }
            return false;
        }
        return false;
    }

    public async Task CreateDocument(int id)
    {
        using (MemoryStream mem = new MemoryStream())
        {
            using (WordprocessingDocument wordDocument =
                WordprocessingDocument.Create(mem, WordprocessingDocumentType.Document))
            {
                MainDocumentPart mainPart = wordDocument.AddMainDocumentPart();
                Document document1 = new Document();
                Body body1 = document1.AppendChild(new Body());
                Paragraph para1 = body1.AppendChild(new Paragraph());
                Run run1 = para1.AppendChild(new Run());
                run1.AppendChild(new Text("Projekt: " + id.ToString()));
                
                mainPart.Document = document1;
            }


            var task = await _blazorDownloadFileService.DownloadFile("test.docx", mem, "application/octet-stream");
        }
    }


}
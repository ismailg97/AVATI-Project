@page "/ProposalOverview"
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics.CodeAnalysis
@using System.IO
@using System.Linq
@using AVATI.Data
@using BlazorDownloadFile
@using DocumentFormat.OpenXml
@using DocumentFormat.OpenXml.InkML
@using DocumentFormat.OpenXml.Office2010.Excel
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Wordprocessing
@using Table = DocumentFormat.OpenXml.InkML.Table
@inject IBlazorDownloadFileService _blazorDownloadFileService

@inject IProposalService _proposal
@inject NavigationManager _navManager
@inject SearchService _search
<EmployeeDetail @ref="_employeeDetail"></EmployeeDetail>
<EditProposal @ref="_editProposal"></EditProposal>


<button class="btn btn-success float-left" @onclick=@(() => { ShowEdit(0); })>Neues Angebot</button>
<div class="container col-10">
    <div class="row row-cols-1 row-cols-md-1 g-4">
        @foreach (var proposal in _proposal.GetAllProposals())
        {
            <div class="col-4 mb-4">
                <div class="card border-dark h-100">
                    <div class="card-header text-center">
                        <p class="font-weight-bolder">Angebot: @proposal.ProposalId.ToString()</p>
                        <p>
                            <button class="btn btn-outline-dark btn-sm" @onclick=@(async () => {await CreateDocument(proposal.ProposalId); })>Dokument erzeugen</button>
                            <button class="btn btn-outline-success btn-sm ml-2">Projekt erzeugen</button>
                        </p>
                        <button class="btn btn-outline-secondary btn-sm" @onclick=@(() => { ShowEdit(proposal.ProposalId); })> Editieren</button>
                        <button class="btn btn-outline-info btn-sm" @onclick=@(() => { CallCopy(proposal.ProposalId); })>Kopieren</button>
                        <button class="btn btn-outline-danger btn-sm" @onclick=@(() => { CallDelete(proposal.ProposalId); })>Löschen</button>
                    </div>
                    <div class="card-body text-center">
                        <h5 class="card-title text-center">@proposal.ProposalTitle</h5>
                        <button class="btn btn-outline-dark btn-block mb-3" @onclick="(() => { ChangeVisible(1, proposal.ProposalId); })">
                            Mitarbeiterprofile
                        </button>
                        <div class="card-text @(_showEmployee[proposal.ProposalId] ? "collapse" : "")">
                            @if (_promptDelete[proposal.ProposalId])
                            {
                                <button class="btn btn-danger btn-sm mr-3 mb-3" @onclick=@(() => { OpenDeletePrompt(proposal.ProposalId); })>Entfernen</button>
                                <button class="btn btn-success btn-sm  mb-3" @onclick=@(() => { CallSearch(proposal.ProposalId); })>Hinzufügen</button>
                            }
                            else
                            {
                                <button class="btn btn-outline-danger btn-sm mb-3" @onclick=@(() => { OpenDeletePrompt(proposal.ProposalId); })>Abbrechen</button>
                            }
                            <ul class="list-group mb-3 text-left">
                                @foreach (var employee in proposal.Employees)
                                {
                                    @if (_promptDelete[proposal.ProposalId])
                                    {
                                        <li class="list-group-item border-dark bg-light font-weight-bold text-black">
                                            <span>@employee.FirstName @employee.LastName</span>
                                            <div class="btn-group float-right">
                                            <button class="btn btn-info btn-sm mr-2" @onclick=@(() => { ShowDetail(employee.EmployeeId, proposal.ProposalId); })>Details</button>
                                            <button class="btn btn-primary btn-sm " @onclick=@(() => { ShowRcEdit(employee, 0); })>RC: @employee.Rc </button>
                                            </div>
                                            
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="list-group-item border-danger bg-light text-left font-weight-bold text-black">
                                            <span class="align-middle d-inline-block">@employee.FirstName @employee.LastName</span>
                                            <button type="button" class="btn float-right btn-sm" @onclick=@(() => { RemoveEmployee(proposal.ProposalId, employee.EmployeeId);})>
                                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                                                    <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z"/>
                                                </svg>
                                            </button>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>

                        <button class="btn btn-outline-dark btn-block mb-3" @onclick="(() => { ChangeVisible(2, proposal.ProposalId); })">
                            Branchen, Hard- und Softskills
                        </button>
                        <div class=@(_showAttributes[proposal.ProposalId] ? "collapse" : "")>
                            <ul class="list-group mb-3 text-left">
                                <li class="list-group-item border-dark bg-light text-left text-black mb-1">
                                    <b>Hardskills:</b> @string.Join(" | ", proposal.Hardskills.Select(e => e.Description))
                                </li>
                                <li class="list-group-item border-dark bg-light text-left text-black mb-1">
                                    <b>Softskills:</b> @string.Join(" | ", proposal.Softskills)
                                </li>
                                <li class="list-group-item border-dark bg-light text-left text-black mb-1">
                                    <b>Branchen:</b> @string.Join(" | ", proposal.Fields)
                                </li>
                            </ul>
                        </div>
                        <button class="btn btn-outline-dark btn-block mb-3" @onclick="(() => { ChangeVisible(3, proposal.ProposalId); })">
                            Zusatzinformationen
                        </button>
                        <li class="list-group-item border-dark bg-light text-left text-black mb-1 @(_showAdditionalInfo[proposal.ProposalId] ? "collapse" : "")">
                            @proposal.AdditionalInfo
                        </li>
                    </div>
                </div>
            </div>
        }

    </div>

</div>
<!-- RC - Level Pop-Up -->
@if (ShowPop)
{
    <div class="modal fade show mt-5" id="myModal" style=" display: inline-block;">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">RC - Level anpassen</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group row col align-content-center">
                        <label for="example-number-input" class="col-form-label mr-4">Level:</label>

                        <input class="form-control col-4" min="1" max="7" type="number" @bind=@_changeValue id="example-number-input"/>

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="(() => { ShowRcEdit(null, 1); })">Abbrechen</button>
                    <button type="button" class="btn btn-success" data-dismiss="modal" @onclick="(() => { ShowRcEdit(null, 0); })">Speichern</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}



@code {

    EditProposal _editProposal;
    EmployeeDetail _employeeDetail;
    Dictionary<int, bool> _showEmployee;
    Dictionary<int, bool> _showAttributes;
    Dictionary<int, bool> _showAdditionalInfo;
    Dictionary<int, bool> _promptDelete;
    public bool ShowPop { get; set; }
    public Employee RcToEdit { get; set; }

    private static int _restoreValue;
    private static int _changeValue;

    protected override void OnInitialized()
    {
        _promptDelete = new Dictionary<int, bool>();
        _showEmployee = new Dictionary<int, bool>();
        _showAttributes = new Dictionary<int, bool>();
        _showAdditionalInfo = new Dictionary<int, bool>();
        foreach (var proposal in _proposal.GetAllProposals())
        {
            _promptDelete.Add(proposal.ProposalId, true);
            _showEmployee.Add(proposal.ProposalId, true);
            _showAttributes.Add(proposal.ProposalId, true);
            _showAdditionalInfo.Add(proposal.ProposalId, true);
        }
    }

    public void ChangeVisible(int typeOfInfo, int identifier)
    {
        if (typeOfInfo == 1)
        {
            _showEmployee[identifier] = !_showEmployee[identifier];
        }
        else if (typeOfInfo == 2)
        {
            _showAttributes[identifier] = !_showAttributes[identifier];
        }
        else
        {
            _showAdditionalInfo[identifier] = !_showAdditionalInfo[identifier];
        }
    }

    private void ShowEdit(int propId)
    {
        Console.WriteLine("this function is being called");
        _editProposal.Show(propId);
    }

    private void ShowDetail(int employeeId, int proposalId)
    {
        _employeeDetail.Show(employeeId, proposalId);
    }
    private void ShowRcEdit(Employee emp, int response)
    {
        if (!ShowPop)
        {
            RcToEdit = emp;
            _restoreValue = emp.Rc;
            _changeValue = emp.Rc;
        }
        else
        {
            if (response == 0)
            {
                RcToEdit.Rc = _changeValue;
            }
            if (response == 1)
            {
                RcToEdit.Rc = _restoreValue;
            }
        }

        ShowPop = !ShowPop;
    }

    private void CallCopy(int id)
    {
        int temp;
        if ((temp = _proposal.CopyProposal(id)) != 0)
        {
            OnInitialized();
        }
        else
        {
            Console.WriteLine("fehler");
        }
    }

    private void CallDelete(int id)
    {
        if (_proposal.GetProposal(id) != null)
        {
            _proposal.DeleteProposal(id);
            OnInitialized();
        }
    }

    private void CallSearch(int Id)
    {
        _navManager.NavigateTo("/SearchEmployee/" + Id.ToString());
    }

    public void OpenDeletePrompt(int Id)
    {
        Console.WriteLine("this function is being called");
        _promptDelete[Id] = !_promptDelete[Id];
    }

    private void RemoveEmployee(int proposalId, int employeeId)
    {
        Proposal tempProposal;
        Employee tempEmployee;
        if ((tempProposal = _proposal.GetProposal(proposalId)) != null)
        {
            if ((tempEmployee = tempProposal.Employees.Find(e => e.EmployeeId == employeeId)) != null)
            {
                tempProposal.Employees.Remove(tempEmployee);
            }
        }
    }
    public async Task CreateDocument(int id)
    {
        using (MemoryStream mem = new MemoryStream())
        {
            using (WordprocessingDocument wordDocument =
                WordprocessingDocument.Create(mem, WordprocessingDocumentType.Document))
            {
    //Grundstruktur des Dokuments erzeugen (Document und Rumpf des Dokuments)
                MainDocumentPart mainPart = wordDocument.AddMainDocumentPart();
                Document document1 = new Document();
                Body body1 = document1.AppendChild(new Body());
    //Document zeilenweise befüllen
                Paragraph para1 = body1.AppendChild(new Paragraph());
                Run run1 = para1.AppendChild(new Run());
                run1.AppendChild(new Text("Projekt: " + id.ToString()));
               
    //Das erstellte Dokument übergeben
                mainPart.Document = document1;
            }


            var task = await _blazorDownloadFileService.DownloadFile("test.docx", mem, "application/octet-stream");
        }
    }

    
}
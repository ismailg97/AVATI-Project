@using AVATI.Data
@using AVATI.Data.EmployeeDetailFiles
@using DocumentFormat.OpenXml.Wordprocessing
@using DocumentFormat.OpenXml.Packaging
@using System.IO
@using BlazorDownloadFile

@inject IBlazorDownloadFileService _blazorDownloadFileService
@inject IProposalService _proposal
@inject IEmployeeService _employeeService
@inject IEmployeeDetailService _employeeDetailService
@inject IProjectActivityService _activity
@inject IProjektService _project
@inject NavigationManager _navigationManager

<AuthorizeView Roles="SalesStaff">
<NotAuthorized>
    @if (true)
    {
        _navigationManager.NavigateTo("/profile");
    }
</NotAuthorized>
<Authorized Context="authContext">



@if (ShowEdit)
{
    if (EmployeeAttributes != null)
    {
        <EditForm Model="@EmployeeDetailView" OnValidSubmit="@UpdateEmployeeDetail">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="modal fade show d-block overflow-auto" data-bs-backdrop="static" id="exampleModal" role="dialog">
                <div class="modal-dialog" role="document" style="min-width:100%">
                    <div class="modal-content bg-light text-black" style="min-height: 100%; max-height: 100%">
                        @if (_isLoaded)
                        {
                            <div class="modal-header">
                                <h5 class="modal-title font-weight-bolder text-center" id="titleLabel">Detailansicht <small>Attribute per Knopfdruck auswählen (<span style="color: green">Grün</span> = Ausgewählt)</small></h5>
                                <button type="button" class="close" aria-label="Close" @onclick=@Close>
                                    <span aria-hidden="true">×</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <div class="row justify-content-md-center">
                                    <div class="card text-black border-dark ml-5" style="width: 20%; max-width: 20%">
                                        <img class="card-img-top" src="@_employeeService.GetEmployeeProfile(EmpId).Image" style="border:2px solid black; max-height: 60%; max-width: 100%" alt=""/>
                                        <div class="card-body pb-3 pt-3">
                                            <h5 class="card-title">@_employeeService.GetEmployeeProfile(EmpId).FirstName @_employeeService.GetEmployeeProfile(EmpId).LastName</h5>
                                            <div class="card-title text-left">
                                                Rate Card Level:
                                                @if (EmployeeAttributes.Rc != 0)
                                                {
                                                    <button class="btn btn-sm btn-success" type="button" @onclick=@(() => { EmployeeDetailView.Rc = 0; })>@_employeeDetailService.GetEmployeeDetail(EmpId, PropId).Result.Rc</button>
                                                }
                                                else
                                                {
                                                    <button class="btn btn-sm btn-outline-dark" type="button" @onclick=@(() => { EmployeeDetailView.Rc = EmployeeAttributes.Rc; })>@_employeeDetailService.GetEmployeeDetail(EmpId, PropId).Result.Rc</button>
                                                }
                                            </div>
                                            <div class="card-text text-left">
                                                Branchen:
                                                @foreach (var field in EmployeeAttributes.Field)
                                                {
                                                    if (EmployeeDetailView.Fields.Find(e => e.Equals(field)) != null)
                                                    {
                                                        <button class="btn btn-sm btn-success mb-1 mr-1" id="addField" type="button" @onclick=@(() => { EmployeeDetailView.Fields.Remove(field); })>@field</button>
                                                    }
                                                    else
                                                    {
                                                        <button class="btn btn-sm btn-outline-dark mb-1 mr-1" id="addField" type="button" @onclick=@(() => { EmployeeDetailView.Fields.Add(field); })>@field</button>
                                                    }
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <div class="card col border-secondary ml-2 overflow-auto" style="max-width: 30%;">
                                        <div class="card-header text-left bg-transparent border-secondary">Projekt(e) + Tätigkeit(en)</div>
                                        <div class="card-body text-left overflow-auto" style=" max-height: 80%">
                                            @foreach (var proj in _projectsWithActivities.Keys)
                                            {
                                                if (_projectsWithActivities[proj].Any())
                                                {
                                                    <div class="">Projekt: <span style=@(EmployeeDetailView.ProjectActivities.Count(e => e.ProjectID == proj) == 0 ? "color: black" : "color: green; font-weight: bold")>@_project.GetProject(proj).Projecttitel</span></div>
                                                    <div class="row mb-2 mt-2">
                                                        @foreach (var projectActivity in _projectsWithActivities[proj])
                                                        {
                                                            if (EmployeeDetailView.ProjectActivities.Exists(e => e.ProjectActivityID == projectActivity.ProjectActivityID))
                                                            {
                                                                <button type="button" class="btn btn-success btn-sm mr-1" @onclick=@(() => { EmployeeDetailView.ProjectActivities.RemoveAll(e => e.ProjectActivityID == projectActivity.ProjectActivityID); })>@projectActivity.Description</button>
                                                            }
                                                            else
                                                            {
                                                                <button type="button" class="btn btn-outline-dark btn-sm mr-1" @onclick=@(() => { EmployeeDetailView.ProjectActivities.Add(projectActivity); })>@projectActivity.Description</button>
                                                            }
                                                        }
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                    <div class="col" style="width: 55%">
                                        <div class="row mb-2">
                                            <div class="card col-sm-7 border-secondary ml-2 mr-2" style="min-height: 221.883px">
                                                <div class="card-header text-left bg-transparent border-secondary">Hardskills</div>
                                                <div class="card-body text-left">
                                                    @foreach (var hardSkill in EmployeeAttributes.Hardskills)
                                                    {
                                                        if (EmployeeDetailView.Hardskills.Find(e => e.Description.Equals(hardSkill.Description)) != null)
                                                        {
                                                            <button class="btn btn-sm btn-success mb-1 mr-1" id="addHardskill" type="button" @onclick=@(() => { EmployeeDetailView.Hardskills.RemoveAll(e => e.Description == hardSkill.Description); })>@hardSkill.Description</button>
                                                        }
                                                        else
                                                        {
                                                            <button class="btn btn-sm btn-outline-dark mb-1 mr-1" id="addHardskill" type="button" @onclick=@(() => { EmployeeDetailView.Hardskills.Add(hardSkill); })>@hardSkill.Description</button>
                                                        }
                                                    }
                                                </div>
                                            </div>
                                            <div class="card col-sm-4 border-secondary">
                                                <div class="card-header text-left bg-transparent border-secondary">Sprache(n)</div>
                                                <div class="card-body text-left">
                                                    @foreach (var lang in EmployeeAttributes.Language)
                                                    {
                                                        if (EmployeeDetailView.Languages.Find(e => e.Item1.Equals(lang.Item1)) != null)
                                                        {
                                                            <button class="btn btn-sm btn-success mb-1 mr-1" id="addLanguage" style="word-break: break-all" type="button" @onclick=@(() => { EmployeeDetailView.Languages.Remove(lang); })>@lang.Item1 @lang.Item2</button>
                                                        }
                                                        else
                                                        {
                                                            <button class="btn btn-sm btn-outline-dark mb-1 mr-1" type="button" id="addLanguage" style="word-break: break-all" @onclick=@(() => { EmployeeDetailView.Languages.Add(lang); })>@lang.Item1 @lang.Item2</button>
                                                        }
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row mt-2">
                                            <div class="card border-secondary col-sm-7 ml-2 mr-2" style="min-height: 221.883px">
                                                <div class="card-header text-left bg-transparent border-secondary">Softskills</div>
                                                <div class="card-body text-left">
                                                    @foreach (var softSkill in EmployeeAttributes.Softskills)
                                                    {
                                                        if (EmployeeDetailView.Softskills.Contains(softSkill))
                                                        {
                                                            <button class="btn btn-sm btn-success mb-1 mr-1" type="button" id="addSoftskill" @onclick=@(() => { EmployeeDetailView.Softskills.Remove(softSkill); })>@softSkill</button>
                                                        }
                                                        else
                                                        {
                                                            <button class="btn btn-sm btn-outline-dark mb-1 mr-1" type="button" id="addSoftskill" @onclick=@(() => { EmployeeDetailView.Softskills.Add(softSkill); })>@softSkill</button>
                                                        }
                                                    }
                                                </div>
                                            </div>
                                            <div class="card border-secondary col-sm-4">
                                                <div class="card-header text-left bg-transparent border-secondary">Rolle(n)</div>
                                                <div class="card-body text-left">
                                                    @foreach (var role in EmployeeAttributes.Roles)
                                                    {
                                                        if (EmployeeDetailView.Roles.Find(e => e.Equals(role)) != null)
                                                        {
                                                            <button class="btn btn-sm btn-success mb-1 mr-1" type="button" id="addRole" @onclick=@(() => { EmployeeDetailView.Roles.Remove(role); })>@role</button>
                                                        }
                                                        else
                                                        {
                                                            <button class="btn btn-sm btn-outline-dark mb-1 mr-1" type="button" id="addRole" @onclick=@(() => { EmployeeDetailView.Roles.Add(role); })>@role</button>
                                                        }
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer justify-content-between">
                                <div>
                                    <button class="btn btn-secondary" type="button" @onclick=@(CreateDocument)>Dokument <span class="ml-1 oi oi-document"></span></button>
                                    <label class="col-form-label ml-2 font-weight-bold">Rabatt (in %): </label>
                                    <InputNumber min="0" max="100" class="form-control-lg col-lg-2 col-sm-2 col-md-2" @bind-Value="EmployeeDetailView.Discount"/>
                                    <label class="col-form-label ml-2 font-weight-bold"> Std.: </label>
                                    <InputNumber min="0" max="70" class="form-control-lg col-lg-2 col-sm-2 col-md-2" @bind-Value="EmployeeDetailView.Hours"/>
                                </div>
                                <div class="alert alert-success font-weight-bolder text-center @(!_visibleSafe ? "collapse" : "")">
                                    <span class="oi oi-check"></span> Änderungen erfolgreich gespeichert!
                                </div>
                                <div class="alert alert-danger font-weight-bolder text-center @(!_visiblePrompt ? "collapse" : "")">
                                    <span class="oi oi-warning"></span> Mind. eine Rolle notwendig!
                                </div>
                                <div class="btn-group">
                                    <button type="button" class="btn btn-danger mr-1" @onclick=@(Close) data-dismiss="modal">Abbrechen</button>
                                    <button type="submit" class="btn btn-success">Speichern</button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex flex-column align-items-center justify-content-center">
                                <div class="row">
                                    <div class="spinner-border" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                </div>
                                <div class="row">
                                    <strong>Lade...</strong>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        Console.WriteLine("Couldn't find employee");
    }
}

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


</Authorized>
</AuthorizeView>


@code {

    [Parameter]
    public int EmpId { get; set; }

    [Parameter]
    public ProposalOverview Abstract { get; set; }

    private bool _isLoaded = false;

    private bool _visibleSafe;
    private bool _visiblePrompt;


    public int PropId { get; set; }
    public Data.EmployeeDetailFiles.EmployeeDetail EmployeeDetailView;
    public Data.Employee EmployeeAttributes;
    public bool ShowEdit { get; set; }
    public bool ShowBackdrop { get; private set; }
    private Dictionary<int, List<ProjectActivity>> _projectsWithActivities;

    public async Task Show(int employeeId, int proposalId)
    {
        ShowEdit = !ShowEdit;
        ShowBackdrop = !ShowBackdrop;
        EmpId = employeeId;
        PropId = proposalId;
        var detail = _employeeDetailService.GetEmployeeDetail(employeeId, proposalId);
        EmployeeDetailView = await detail;
        _projectsWithActivities = _activity.GetActivitiesWithProjectsGrouped(EmpId);
        EmployeeAttributes = _employeeService.GetEmployeeProfile(EmpId);
        _isLoaded = true;
    }

    private void Close()
    {
        ShowEdit = !ShowEdit;
        ShowBackdrop = !ShowBackdrop;
    }

    private async void UpdateEmployeeDetail()
    {
        await _employeeDetailService.UpdateEmployeeDetail(EmpId, PropId, EmployeeDetailView);
        _visibleSafe = true;
        StateHasChanged();
        await Task.Delay(500);
        _visibleSafe = false;
        StateHasChanged();
    }

    public async Task CreateDocument()
    {
        const string empTemplatePath = "wwwroot\\templates\\AvatiWorkerDoc.docx";
        var emp = _employeeService.GetEmployeeProfile(EmpId);
        var empDetail = _employeeDetailService.GetEmployeeDetail(emp.EmployeeID, PropId).Result;
        if (!empDetail.Roles.Any())
        {
            _visiblePrompt = true;
            StateHasChanged();
            await Task.Delay(2000);
            _visiblePrompt = false;
            StateHasChanged();
            return;
        }
        MemoryStream memStream = new MemoryStream();
        await using (FileStream fileStream = new FileStream(empTemplatePath, FileMode.Open, FileAccess.Read))
            await fileStream.CopyToAsync(memStream);
        using (WordprocessingDocument employeeDoc = WordprocessingDocument.Open(memStream, true))
        {
            var empBody = employeeDoc.MainDocumentPart.Document.Body;
            var empParagraphs = empBody.Descendants<Paragraph>().ToList();
            foreach (var par in empParagraphs)
            {
                foreach (var run in par.Descendants<Run>().ToList())
                {
                    foreach (var text in run.Descendants<Text>().ToList())
                    {
                        switch (text.Text)
                        {
                            case "Name":
                                text.Text = text.Text.Replace("Name", emp.FirstName + " " + emp.LastName);
                                break;
                            case "numb":
                                text.Text = text.Text.Replace("numb", empDetail.Rc.ToString());
                                break;
                            case "branch":
                                foreach (var field in empDetail.Fields)
                                {
                                    par.InsertAfterSelf(ProposalOverview.GenerateFieldListItem(field));
                                }
                                par.Remove();
                                break;
                            case "hards":
                                foreach (var hardskill in empDetail.Hardskills)
                                {
                                    par.InsertAfterSelf(ProposalOverview.GenerateHardskillListItem(hardskill.Description));
                                }
                                par.Remove();
                                break;
                            case "softs":
                                foreach (var softskill in empDetail.Softskills)
                                {
                                    par.InsertAfterSelf(ProposalOverview.GenerateSoftskillListItem(softskill));
                                }
                                par.Remove();
                                break;
                            case "langs":
                                foreach (var lang in empDetail.Languages)
                                {
                                    par.InsertAfterSelf(ProposalOverview.GenerateLanguageListItem(lang));
                                }
                                par.Remove();
                                break;
                            case "project":
                                foreach (var proj in empDetail.ProjectActivities)
                                {
                                    par.InsertAfterSelf(ProposalOverview.GenerateProjectActivityListItem(proj, _project.GetProject(proj.ProjectID).Projecttitel));
                                }
                                par.Remove();
                                break;
                            case "roles":
                                foreach (var role in empDetail.Roles)
                                {
                                    par.InsertAfterSelf(ProposalOverview.GenerateRoleListItem(role));
                                }
                                par.Remove();
                                break;
                        }
                    }
                }
            }
            employeeDoc.Save();
            employeeDoc.Close();
        }
        var task = await _blazorDownloadFileService.DownloadFile("Mitarbeiter.docx", memStream, "application/octet-stream");
    }

}
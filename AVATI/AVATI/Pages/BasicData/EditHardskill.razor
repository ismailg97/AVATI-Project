@using AVATI.Data
@using DocumentFormat.OpenXml.Drawing.Diagrams

@inject IHardskillService _hardskillService
@inject NavigationManager _navigationManager


<div class="modal @(_show ? "fade show" : "" )" id="myModal" style=" display: @(_show ? "block" : "none");">
               <div class="modal-dialog">
                 <div class="modal-content">
                   <div class="modal-header">
                     <h4 class="modal-title">Ändere den Hardskill</h4>
                     <button type="button" class="close" data-dismiss="modal" @onclick="Showing">&times;</button>
                   </div>
                   <EditForm Model="@NewHardskill" OnValidSubmit="Update">
                     <div class="modal-body">
                       <label class="form-label">Bezeichnung:</label>
                       <InputText class="form-control" @bind-Value="@NewHardskill.Description"/>
                       <label class="form-label">Oberkategorie:</label>
                       <table>
                         @if (UpperCat != null && UpperCat.Any())
                         {
                           foreach (var uppercat in UpperCat)
                           {
                             <tr>@uppercat</tr>
                           }
                         }
                         else
                         {
                           <tr>Keine Oberkategorie</tr>
                         }
                       </table>
                       <div class="list-group border-dark overflow-auto mr-3 col-9" style="height: 100px">
                         @if (_allCategorys != null)
                         {
                           foreach (var cat in _allCategorys)
                           {
                             <button type="button" class="@(IsInList(cat) ? "btn btn-primary btn-sm" : "btn btn-secondary btn-sm")" @onclick="() => UpperCatList(cat)">
                               <a><a class="@(IsInList(cat) ? "showRemove" : "")">@cat</a> <a class="remove"><span class="oi oi-x"></span></a></a>
                             </button>
                           }
                         }
                       </div>
                     </div>
                     <div class="modal-footer">
                       <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="Showing">Abbrechen</button>
                       <button type="submit" class="btn btn-success">Speichern</button>
                     </div>
                   </EditForm>
                 </div>
               </div>
          </div>
@if (_show)
{
  <div class="modal-backdrop fade show"></div>
}

@code {
  [Parameter] public BasicDataAbstract Abstract { get; set; }
  
  private bool _show = false;

  [Parameter] 
  public Hardskill OldHardskill{ get; set; }

  private List<string> UpperCat { get; set; } = new();

  private Hardskill NewHardskill { get; set; } = new();
  
  private List<string> _allCategorys;

  protected override async Task OnInitializedAsync()
  {
    _allCategorys = await _hardskillService.GetAllDesCategorys();
  }

  protected override void OnParametersSet()
  {
    NewHardskill.Description = OldHardskill?.Description;
    UpperCat = OldHardskill?.Uppercat;
  }

  private async Task Update()
  {
    NewHardskill.Subcat = null;

    NewHardskill.Uppercat = new List<string>(UpperCat);
    
    await _hardskillService.UpdateHardskill(NewHardskill, OldHardskill);
    await Abstract.UpdateHardskills();
    await Abstract.UpdateCategorys();
    Showing();
    //_navigationManager.NavigateTo(_navigationManager.Uri, true);
  }
  
  private void UpperCatList(string description)
  {
    if (UpperCat.Contains(description))
      UpperCat?.Remove(description);
    else
      UpperCat?.Add(description);
    StateHasChanged();
  }

  private bool IsInList(string description)
  {
    return UpperCat != null && UpperCat.Contains(description);
  }

  public void Showing()
  {
    _show = !_show;
    StateHasChanged();
  }
    
}
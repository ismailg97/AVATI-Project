@using AVATI.Data
@using DocumentFormat.OpenXml.Drawing.Diagrams

@inject IHardskillService _hardskillService
@inject NavigationManager _navigationManager


<div class="modal @(_show ? "fade show" : "" )" id="myModal" style=" display: @(_show ? "block" : "none");">
               <div class="modal-dialog">
                 <div class="modal-content">
                   <div class="modal-header">
                     <h4 class="modal-title">Ändere den Hardskill</h4>
                     <button type="button" class="close" data-dismiss="modal" @onclick="Showing">&times;</button>
                   </div>
                   <div class="modal-body">
                     <a style="position: relative;">
                       <MudPopover Open="@_showError" Class="alert text-center" Style="width: 380px; height: auto; color: darkred; font-weight: 650; font-size: 14px; background-color: #f8d7da">
                         @if (_whatToShow == 0)
                         {
                           <a>Editieren misslungen, der Hardskill bzw. die Kategorie exsistiert bereits!</a>
                         } 
                         else if (_whatToShow == 1)
                         {
                           <a>Editieren misslungen, die Bezeichnung fehlt!</a>
                         }
                         else if (_whatToShow == 2)
                         {
                           <a>Editieren misslungen, die Bezeichnung ist zu lang (max. 150 Zeichen)!</a>
                         }
                       </MudPopover>
                     </a>
                     <label class="form-label">Bezeichnung:</label>
                     <input class="form-control" @bind="@NewHardskill.Description"/>
                     <label class="form-label" style="margin-top: 20px;">Oberkategorie:</label>
                     <div>
                       @if (UpperCat != null && UpperCat.Any())
                       {
                         foreach (var uppercat in UpperCat)
                         {
                           <a style="margin-left: 5px; margin-top: 5px; color: white !important;" class="btn btn-primary" type="button" @onclick="() => UpperCatList(uppercat)">
                             <a class="showRemove">@uppercat</a> <a class="remove"><span class="oi oi-x"></span></a>
                           </a>
                         }
                       }
                       else
                       {
                         <tr style="color: #818181 !important;">Keine Oberkategorie</tr>
                       }
                     </div>
                     <hr/>
                     <div class="list-group border-dark overflow-auto mr-3 col-9" style="height: 100px">
                       @if (_allCategorys != null)
                       {
                         foreach (var cat in _allCategorys)
                         {
                           <button style="margin-bottom: 3px;" type="button" class="@(IsInList(cat) ? "btn btn-primary btn-sm" : "btn btn-secondary btn-sm")" @onclick="() => UpperCatList(cat)">
                             <a><a class="@(IsInList(cat) ? "showRemove" : "")">@cat</a> <a class="remove"><span class="oi oi-x"></span></a></a>
                           </button>
                         }
                       }
                     </div>
                   </div>
                     <div class="modal-footer">
                       <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="Showing">
                         <span class="oi oi-circle-x" aria-hidden="true"></span> Abbrechen
                       </button>
                       <button type="button" class="btn btn-success" @onclick="Update">
                         <span class="oi oi-document" aria-hidden="true"></span> Speichern
                       </button>
                     </div>
                 </div>
               </div>
          </div>
@if (_show)
{
  <div class="modal-backdrop fade show"></div>
}

@code {
  [Parameter] public BasicDataAbstract Abstract { get; set; }
  
  private bool _show = false;

  [Parameter] 
  public Hardskill OldHardskill{ get; set; }

  private List<string> UpperCat { get; set; } = new();

  private Hardskill NewHardskill { get; set; } = new();
  
  private List<string> _allCategorys;
  
  private int _whatToShow;

  private bool _showError;

  protected override async Task OnInitializedAsync()
  {
    var taskAllCategorys = _hardskillService.GetAllDesCategorys();
    _allCategorys = await taskAllCategorys;
  }

  protected override void OnParametersSet()
  {
    _showError = false;
    _whatToShow = -1;
    NewHardskill.Description = OldHardskill?.Description;
    UpperCat = OldHardskill?.Uppercat;
  }
  
  private async void ShowErrorMessage(int whatToShow)
  {
    _whatToShow = whatToShow;
    _showError = true;
    StateHasChanged();
    await Task.Delay(3000);
    _showError = false;
    StateHasChanged();
  }

  private async Task Update()
  {
    if (!_hardskillService.CheckEmptyHardskill(NewHardskill.Description))
    {
      ShowErrorMessage(1);
      return;
    }

    if (!await _hardskillService.CheckExistHardskill(NewHardskill.Description) && NewHardskill.Description != OldHardskill.Description)
    {
      ShowErrorMessage(0);
      return;
    }

    if (!_hardskillService.CheckLengthHardskill(NewHardskill.Description))
    {
      ShowErrorMessage(2);
      return;
    }
    
    NewHardskill.Subcat = null;

    NewHardskill.Uppercat = new List<string>(UpperCat);
    
    await _hardskillService.UpdateHardskill(NewHardskill, OldHardskill);
    Showing();
    await Abstract.UpdateHardskills();
    await Abstract.UpdateCategorys();
  }
  
  private void UpperCatList(string description)
  {
    if (UpperCat.Contains(description))
    {
      UpperCat.Remove(description);
      if(!_allCategorys.Contains(description))
        _allCategorys.Add(description);
    }
    else
    {
      UpperCat.Add(description);
      if(_allCategorys.Contains(description))
        _allCategorys.Remove(description);
    }
    StateHasChanged();
  }

  private bool IsInList(string description)
  {
    return UpperCat != null && UpperCat.Contains(description);
  }

  public void Showing()
  {
    _show = !_show;
    StateHasChanged();
  }
    
}
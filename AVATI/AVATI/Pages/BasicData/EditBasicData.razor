@using AVATI.Data
@using DocumentFormat.OpenXml.InkML

@inject IBasicDataService _basicDataService
@inject NavigationManager _navigationManager

<div class="modal @(_show ? "fade show" : "" )" id="myModal" style=" display: @(_show ? "block" : "none");">
               <div class="modal-dialog">
                  <div class="modal-content">
                    <div class="modal-header">
                      @if (Type == BasicDataType.SoftSkill)
                      {
                        <h4 class="modal-title">Editieren des Softskills "<b>@OldDescription</b>"</h4>
                      }
                      else if (Type == BasicDataType.Field)
                      {
                        <h4 class="modal-title">Editieren der Branche "<b>@OldDescription</b>"</h4>
                      }
                      else
                      {
                        <h4 class="modal-title">Editieren der Rolle "<b>@OldDescription</b>"</h4>
                      }
                      <button type="button" class="close" data-dismiss="modal" @onclick="Showing">&times;</button>
                    </div>
                    <div class="modal-body">
                      <a style="position: relative;">
                        <MudPopover Open="@_showError" Class="alert alert-danger text-center" Style="width: 380px; height: auto; color: darkred; font-weight: 650; font-size: 14px; background-color: #f8d7da">
                          @if (_whatToShow == 0)
                          {
                            <a>Editieren misslungen, 
                              @if (Type == BasicDataType.Field)
                              {
                                <a>die Branche</a>
                              }
                              else if (Type == BasicDataType.Role)
                              {
                                <a>die Rolle</a>
                              }
                              else if (Type == BasicDataType.SoftSkill)
                              {
                                <a>der Softskill</a>
                              }
                              exsistiert bereits!</a>
                          } 
                          else if (_whatToShow == 1)
                          {
                            <a>Editieren misslungen, die Bezeichnung fehlt!</a>
                          }
                          else if (_whatToShow == 2)
                          {
                            <a>Editieren misslungen, die Bezeichnung ist zu lang (max. 150 Zeichen)!</a>
                          }
                        </MudPopover>
                      </a>
                      <label class="form-label">Bezeichnung:</label>
                      <input class="form-control col-7" type="text" id="softskill" @bind="NewDescription"/>
                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="Showing">
                        <span class="oi oi-circle-x" aria-hidden="true"></span> Abbrechen
                      </button>
                      <button type="button" class="btn btn-success" @onclick="Update">
                        <span class="oi oi-document" aria-hidden="true"></span> Speichern
                      </button>
                    </div>
                  </div>
              </div>
          </div>
@if (_show)
{
  <div class="modal-backdrop fade show"></div>
}


@code {
  [Parameter] public BasicDataAbstract Abstract { get; set; }
  
  [Parameter]
  public string OldDescription { get; set; }

  [Parameter]
  public BasicDataType Type { get; set; }

  private bool _show = false;
  
  private string NewDescription { get; set; }
  
  private int _whatToShow;
  
  private bool _showError;

  protected override void OnParametersSet()
  {
    NewDescription = OldDescription;
    _showError = false;
    _whatToShow = -1;
  }
  
  private async void ShowErrorMessage(int whatToShow)
  {
    _whatToShow = whatToShow;
    _showError = true;
    StateHasChanged();
    await Task.Delay(3000);
    _showError = false;
    StateHasChanged();
  }

  private void Update()
  {
    if (!_basicDataService.CheckEmptyBasicData(NewDescription))
    {
      ShowErrorMessage(1);
      return;
    }

    if (CheckDescription() && NewDescription != OldDescription)
    {
      ShowErrorMessage(0);
      return;
    }

    if (!_basicDataService.CheckLengthBasicData(NewDescription))
    {
      ShowErrorMessage(2);
      return;
    }
    
    switch (Type)
    {
      case BasicDataType.SoftSkill:
        _basicDataService.UpdateSoftSkill(NewDescription, OldDescription);
        Abstract.UpdateSoftskills(NewDescription);
        break;
      case BasicDataType.Field:
        _basicDataService.UpdateField(NewDescription, OldDescription);
        Abstract.UpdateFields(NewDescription);
        break;
      default:
        _basicDataService.UpdateRole(NewDescription, OldDescription);
        Abstract.UpdateRoles(NewDescription);
        break;
    }
    Showing();
    //_navigationManager.NavigateTo(_navigationManager.Uri, true);
  }
  
  private bool CheckDescription()
  {
    return (Type == BasicDataType.SoftSkill && !_basicDataService.CheckDescriptionSoftskill(NewDescription)) ||
           (Type == BasicDataType.Field && !_basicDataService.CheckDescriptionField(NewDescription)) ||
           (Type == BasicDataType.Role && !_basicDataService.CheckDescriptionRole(NewDescription));
  }

  public void Showing()
  {
    _show = !_show;
    StateHasChanged();
  }
}
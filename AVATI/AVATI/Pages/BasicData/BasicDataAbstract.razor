@page "/BasicDataAbstract"
@using AVATI.Data
@using Blazorise

@inject IBasicDataService _basicDataService
@inject IHardskillService _hardskillService

<h1><b>Basisdaten</b> <small>Hier können Sie Basisdaten hinzugefügen, editieren und löschen</small></h1>
<hr />

<EditBasicData @ref="_editBasicData" OldDescription="@Description" Type="@Type" Abstract="@this"/>
<DeleteConfirmation @ref="_deleteConfirmation" Description="@Description" Type="@Type" Abstract="@this"/>
<CreateBasicData @ref="_createBasicData" Type="@Type" Abstract="@this"/>

<CreateHardskill @ref="_createHardskill" Abstract="@this"/>
<EditHardskill @ref="_editHardskill" OldHardskill="@Hardskill" Abstract="@this"/>

<AddHardskills @ref="_createCat" Description="" Abstract="@this"/>

<h3 class="cap"><b>Skills</b></h3>
<table class="table align-middle mb-5">
    <caption><h4 style="display: inline;"><b>Softskills</b></h4>
        <button id="BlendinoutSoftskill" style="display: inline;" class="@(_show[0] ? "btn btn-outline-primary" : "btn btn-primary")" @onclick="() => Showing(0)">@(_show[0] ? "Ausblenden" : "Einblenden")</button>
        <button id="CreateSoftskill" style="display: inline;" class="btn btn-success" @onclick="() => PopCreateBasicData(BasicDataType.SoftSkill)">Hinzufügen</button>
    </caption>
    
    
    @if (_show[0])
    {
        <div class="form-group col-8">
                    <input id="FilterSoftskill" class="form-control" type="text" placeholder="Filter..."
                           @bind="Filter[0]"
                           @bind:event="oninput">
        </div>
        if (_softskills.Any(x => IsVisible(x, 0)))
        {
            <tr>
                <th>Bezeichnung</th>
                <th></th>
                <th></th>
            </tr>
            
            var count = 0;
        
            foreach (string softskill in _softskills)
            {
                if (!IsVisible(softskill, 0))
                    continue;
                <tr class="@(count % 2 == 0 ? "grey" : "white")">
                    <td id="S @softskill">@softskill</td>
                    <td class="smalltd"><button class="btn btn-secondary" id="EditS @softskill" @onclick="() => PopEditBasicData(softskill, BasicDataType.SoftSkill)">Editieren</button></td>
                    <td class="smalltd"><button class="btn btn-danger" id="DeleteS @softskill" @onclick="() => PopDelete(softskill, BasicDataType.SoftSkill)">Löschen</button></td>
                </tr>
                ++count;
            }
        }
        else
        {
            <tr>
                <td style="color: #818181;">Kein Softskill gefunden</td>
            </tr>
        }
    }
</table>

<table class="table align-middle mb-5 table-striped">
    <caption><h4 style="display: inline;"><b>Hardskills</b></h4>
        <button id="BlendinoutHardskill" style="display: inline;" class="@(_show[1] ? "btn btn-outline-primary" : "btn btn-primary")" @onclick="() => Showing(1)">@(_show[1] ? "Ausblenden" : "Einblenden")</button>
        <button id="CreateHardskill" style="display: inline;" class="btn btn-success" @onclick="PopCreateHardskill">Hinzufügen</button> 
    </caption>
    
    @if (_show[1] && !_loadHardskills)
    {
        <div class="d-flex flex-column align-items-center justify-content-center">
            <div class="row">
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <div class="row">
                <strong>Lade...</strong>
            </div>
        </div>
    } else if (_show[1])
    {
        <div class="form-group col-8">
            <input id="FilterHardskill" class="form-control" type="text" placeholder="Filtern nach Hardskills..."
                   @bind="Filter[1]"
                   @bind:event="oninput">
        </div>
        <div class="form-group col-8">
            <input id="FilterHardskillCategorys" class="form-control" type="text" placeholder="Filtern nach Hardskillkategorien..."
                   @bind="Filter[5]" @bind:event="oninput">
        </div>
        @if (_hardskills != null && _hardskills.Any(x => IsVisible(x, 1)))
        {
            <tr>
                <th>Bezeichnung</th>
                <th></th>
                <th></th>
            </tr>
            
            var count = 0;
            
            foreach (string hardskill in _hardskills)
            {
                if (!IsVisible(hardskill, 1))
                    continue;

                if (!InCategory(hardskill))
                    continue;

                if (!_showUpper.ContainsKey(hardskill))
                {
                    _showUpper.Add(hardskill, false);
                }
            
            
                <tr class="@(count % 2 == 0 ? "grey" : "white")" @onmouseover="() => ShowingUpperCat(hardskill)" @onmouseout="() => ShowingUpperCat(hardskill)">
                    <td id="H @hardskill">@hardskill</td>
                    <td class="smalltd"><button class="btn btn-secondary" id="EditH @hardskill" @onclick="() => PopEditHardskill(hardskill)">Editieren</button></td>
                    <td class="smalltd">
                        <button class="btn btn-danger" id="DeleteH @hardskill" @onclick="() => PopDelete(hardskill, BasicDataType.HardSkill)">Löschen</button>
                    </td>
                </tr>
            

                @if (_showUpper[hardskill])
                {
                    <div id="UpperCat @hardskill">
                        <ShowUpperCat Description="@hardskill"/>
                    </div>
                }
                ++count;
            }
        }
        else
        {
            <tr>
                <td style="color: #818181;">Kein Hardskill gefunden</td>
            </tr>
        }
    }
</table>

<table class="table align-middle mb-5 table-striped">
    <caption><h4 style="display: inline;"><b>Hardskillkategorien</b> </h4>
        <button style="display: inline;" class="@(_show[2] ? "btn btn-outline-primary" : "btn btn-primary")" @onclick="() => Showing(2)">@(_show[2] ? "Ausblenden" : "Einblenden")</button>
        <button style="display: inline;" class="btn btn-success" @onclick="PopCreateHardskillCat">Hinzufügen</button>
    </caption>
    
    @if (_show[2] && !_loadCategorys)
    {
        <div class="d-flex flex-column align-items-center justify-content-center">
            <div class="row">
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <div class="row">
                <strong>Lade...</strong>
            </div>
        </div>
    } else if (_show[2])
    {
        <div class="form-group col-8">
            <input id="FilterCategory" class="form-control" type="text" placeholder="Filter..."
                   @bind="Filter[2]"
                   @bind:event="oninput">
        </div>
        @if (_allRoots != null && _allRoots.Any(x => IsVisible(x, 2)))
        {
            
            <tr>
                <th>Bezeichnung</th>
                <th></th>
                <th></th>
            </tr>

            var count = 0;
            
            @foreach (var hardskillcat in _allRoots)
            {
                if (!IsVisible(hardskillcat, 2))
                    continue;


                if (!_showEditCat.ContainsKey(hardskillcat))
                {
                    _showEditCat.Add(hardskillcat, false);
                }

                if (!_showSubCat.ContainsKey(hardskillcat))
                {
                    _showSubCat.Add(hardskillcat, false);
                }
                
                <tr class="@(count % 2 == 0 ? "grey" : "white")">
                    <td id="C @hardskillcat">@hardskillcat</td>
                    <td class="smalltd">
                        @if (!_showEditCat[hardskillcat])
                        {
                            if (!_showSubCat[hardskillcat])
                            {
                                <button class="btn btn-success" id="GetView @hardskillcat" @onclick="() => ShowingSubCat(hardskillcat)" type="button">Ansicht</button>
                            }
                            else
                            {
                                <button class="btn btn-outline-success" id="StopView @hardskillcat" @onclick="() => ShowingSubCat(hardskillcat)" type="button">Ansicht stoppen
                                </button>
                            }
                        }
                    </td>
                    <td class="smalltd">
                        @if (_showEditCat[hardskillcat])
                        {
                            <button class="btn btn-primary" id="FinishEditC @hardskillcat" @onclick="() => ShowingEditCat(hardskillcat)">Abgeschlossen</button>
                        }
                        else
                        {
                            <button class="btn btn-secondary" id="EditC @hardskillcat" @onclick="() => ShowingEditCat(hardskillcat)">Editieren</button>
                        }
                    </td>
                </tr>
                
                
                @if (_showEditCat[hardskillcat])
                {
                    <div id="EditTreeDiagram @hardskillcat">
                        <EditTreeDiagram Description="@hardskillcat" Abstract="@this"/>
                    </div>
                }
                else if (_showSubCat[hardskillcat])
                {
                    <div id="TreeDiagram @hardskillcat">
                        <TreeDiagram Description="@hardskillcat"/>
                    </div>
                }
                ++count;
            }
        }
        else
        {
            <tr>
                <td style="color: #818181;">Keine Hardskillkategorie gefunden</td>
            </tr>
        }
    }
</table>


<h3 class="cap"><b style="margin-right: 20px; display: inline;">Branchen</b>
    <button style="display: inline;" class="@(_show[3] ? "btn btn-outline-primary" : "btn btn-primary")" @onclick="() => Showing(3)">@(_show[3] ? "Ausblenden" : "Einblenden")</button>
    <button style="display: inline;" class="btn btn-success" @onclick="() => PopCreateBasicData(BasicDataType.Field)">Hinzufügen</button>
</h3>
@if (_show[3])
{
    <div class="form-group col-6">
        <input id="FilterField" class="form-control" type="text" placeholder="Filter..."
               @bind="Filter[3]"
               @bind:event="oninput">
    </div>
    <table class="table align-middle mb-5 table-striped">
        @if (_fields.Any(x => IsVisible(x, 3)))
        {
            
            <tr>
                <th>Bezeichnung</th>
                <th></th>
                <th></th>
            </tr>

            var count = 0;
            
            @foreach (var field in _fields)
            {

                @if (!IsVisible(field, 3))
                    continue;

                <tr class="@(count % 2 == 0 ? "grey" : "white")">
                    <td id="F @field">@field</td>
                    <td class="smalltd"><button id="EditF @field" class="btn btn-secondary" @onclick="() => PopEditBasicData(field, BasicDataType.Field)">Editieren</button></td>
                    <td class="smalltd"><button id="DeleteF @field" class="btn btn-danger" @onclick="() => PopDelete(field, BasicDataType.Field)">Löschen</button></td>
                </tr>
                ++count;
            }
        } else {
            <tr>
                <td style="color: #818181;">Keine Branche gefunden</td>
            </tr>
        }
</table>
}

<h3 class="cap"><b style="margin-right: 20px; display: inline;">Rollen</b>
    <button style="display: inline;" class="@(_show[4] ? "btn btn-outline-primary" : "btn btn-primary")" @onclick="() => Showing(4)">@(_show[4] ? "Ausblenden" : "Einblenden")</button>
    <button style="display: inline;" class="btn btn-success" @onclick="() => PopCreateBasicData(BasicDataType.Role)">Hinzufügen</button>
    </h3>
@if (_show[4])
{
    <div class="form-group col-6">
     <input id="FilterRole" class="form-control" type="text" placeholder="Filter..."
            @bind="Filter[4]"
            @bind:event="oninput">
    </div>
    <table class="table align-middle mb-5 table-striped">
        @if (_roles.Any(x => IsVisible(x, 4)))
        {
            <tr>
                <th>Bezeichnung</th>
                <th></th>
                <th></th>
            </tr>

            var count = 0;
            
            @foreach (var role in _roles)
            {

                @if (!IsVisible(role, 4))
                    continue;

                <tr class="@(count % 2 == 0 ? "grey" : "white")">
                    <td id="R @role">@role</td>
                    <td class="smalltd"><button class="btn btn-secondary" id="EditR @role" @onclick="() => PopEditBasicData(role, BasicDataType.Role)">Editieren</button></td>
                    <td class="smalltd"><button class="btn btn-danger" id="DeleteR @role" @onclick="() => PopDelete(role, BasicDataType.Role)">Löschen</button></td>
                </tr>
                ++count;
            }
        } else {
            <tr>
                <td style="color: #818181;">Keine Rolle gefunden</td>
            </tr>
        }
    </table>
}


@code {
    List<string> _softskills;
    List<string> _fields;
    List<string> _roles;
    List<string> _hardskills;
    List<string> _allRoots;
    Dictionary<string, List<string>> _allCategorys = new();
        
    CreateBasicData _createBasicData;
    EditBasicData _editBasicData;
    DeleteConfirmation _deleteConfirmation;

    CreateHardskill _createHardskill;
    EditHardskill _editHardskill;

    AddHardskills _createCat;

    //0: Filter for Softskill, 1: Filter for Hardskill, 2: Filter for Hardskillcategory
    //3: Filter for Field, 4: Filter for Role, 5: Filter for Hardskillcategorys at Hardskills
    private string[] Filter { get; set; } = new string[6];

    //0: Show for Softskill, 1: Show for Hardskill, 2: Show for Hardskillcategory
    //3: Show for Field, 4: Show for Role
    private bool[] _show = new bool[5];

    private  Dictionary<string, bool> _showEditCat = new();

    private Dictionary<string, bool> _showSubCat = new();

    private Dictionary<string, bool> _showUpper = new();

    private string Description { get; set; }
    
    private Hardskill Hardskill { get; set; }

    private BasicDataType Type { get; set; }

    private bool _loadHardskills;

    private bool _loadCategorys;

    protected override async Task OnInitializedAsync()
    {
        _loadCategorys = false;
        _loadHardskills = false;
        for(int i = 0; i < 5; ++i)
        {
            _show[i] = true;
        }
        _softskills = _basicDataService.GetAllSoftSkills();
        _fields = _basicDataService.GetAllFields();
        _roles = _basicDataService.GetAllRoles();
        var hardskills = _hardskillService.GetAllDesHardskills();
        _hardskills = await hardskills;
        var allRoots = _hardskillService.GetAllRoots();
        _allRoots = await allRoots;
        
        var categorys = _hardskillService.GetAllDesCategorys();

        foreach (var category in await categorys)
        {
            var hardskillsOfCategory = _hardskillService.GetHardskillsOfCategory(category);
            _allCategorys.TryAdd(category, await hardskillsOfCategory);
        }
        
        _loadCategorys = true;
        _loadHardskills = true;
    }

    public async Task UpdateCategorys()
    {
        _loadCategorys = false;
        StateHasChanged();
        var allRoots = _hardskillService.GetAllRoots();
        _allRoots = await allRoots;
        _loadCategorys = true;
        StateHasChanged();
    }

    public async Task UpdateHardskills()
    {
        _loadHardskills = false;
        StateHasChanged();
        var hardskills = _hardskillService.GetAllDesHardskills();
        _hardskills = await hardskills;
        var categorys = _hardskillService.GetAllDesCategorys();

        foreach (var category in await categorys)
        {
            var hardskillsOfCategory = _hardskillService.GetHardskillsOfCategory(category);
            _allCategorys.TryAdd(category, await hardskillsOfCategory);
        }
        _loadHardskills = true;
        StateHasChanged();
    }

    public void UpdateSoftskills()
    {
        _softskills = _basicDataService.GetAllSoftSkills();
        StateHasChanged();
    }
    
    public void UpdateFields()
    {
        _fields = _basicDataService.GetAllFields();
        StateHasChanged();
    }

    public void UpdateRoles()
    {
        _roles = _basicDataService.GetAllRoles();
        StateHasChanged();
    }

    private bool IsVisible(string description, int index)
    {
        return string.IsNullOrEmpty(Filter[index]) || description.Contains(Filter[index], StringComparison.OrdinalIgnoreCase);
    }
    
    private bool InCategory(string hardskill)
    {
        if (string.IsNullOrEmpty(Filter[5]))
        {
                return true;
        }
        
        foreach (var category in _allCategorys.Keys)
        {
            if (category.Contains(Filter[5], StringComparison.OrdinalIgnoreCase) && _allCategorys[category].Contains(hardskill))
            {
                return true;
            }
            
        }

        return false;
    }

    private void Showing(int index)
    {
        _show[index] = !_show[index];
    }

    private void ShowingEditCat(string cat)
    {
        _showEditCat[cat] = !_showEditCat[cat];
    }

    private void ShowingSubCat(string cat)
    {
        _showSubCat[cat] = !_showSubCat[cat];
    }
    
    
    void ShowingUpperCat(string hardskill)
    {
        _showUpper[hardskill] = !_showUpper[hardskill];
    }

    void PopCreateBasicData(BasicDataType type)
    {
        Type = type;
        _createBasicData.Showing();
    }

    void PopEditBasicData(string description, BasicDataType type)
    {
        Type = type;
        Description = description;
        _editBasicData.Showing();
    }

    void PopDelete(string description, BasicDataType type)
    {
        Type = type;
        Description = description;
        _deleteConfirmation.Showing();
    }

    void PopCreateHardskill()
    {
        _createHardskill.Showing();
    }

    async Task PopEditHardskill(string description)
    {
        var hardskill = _hardskillService.GetHardskill(description);
        Hardskill = await hardskill;
        _editHardskill.Showing();
    }

    void PopCreateHardskillCat()
    {
        _createCat.Showing();
    }

}
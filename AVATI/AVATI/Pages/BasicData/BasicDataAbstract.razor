@page "/BasicDataAbstract"
@using AVATI.Data

@inject IBasicDataService _basicDataService
@inject IHardskillService _hardskillService

<h1><b>Basisdaten</b> <small>Hier können Sie Basisdaten hinzugefügen, editieren und löschen</small></h1>
<hr />

<EditBasicData @ref="_editBasicData" OldDescription="@Description" Type="@Type" Abstract="@this"/>
<DeleteConfirmation @ref="_deleteConfirmation" Description="@Description" Type="@Type" Abstract="@this"/>
<CreateBasicData @ref="_createBasicData" Type="@Type" Abstract="@this"/>

<CreateHardskill @ref="_createHardskill" Abstract="@this"/>
<EditHardskill @ref="_editHardskill" OldHardskill="@Hardskill" Abstract="@this"/>

<AddHardskills @ref="_createCat" Description="" Abstract="@this"/>

<h3 class="cap"><b>Skills</b></h3>
<table class="table table-striped">
    <caption><h5><b>Softskills</b></h5></caption>
    <div class="form-group col-8">
        <input class="form-control" type="text" placeholder="Filter..."
               @bind="Filter[0]"
               @bind:event="oninput">
    </div>
    @if (_softskills.Any(x => IsVisible(x, 0)))
    {
        <tr>
            <th>Bezeichnung</th>
            <th></th>
            <th></th>
        </tr>
    
        foreach (string softskill in _softskills)
        {
            if (!IsVisible(softskill, 0))
                continue;
            <tr>
                <td>@softskill</td>
                <td class="smalltd"><button class="btn btn-secondary" @onclick="() => PopEditBasicData(softskill, BasicDataType.SoftSkill)">Editieren</button></td>
                <td class="smalltd"><button class="btn btn-danger" @onclick="() => PopDelete(softskill, BasicDataType.SoftSkill)">Löschen</button></td>
            </tr>
        }
    } else {
        <tr>
            <td style="color: #818181;">Kein Softskill gefunden</td>
        </tr>
    }
</table>
<div> <button class="btn btn-success" @onclick="() => PopCreateBasicData(BasicDataType.SoftSkill)">Hinzufügen</button> </div>

<table class="table table-striped">
    <caption><h5><b>Hardskills</b></h5></caption>
    <div class="form-group col-8">
        <input class="form-control" type="text" placeholder="Filter..."
               @bind="Filter[1]"
               @bind:event="oninput">
    </div>
    @if (_hardskills != null && _hardskills.Any(x => IsVisible(x, 1)))
    {
        <tr>
            <th>Bezeichnung</th>
            <th></th>
            <th></th>
        </tr>

        @foreach (string hardskill in _hardskills)
        {
            @if (!IsVisible(hardskill, 1))
                continue;

            if (!ShowUpper.ContainsKey(hardskill))
            {
                ShowUpper.Add(hardskill, false);
            }

            <tr @onmouseover="() => ShowingUpperCat(hardskill)" @onmouseout="() => ShowingUpperCat(hardskill)">
                <td>@hardskill</td>
                <td class="smalltd"><button class="btn btn-secondary" @onclick="() => PopEditHardskill(hardskill)">Editieren</button></td>
                <td class="smalltd">
                    <button class="btn btn-danger" @onclick="() => PopDelete(hardskill, BasicDataType.HardSkill)">Löschen</button>
                </td>
            </tr>
            
            if (ShowUpper[hardskill])
            {
                <div><ShowUpperCat Description="@hardskill"/></div>
            }
        }
    } else {
        <tr>
            <td style="color: #818181;">Kein Hardskill gefunden</td>
        </tr>
    }
</table>
<div> <button class="btn btn-success" @onclick="PopCreateHardskill">Hinzufügen</button> </div>

<table class="table table-striped">
    <caption><h5><b>Hardskillkategorien</b></h5></caption>
    <div class="form-group col-8">
        <input class="form-control" type="text" placeholder="Filter..."
               @bind="Filter[2]"
               @bind:event="oninput">
    </div>
    @if (_allRoots != null && _allRoots.Any(x => IsVisible(x, 2)))
    {
        <tr>
            <th>Bezeichnung</th>
            <th></th>
            <th></th>
        </tr>
        
        @foreach (var hardskillcat in _allRoots)
        {
            if (!IsVisible(hardskillcat, 2))
                continue;

            
                if (!ShowEditCat.ContainsKey(hardskillcat))
                {
                    ShowEditCat.Add(hardskillcat, false);
                }
                
                if (!ShowSubCat.ContainsKey(hardskillcat))
                {
                    ShowSubCat.Add(hardskillcat, false);
                }

                <tr>
                    <td>@hardskillcat</td>
                    <td class="smalltd">
                        @if (!ShowEditCat[hardskillcat])
                        {
                            if (!ShowSubCat[hardskillcat])
                            {
                                <button class="btn btn-success" @onclick="() => ShowingSubCat(hardskillcat)" type="button">View</button>
                            }
                            else
                            {
                                <button class="btn btn-outline-success" @onclick="() => ShowingSubCat(hardskillcat)" type="button">Stop View</button>
                            }
                        }
                    </td>
                    <td class="smalltd">
                        @if (ShowEditCat[hardskillcat])
                        {
                            <button class="btn btn-primary" @onclick="() => ShowingEditCat(hardskillcat)">Abgeschlossen</button>
                        }
                        else
                        {
                            <button class="btn btn-secondary" @onclick="() => ShowingEditCat(hardskillcat)">Editieren</button>
                        }
                    </td>
                </tr>

                if (ShowEditCat[hardskillcat])
                {
                    <div>
                        <EditTreeDiagram Description="@hardskillcat" Abstract="@this"/>
                    </div>
                }
                else if (ShowSubCat[hardskillcat])
                {
                    <div>
                        <TreeDiagram Description="@hardskillcat"/>
                    </div>
                }
        }
    } else {
        <tr>
            <td style="color: #818181;">Keine Hardskillkategorie gefunden</td>
        </tr>
    }
</table>
<div> <button class="btn btn-success" @onclick="PopCreateHardskillCat">Hinzufügen</button> </div>


<h3 class="cap"><b>Branchen</b><a></a></h3>
<div class="form-group col-6">
        <input class="form-control" type="text" placeholder="Filter..."
               @bind="Filter[3]"
               @bind:event="oninput">
</div>
<table class="table">
    @if (_fields.Any(x => IsVisible(x, 3)))
    {
        <tr>
            <th>Bezeichnung</th>
            <th></th>
            <th></th>
        </tr>
        @foreach (var field in _fields)
        {

            @if (!IsVisible(field, 3))
                continue;

            <tr>
                <td>@field</td>
                <td class="smalltd"><button class="btn btn-secondary" @onclick="() => PopEditBasicData(field, BasicDataType.Field)">Editieren</button></td>
                <td class="smalltd"><button class="btn btn-danger" @onclick="() => PopDelete(field, BasicDataType.Field)">Löschen</button></td>
            </tr>
        }
    } else {
        <tr>
            <td style="color: #818181;">Keine Branche gefunden</td>
        </tr>
    }
</table>
<div> <button class="btn btn-success" @onclick="() => PopCreateBasicData(BasicDataType.Field)">Hinzufügen</button> </div>



<h3 class="cap"><b>Rollen</b></h3>
<div class="form-group col-6">
        <input class="form-control" type="text" placeholder="Filter..."
               @bind="Filter[4]"
               @bind:event="oninput">
</div>
<table class="table">
    @if (_roles.Any(x => IsVisible(x, 4)))
    {
        <tr>
            <th>Bezeichnung</th>
            <th></th>
            <th></th>
        </tr>
        @foreach (var role in _roles)
        {

            @if (!IsVisible(role, 4))
                continue;

            <tr>
                <td>@role</td>
                <td class="smalltd"><button class="btn btn-secondary" @onclick="() => PopEditBasicData(role, BasicDataType.Role)">Editieren</button></td>
                <td class="smalltd"><button class="btn btn-danger" @onclick="() => PopDelete(role, BasicDataType.Role)">Löschen</button></td>
            </tr>
        }
    } else {
        <tr>
            <td style="color: #818181;">Keine Rolle gefunden</td>
        </tr>
    }
</table>
<div> <button class="btn btn-success" @onclick="() => PopCreateBasicData(BasicDataType.Role)">Hinzufügen</button> </div>


@code {
    List<string> _softskills;
    List<string> _fields;
    List<string> _roles;
    List<string> _hardskills;
    List<string> _allRoots;
        
    CreateBasicData _createBasicData;
    EditBasicData _editBasicData;
    DeleteConfirmation _deleteConfirmation;

    CreateHardskill _createHardskill;
    EditHardskill _editHardskill;

    AddHardskills _createCat;

    //0: Filter for Softskill, 1: Filter for Hardskill, 2: Filter for Hardskillcategory
    //3: Filter for Field, 4: Filter for Role
    private string[] Filter { get; set; } = new string[5];

    public Dictionary<string, bool> ShowEditCat = new();

    public Dictionary<string, bool> ShowSubCat = new();

    public Dictionary<string, bool> ShowUpper = new();

    private string Description { get; set; }
    
    private Hardskill Hardskill { get; set; }

    private BasicDataType Type { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _softskills = _basicDataService.GetAllSoftSkills();
        _fields = _basicDataService.GetAllFields();
        _roles = _basicDataService.GetAllRoles();
        _hardskills = await _hardskillService.GetAllDesHardskills();
        _allRoots = await _hardskillService.GetAllRoots();
    }

    public async Task UpdateCategorys()
    {
        _allRoots = await _hardskillService.GetAllRoots();
        StateHasChanged();
    }

    public async Task UpdateHardskills()
    {
        _hardskills = await _hardskillService.GetAllDesHardskills();
        StateHasChanged();
    }

    public void UpdateSoftskills()
    {
        _softskills = _basicDataService.GetAllSoftSkills();
        StateHasChanged();
    }
    
    public void UpdateFields()
    {
        _fields = _basicDataService.GetAllFields();
        StateHasChanged();
    }

    public void UpdateRoles()
    {
        _roles = _basicDataService.GetAllRoles();
        StateHasChanged();
    }

    private bool IsVisible(string description, int index)
    {
        return string.IsNullOrEmpty(Filter[index]) || description.Contains(Filter[index], StringComparison.OrdinalIgnoreCase);
    }

    private void ShowingEditCat(string cat)
    {
        ShowEditCat[cat] = !ShowEditCat[cat];
    }

    private void ShowingSubCat(string cat)
    {
        ShowSubCat[cat] = !ShowSubCat[cat];
    }
    
    
    void ShowingUpperCat(string hardskill)
    {
        ShowUpper[hardskill] = !ShowUpper[hardskill];
    }

    void PopCreateBasicData(BasicDataType type)
    {
        Type = type;
        _createBasicData.Showing();
    }

    void PopEditBasicData(string description, BasicDataType type)
    {
        Type = type;
        Description = description;
        _editBasicData.Showing();
    }

    void PopDelete(string description, BasicDataType type)
    {
        Type = type;
        Description = description;
        _deleteConfirmation.Showing();
    }

    void PopCreateHardskill()
    {
        _createHardskill.Showing();
    }

    async Task PopEditHardskill(string description)
    {
        Hardskill = await _hardskillService.GetHardskill(description);
        _editHardskill.Showing();
    }

    void PopCreateHardskillCat()
    {
        _createCat.Showing();
    }

}
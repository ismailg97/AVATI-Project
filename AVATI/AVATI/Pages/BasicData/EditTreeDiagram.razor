@using AVATI.Data

@inject IHardskillService _hardskillService

<AddHardskills @ref="_addHardskills" Description="@Description"/>

    <div class="container">
        <ul class="tree">
            <li>
                @if(!_showRename)
                {
                    <ContextMenu Id="@Description">
                        <Item OnClick="() => DeleteCategory()">Löschen <span class="oi oi-trash"></span></Item>
                                                     
                        <Item OnClick="() => ShowingRename()">Umbenennen <span class="oi oi-pencil"></span></Item>
                                         
                        <Item OnClick="() => ShowingAddHardskills()">Hardskills hinzufügen <span class="oi oi-plus"></span></Item>
                                                     
                    </ContextMenu>
                    
                    <ContextMenuTrigger MenuId="@Description">
                        <a class="cat" type="button" @onclick="() => ShowingUnder()">@Description</a>
                    </ContextMenuTrigger>
                    } else {
                            <input type="text" id="softskill" @bind="_rename"/>
                            <button type="button" class="check inline" @onclick="() => Update()">&#10003;</button>
                            <button type="button" class="stop inline" @onclick="() => ShowingRename()">&#10005;</button>
                    }
                
                    @if (_loadfinished)
                    {
                        <EditTreeElement @ref="@_element" Subcats="@_subcat" Uppercat="@Description" 
                                         ShowHardskills="@_showSubHardskills" ShowCategorys="@_showSubCategorys" UpperTree="@this"/>
                    }
                    else
                    {
                        <div class="d-flex flex-column align-items-center justify-content-center">
                            <div class="row">
                                <div class="spinner-border" role="status">
                                    <span class="sr-only">Loading...</span>
                                </div>
                            </div>
                            <div class="row">
                                <strong>Lade...</strong>
                            </div>
                        </div>
                    }
            </li>
        </ul>
    </div>


@code {
    [Parameter]
    public BasicDataAbstract Abstract { get; set; }
    
    [Parameter]
    public string Description { get; set; }

    private List<string> _subcat = new();

    private EditTreeElement _element;
    
    AddHardskills _addHardskills;

    private bool _showRename;

    private bool _containsHardskills;

    private string _rename;

    private bool _showSubHardskills;

    private bool _showSubCategorys;

    private bool _loadfinished = true;

    protected override async Task OnParametersSetAsync()
    {
        _rename = Description;
        _showSubCategorys = true;
        _showSubHardskills = false;
        var category = await _hardskillService.GetHardskillCategory(Description);
        _subcat = category.Subcat;
        _showRename = false;
        _containsHardskills = await _hardskillService.ContainsJustHardskills(Description);
    }

    private async Task DeleteCategory()
    {
        await _hardskillService.DeleteHardskillCategory(Description);
        await Abstract.UpdateCategorys();
        await Abstract.UpdateHardskills();
    }

    private async Task Update()
    {
        await _hardskillService.UpdateHardskillCategory(Description, _rename);
        await Abstract.UpdateCategorys();
        await Abstract.UpdateHardskills();
        ShowingRename();
    }

    private void ShowingRename()
    {
        _showRename = !_showRename;
    }

    private void ShowingAddHardskills()
    {
        _addHardskills.Showing();
    }

    public void ShowingUnder()
    {
        if (_containsHardskills)
        {
            _showSubCategorys = true;
            _showSubHardskills = !_showSubHardskills;
            StateHasChanged();
            return;
        }
        
        if (!_showSubCategorys)
        {
            _showSubCategorys = true;
            _showSubHardskills = false;
            StateHasChanged();
            return;
        }

        if (_showSubCategorys && _showSubHardskills)
        {
            _showSubCategorys = false;
            _showSubHardskills = false;
            StateHasChanged();
            return;
        }

        _showSubCategorys = true;
        _showSubHardskills = true;
        StateHasChanged();
    }

    private void ShowingSubHardskills()
    {
        _showSubHardskills = !_showSubHardskills;
        StateHasChanged();
    }
    
    public async Task Loading()
    {
        _loadfinished = false;
        StateHasChanged();
        _subcat = (await _hardskillService.GetHardskillCategory(Description))?.Subcat;
        _containsHardskills = await _hardskillService.ContainsJustHardskills(Description);
        _loadfinished = true;
        StateHasChanged();
    }
}


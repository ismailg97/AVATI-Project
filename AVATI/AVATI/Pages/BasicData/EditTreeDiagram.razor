@using AVATI.Data

@inject IHardskillService _hardskillService

<AddHardskills @ref="_addHardskills" Description="@Description" TreeDiagram="@this" Abstract="@Abstract"/>

@if (_loadPagefinished)
{
    <div class="container">
        <ul class="tree">
            <li>
                @if (!_showRename)
                {
                    <ContextMenu Id="@Description">
                        <Item OnClick="() => DeleteCategory()"><span class="oi oi-trash"></span> Löschen</Item>

                        <Item OnClick="() => ShowingRename()"><span class="oi oi-pencil"></span> Umbenennen</Item>

                        <Item OnClick="() => ShowingAddHardskills()"><span class="oi oi-plus"></span> Hardskills hinzufügen</Item>

                    </ContextMenu>

                    <ContextMenuTrigger MenuId="@Description">
                        <a class="cat" type="button" @onclick="() => ShowingUnder()">@Description</a>
                        <MudIcon Icon="@Icons.Filled.InfoOutline" Style="color: #5a6066; display: inline;" @onclick="() => { _openExplain = !_openExplain;}"/>
                                  <a style="position: relative; border: none !important;">
                                      <MudPopover Open="@_openExplain" Class="px-4 pt-4" Direction="Direction.Top" Style="width: 400px; height: auto;">
                                          <MudText Style="font-size: 14px;"> Wenn Sie hier einen Rechtsklick auf einer 
                                              <a style="background-color: #7a212e; color: white; border: none !important;">Kategorie</a> bzw. auf einem 
                                              <a style="background-color: #c2364b; color: white; border: none !important;">Hardskill</a> 
                                              betätigen, so öffnet sich ein Menü
                                          </MudText>
                                                  <MudButton Style="font-size: 14px;" OnClick="() => { _openExplain = false;}" Class="ml-auto mr-n3 mb-1" Color="MudBlazor.Color.Error">Close</MudButton>
                                          </MudPopover>
                                  </a>
                    </ContextMenuTrigger>
                }
                else
                {
                    <input class="form-control col-4 inline" type="text" id="softskill" @bind="_rename"/>
                    <button type="button" class="check inline" @onclick="() => Update()">&#10003;</button>
                    <button type="button" class="stop inline" @onclick="() => ShowingRename()">&#10005;</button>
                    <a style="position: relative; border: none !important;">
                        <MudPopover Open="@_showError" Class="alert alert-danger text-center" Style="width: 380px; height: auto; color: darkred; font-weight: 650; font-size: 14px; background-color: #f8d7da">
                            @if (_whatToShow == 0)
                            {
                                <a style="border: none !important;">Umbennen misslungen, die Bezeichnung existiert bereits!</a>
                            } 
                            else if (_whatToShow == 1)
                            {
                                <a style="border: none !important;">Umbennen misslungen, die Bezeichnung fehlt!</a>
                            } 
                            else if (_whatToShow == 2)
                            {
                                <a style="border: none !important;">Umbennen misslungen, die Bezeichnung ist zu lang (max. 150 Zeichen)!</a>
                            }
                        </MudPopover>
                    </a>
                }

                @if (Loadfinished)
                {
                    <EditTreeElement @ref="@_element" Subcats="@_subcat" Uppercat="@Description" Abstract="@Abstract"
                                     ShowHardskills="@_showSubHardskills" ShowCategorys="@_showSubCategorys" UpperTree="@this"
                                     ContainsJustHardskills="@_containsJustHardskills" RenameProblem="@_showRename"/>
                }
                else
                {
                    <div class="d-flex flex-column align-items-start justify-content-start">
                        <div class="row">
                            <div class="spinner-border" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                        <div class="row">
                            <strong>Lade...</strong>
                        </div>
                    </div>
                }
            </li>
        </ul>
    </div>
}
else
{
    <div class="d-flex flex-column align-items-start justify-content-start">
        <div class="row">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div class="row">
            <strong>Lade...</strong>
        </div>
    </div>
}

@code {
    [Parameter]
    public BasicDataAbstract Abstract { get; set; }
    
    [Parameter]
    public string Description { get; set; }

    private List<string> _subcat = new();

    private EditTreeElement _element;
    
    AddHardskills _addHardskills;

    private bool _showRename;

    private bool _containsJustHardskills;

    private bool _containsJustCategorys;

    private string _rename;

    private bool _showSubHardskills;

    private bool _showSubCategorys;

    public bool Loadfinished { get; set; }

    private bool _loadPagefinished;

    private int _whatToShow;

    private bool _showError;
    private bool _openExplain;

    protected override void OnInitialized()
    {
        _whatToShow = -1;
        _showError = false;
        Loadfinished = true;
        _loadPagefinished = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        _rename = Description;
        _showSubCategorys = true;
        _showSubHardskills = false;
        var taskCategory =  _hardskillService.GetHardskillCategory(Description);
        _subcat = (await taskCategory).Subcat;
        _showRename = false;
        var taskJustH = _hardskillService.ContainsJustHardskills(Description);
        _containsJustHardskills = await taskJustH;
        var taskJustC = _hardskillService.ContainsAnyHardskills(Description);
        _containsJustCategorys = !await taskJustC;
        _loadPagefinished = true;
    }

    private async Task DeleteCategory()
    {
        await _hardskillService.DeleteHardskillCategory(Description);
        await Abstract.UpdateCategorys();
        await Abstract.UpdateHardskills();
    }
    
    private async void ShowErrorMessage(int whatToShow)
    {
        _whatToShow = whatToShow;
        _showError = true;
        StateHasChanged();
        await Task.Delay(3000);
        _showError = false;
        StateHasChanged();
    }

    private async Task Update()
    {
        if (!_hardskillService.CheckEmptyHardskill(_rename))
        {
            ShowErrorMessage(1);
            return;
        }

        if (!await _hardskillService.CheckExistHardskill(_rename) && _rename != Description)
        {
            ShowErrorMessage(0);
            return;
        }
        
        if (!_hardskillService.CheckLengthHardskill(_rename))
        {
            ShowErrorMessage(2);
            return;
        }

        _loadPagefinished = false;
        StateHasChanged();
        await _hardskillService.RenameHardskillCategory(Description, _rename);
        await Abstract.UpdateCategorys();
        await Abstract.UpdateHardskills();
        _loadPagefinished = true;
        StateHasChanged();
        ShowingRename();
    }

    private void ShowingRename()
    {
        _showRename = !_showRename;
        StateHasChanged();
    }

    private void ShowingAddHardskills()
    {
        _addHardskills.Showing();
    }

    public void ShowingUnder()
    {
        if (_containsJustHardskills)
        {
            _showSubCategorys = true;
            _showSubHardskills = !_showSubHardskills;
            
        } else if (_containsJustCategorys) {
            
            _showSubCategorys = !_showSubCategorys;
            _showSubHardskills = false;
            
        } else if (!_showSubCategorys) {
            
            _showSubCategorys = true;
            _showSubHardskills = false;
            
        } else if (_showSubCategorys && _showSubHardskills) {
            
            _showSubCategorys = false;
            _showSubHardskills = false;
            
        } else {
            
            _showSubCategorys = true;
            _showSubHardskills = true;
        }
        
        StateHasChanged();
    }

    private void ShowingSubHardskills()
    {
        _showSubHardskills = !_showSubHardskills;
        StateHasChanged();
    }
    
    public async Task Loading()
    {
        var taskCategory = _hardskillService.GetHardskillCategory(Description);
        _subcat = (await taskCategory)?.Subcat;
        var taskJustH = _hardskillService.ContainsJustHardskills(Description);
        _containsJustHardskills = await taskJustH;
        var taskJustC = _hardskillService.ContainsAnyHardskills(Description);
        _containsJustCategorys = !await taskJustC;
        StateHasChanged();
    }
}


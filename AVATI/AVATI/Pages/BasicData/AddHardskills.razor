@using AVATI.Data
@using System.Security.Cryptography

@inject IHardskillService _hardskillService

<div class="modal @(_show ? "fade show" : "" )" id="myModal" style=" display: @(_show ? "block" : "none");">
  <div class="modal-dialog">
    <div class="modal-content">
      @if (_finishedLoadPage)
      {
        <div class="modal-header">
          @if (ShowCreateCat)
          {
            <h5 class="modal-title">
              Erstellen einer neuen Kategorie
            </h5>
          }
          else
          {
            <h5 class="modal-title">
              Kategorisierung von Hardskills in "<b>@Description</b>"
            </h5>
          }
          <button type="button" class="close" data-dismiss="modal" @onclick="Showing">&times;</button>
        </div>
        <div class="modal-body">
          <div class="container">
            @if (_showExistErrorCategory)
            {
              <div class="errormessage">
                <a><b>Es existiert bereits ein Hardskill oder eine Hardskillkategorie mit derselben Bezeichnung</b></a>
              </div>

            }
            else if (_showEmptyErrorCategory)
            {
              <div class="errormessage">
                <a><b>Die Bezeichnung ist erforderlich</b></a>
              </div>

            }
            else if (_showTooLongErrorCategory)
            {
              <div class="errormessage">
                <a><b>Die Bezeichnung ist zu lang (max. 150 Zeichen)</b></a>
              </div>
            }

            @if (ShowCreateCat)
            {
              <div class="form-group">
                <label>Bezeichnung der Kategorie:</label>
                <input class="form-control" type="text" @bind="_cat"/>
              </div>
            }

            @if (Subcat.Any())
            {
              <h6>Enthaltene Hardskills</h6>
              <hr/>

              foreach (var hardskill in Subcat)
              {
                <button type="button" class="@(IsInList(hardskill) ? "btn btn-primary btn-sm" : "btn btn-secondary btn-sm")" @onclick="() => HardskillList(hardskill)">
                  <a><a class="@(IsInList(hardskill) ? "showRemove" : "")">@hardskill</a> <a class="remove"><span class="oi oi-x"></span></a></a>
                </button>
              }
            }

            @if (_toDeleteSkills != null && _toDeleteSkills.Any())
            {
              <h6>Zu entferndende Hardskills</h6>
              <hr/>
              foreach (var hardskill in _toDeleteSkills)
              {
                <button type="button" class="@(IsInList(hardskill) ? "btn btn-primary btn-sm" : "btn btn-secondary btn-sm")" @onclick="() => HardskillList(hardskill)">
                  <a><a class="@(IsInList(hardskill) ? "showRemove" : "")">@hardskill</a> <a class="remove"><span class="oi oi-x"></span></a></a>
                </button>
              }
            }

            @if (_hardskills != null && _hardskills.Any())
            {
              <h6>Hardskills ohne Hardskillkategorie</h6>
              <hr/>
              foreach (var hardskill in _hardskills)
              {
                <button type="button" class="@(IsInList(hardskill) ? "btn btn-primary btn-sm" : "btn btn-secondary btn-sm")" @onclick="() => HardskillList(hardskill)">
                  <a><a class="@(IsInList(hardskill) ? "showRemove" : "")">@hardskill</a> <a class="remove"><span class="oi oi-x"></span></a></a>
                </button>
              }
            }

            @if (_showCreateSkill)
            {
              @if (_showExistErrorHardskill)
              {
                <div class="errormessage">
                  <a><b>Es existiert bereits ein Hardskill oder eine Hardskillkategorie mit derselben Bezeichnung</b></a>
                </div>

              }
              else if (_showEmptyErrorHardskill)
              {
                <div class="errormessage">
                  <a><b>Die Bezeichnung ist erforderlich</b></a>
                </div>
              }
              else if (_showTooLongErrorHardskill)
              {
                <div class="errormessage">
                  <a><b>Die Bezeichnung ist zu lang (max. 150 Zeichen)</b></a>
                </div>
              }

              <div class="distance">
                <label>Bezeichnung des Hardskills:</label>
                <input class="form-control" style="display: inline;" type="text" @bind="_hardskill"/>
                <button class="check" style="display: inline;" @onclick="CreateHardskill">&#10003;</button>
                <button class="stop" style="display: inline;" @onclick="ShowingCreateHardskill">&#10005;</button>
              </div>
            }
            else
            {
              <div>
                <button class="btn btn-outline-success" @onclick="ShowingCreateHardskill">Hardskill erstellen</button>
              </div>
            }

            <div>
              <button class="btn btn-outline-info" @onclick="ShowingCat">Hardskills mit Kategorien @(_showCat ? "ausblenden" : "einblenden")</button>
            </div>
            @if (_finishedLoadCats)
            {
              if (_showCat && SubHardskills.Any())
              {
                <div class="list-group border-dark overflow-auto mr-3 col-9" style="height: 200px">
                  @foreach (var hardskillcat in SubHardskills.Keys.Where(x => x != Description))
                  {
                    <div class="container">
                      <h6>@hardskillcat</h6>
                      <hr/>
                      @foreach (var description in SubHardskills[hardskillcat])
                      {
                        <button type="button" class="@(IsInList(description) ? "btn btn-primary btn-sm" : "btn btn-secondary btn-sm")" @onclick="() => HardskillList(description)">
                          <a><a class="@(IsInList(description) ? "showRemove" : "")">@description</a> <a class="remove"><span class="oi oi-x"></span></a></a>
                        </button>
                      }
                    </div>
                  }
                </div>
              }
            }
            else
            {
              <div class="d-flex flex-column align-items-center justify-content-center" style="margin-top: 15px;">
                <div class="row">
                  <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                  </div>
                </div>
                <div class="row">
                  <strong>Lade...</strong>
                </div>
              </div>
            }

          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="Showing">
            <span class="oi oi-circle-x" aria-hidden="true"></span> Abbrechen
          </button>
          <button type="button" class="btn btn-success" @onclick="AddingHardskills">
            <span class="oi oi-document" aria-hidden="true"></span> Speichern
          </button>
        </div>
      }
      else
      {
        <div class="d-flex flex-column align-items-center justify-content-center">
          <div class="row">
            <div class="spinner-border" role="status">
              <span class="sr-only">Loading...</span>
            </div>
          </div>
          <div class="row">
            <strong>Lade...</strong>
          </div>
        </div>
      }
    </div>
  </div>
          </div>
@if (_show)
{
  <div class="modal-backdrop fade show"></div>
}

@code {
  [Parameter] 
  public EditTreeElement TreeElement { get; set; }
  
  [Parameter]
  public EditTreeDiagram TreeDiagram { get; set; }
  
  [Parameter] 
  public BasicDataAbstract Abstract { get; set; }
  
  [Parameter]
  public string Description { get; set; }

  private List<string> Subcat { get; set; } = new();
  
  private Dictionary<string, List<string>> SubHardskills { get; set; } = new ();
  
  private Hardskill Uppercat { get; set; }
  
  private bool _finishedLoadPage;

  private bool _finishedLoadCats = true;

  private string _hardskill;

  private string _cat;
  
  private bool _show;

  private bool _showCat;

  private bool _showCreateSkill;

  private bool ShowCreateCat { get; set; }

  private List<string> _toDeleteSkills = new();

  private List<string> _hardskills = new();
  
  private bool _showEmptyErrorCategory;

  private bool _showExistErrorCategory;
  
  private bool _showTooLongErrorCategory;
  
  private bool _showEmptyErrorHardskill;

  private bool _showExistErrorHardskill;

  private bool _showTooLongErrorHardskill;

  protected override void OnInitialized()
  {
    _show = false;
  }

  protected override async Task OnParametersSetAsync()
  {
    _finishedLoadPage = false;
    _finishedLoadCats = true;
    _showCat = false;
    _showCreateSkill = false;
    ShowCreateCat = false;
    _showEmptyErrorCategory = false;
    _showExistErrorCategory = false;
    _showTooLongErrorCategory = false;
    _showEmptyErrorHardskill = false;
    _showExistErrorHardskill = false;
    _showTooLongErrorHardskill = false;
    _cat = "";
    _toDeleteSkills.Clear();
    _hardskills.Clear();
    Subcat.Clear();
    SubHardskills.Clear();
    
    var allSkills = await _hardskillService.GetAllHardskills();

    foreach (var hardskill in allSkills.ToList().Where(x => x.Uppercat == null || !x.Uppercat.Any()))
    {
      if (!_hardskills.Contains(hardskill.Description))
        _hardskills.Add(hardskill.Description);
    }
    
     var hardskillCats = await _hardskillService.GetAllDesCategorys();
    
    if (hardskillCats == null) return;
    ShowCreateCat = !hardskillCats.Exists(x => x == Description);
    Uppercat = await _hardskillService.GetHardskillCategory(Description);
    
    if (Uppercat != null)
    {
      foreach(var description in Uppercat.Subcat)
      {
        var hardskill = await _hardskillService.GetHardskill(description);
        if (hardskill != null && !Subcat.Contains(description))
        {
          Subcat.Add(description);
        }
      }
    }
    _finishedLoadPage = true;
  }

  private async Task ShowingCat()
  {
    if (!SubHardskills.Any())
    {
      _finishedLoadCats = false;
      StateHasChanged();
      var hardskillCats = await _hardskillService.GetAllDesCategorys();
      foreach (var cat in hardskillCats.ToList())
      {
        if (!await _hardskillService.ContainsAnyHardskills(cat)) continue;
        var category = await _hardskillService.GetHardskillCategory(cat);
        if (category == null) continue;
      
        var subCats = new List<string>();

        foreach (var subcat in category.Subcat)
        {
          var hardskill = await _hardskillService.GetHardskill(subcat);
          if (hardskill != null && !subCats.Contains(subcat))
            subCats.Add(subcat);
        }

        SubHardskills.TryAdd(cat, new List<string>(subCats));
      }
      _showCat = !_showCat;
      _finishedLoadCats = true;
      StateHasChanged();
    }
    else
      _showCat = !_showCat;
  }

  private void ShowingCreateHardskill()
  {
    _showCreateSkill = !_showCreateSkill;
  }

  private async Task HardskillList(string description)
  {
    var hardskill = await _hardskillService.GetHardskill(description);
    if (hardskill == null) return;
    var upperCat = hardskill.Uppercat;

    if (Subcat.Contains(description))
    {
      Subcat.Remove(description);
      if (upperCat == null || !upperCat.Any())
      {
        if(!_hardskills.Contains(description))
          _hardskills.Add(description);
        
      } else if(upperCat.Contains(Description) && !_toDeleteSkills.Contains(description))
        _toDeleteSkills.Add(description);
    }
    else
    {
      Subcat.Add(description);
      if (upperCat == null || !upperCat.Any())
        _hardskills.Remove(description);
      else if(upperCat.Contains(Description))
        _toDeleteSkills.Remove(description);
    }
  }
  
  private bool IsInList(string description)
  {
    return Subcat.Exists(x => x == description);
  }

  private async Task AddingHardskills()
  {
    if (ShowCreateCat)
    {
      if (!_hardskillService.CheckEmptyHardskill(_cat))
      {
        _showEmptyErrorCategory = true;
        _showExistErrorCategory = false;
        _showTooLongErrorCategory = false;
        StateHasChanged();
        return;
      }
      _showEmptyErrorCategory = false;

      if (!await _hardskillService.CheckExistHardskill(_cat))
      {
        _showExistErrorCategory = true;
        _showTooLongErrorCategory = false;
        StateHasChanged();
        return;
      }
      _showExistErrorCategory = false;

      if (!_hardskillService.CheckLengthHardskill(_cat))
      {
        _showTooLongErrorCategory = true;
        StateHasChanged();
        return;
      }
      _showTooLongErrorCategory = false;

      var cat = new Hardskill()
      {
          Description = _cat,
          Uppercat = null,
          Subcat = new List<string>(Subcat),
          IsHardskill = false
      };
      await _hardskillService.CreateHardskillCategory(cat);
      _show = !_show;
      Subcat.Clear();
      await Abstract.UpdateHardskills();
      await Abstract.UpdateCategorys();
    }
    else
    {
      if (TreeDiagram != null)
        TreeDiagram.Loadfinished = false;
      else
        TreeElement.LoadSubfinished[Description] = false;
      
      await _hardskillService.EditHardskillsCategory(Description, Subcat);
      _show = !_show;
      if(Abstract != null)
        await Abstract.UpdateHardskills();
      Subcat.Clear();
      if (TreeDiagram != null)
      {
        await TreeDiagram.Loading();
        TreeDiagram.Loadfinished = true;
      }
      else
      {
        await TreeElement.Loading(Description);
        TreeElement.LoadSubfinished[Description] = true;
      }
    }
  }

  private async Task CreateHardskill()
  {
    if (!_hardskillService.CheckEmptyHardskill(_hardskill))
    {
      _showEmptyErrorHardskill = true;
      _showExistErrorHardskill = false;
      _showTooLongErrorHardskill = false;
      StateHasChanged();
      return;
    }
    _showEmptyErrorHardskill = false;

    if (!await _hardskillService.CheckExistHardskill(_hardskill))
    {
      _showExistErrorHardskill = true;
      _showTooLongErrorHardskill = false;
      StateHasChanged();
      return;
    }
    _showExistErrorHardskill = false;

    if (!_hardskillService.CheckLengthHardskill(_hardskill))
    {
      _showTooLongErrorHardskill = true;
      StateHasChanged();
      return;
    }
    _showTooLongErrorHardskill = false;

    var hardskill = new Hardskill()
    {
      Description = _hardskill,
      Uppercat = null,
      Subcat = null
    };
    await _hardskillService.CreateHardskill(hardskill);
    await HardskillList(hardskill.Description);
    ShowingCreateHardskill();
  }

  public void Showing()
  {
    _show = !_show;
    Subcat.Clear();
    StateHasChanged();
  }

}
@using AVATI.Data
@using DocumentFormat.OpenXml.Wordprocessing
@using System.Security.Cryptography

@inject IHardskillService _hardskillService
@inject NavigationManager _navigationManager

<div class="modal @(_show ? "fade show" : "" )" id="myModal" style=" display: @(_show ? "block" : "none");">
               <div class="modal-dialog">
                 <div class="modal-content">
                   <div class="modal-header">
                     @if (ShowCreateCat)
                     {
                       <h5 class="modal-title">
                         Erstellen einer neuen Kategorie
                       </h5>
                     } else {
                       <h5 class="modal-title">
                         Kategorisierung von Hardskills in "<b>@Description</b>"
                       </h5>
                     }
                     <button type="button" class="close" data-dismiss="modal" @onclick="Showing">&times;</button>
                   </div>
                   <div class="modal-body">
                     <div class="container">
                       
                       @if (ShowCreateCat)
                       {
                         <div class="form-group">
                           <label>Bezeichnung der Kategorie:</label>
                           <input class="form-control" type="text" @bind="_cat"/>
                         </div>
                       }

                       @if (_containsH)
                       {
                         <h6>Bereits enthaltene Hardskills</h6>
                         <hr/>

                         foreach (var hardskill in Uppercat.Subcat)
                            {
                              <button type="button" class="@(IsInList(hardskill) ? "btn btn-primary btn-sm" : "btn btn-secondary btn-sm")" @onclick="() => HardskillList(hardskill)">
                                      <a><a class="@(IsInList(hardskill) ? "showRemove" : "")">@hardskill</a> <a class="remove"><span class="oi oi-x"></span></a></a>
                              </button>
                            }
                       }


                       @if (_hardskills != null && _hardskills.Any(x => x.Uppercat == null))
                       {
                         <h6>Hardskills ohne Hardskillkategorie</h6>
                         <hr/>
                         foreach (var hardskill in _hardskills)
                         {
                           if (hardskill.Uppercat == null)
                           {
                             <button type="button" class="@(IsInList(hardskill.Description) ? "btn btn-primary btn-sm" : "btn btn-secondary btn-sm")" @onclick="() => HardskillList(hardskill.Description)">
                               <a><a class="@(IsInList(hardskill.Description) ? "showRemove" : "")">@hardskill.Description</a> <a class="remove"><span class="oi oi-x"></span></a></a>
                             </button>
                           }
                         }
                       }

                       @if (_showCreateSkill)
                       {
                         <div class="distance">
                           <label>Bezeichnung des Hardskills:</label>
                           <input class="form-control" style="display: inline;" type="text" @bind="_hardskill"/>
                           <button class="check" style="display: inline;" @onclick="CreateHardskill">&#10003;</button>
                           <button class="stop" style="display: inline;" @onclick="ShowingCreateHardskill">&#10005;</button>
                         </div>
                       }
                       else
                       {
                         <div>
                           <button class="btn btn-outline-success" @onclick="ShowingCreateHardskill">Create New Hardskill</button>
                         </div>
                       }

                       <div>
                         <button class="btn btn-outline-info" @onclick="ShowingCat">Hardskills mit Kategorien @(_showCat ? "ausblenden" : "einblenden")</button>
                       </div>
                       @if (_showCat)
                       {
                         <div class="list-group border-dark overflow-auto mr-3 col-9" style="height: 200px">
                              @foreach (var hardskillcat in SubHardskills.Keys.Where(x => x.Description != Description))
                              {
                                <div class="container">
                                  <h6>@hardskillcat.Description</h6>
                                  <hr/>
                                  @foreach (var description in SubHardskills[hardskillcat])
                                  {
                                    <button type="button" class="@(IsInList(description) ? "btn btn-primary btn-sm" : "btn btn-secondary btn-sm")" @onclick="() => HardskillList(description)">
                                      <a><a class="@(IsInList(description) ? "showRemove" : "")">@description</a> <a class="remove"><span class="oi oi-x"></span></a></a>
                                    </button>
                                  }
                                </div>
                              }
                         </div>
                       }

                     </div>
                   </div>
                   <div class="modal-footer">
                     <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="Showing">Abbrechen</button>
                     <button type="button" class="btn btn-success" @onclick="AddingHardskills">Speichern</button>
                   </div>
                 </div>
               </div>
          </div>
@if (_show)
{
  <div class="modal-backdrop fade show"></div>
}

@code {
  [Parameter] public BasicDataAbstract Abstract { get; set; }
  
  [Parameter]
  public string Description { get; set; }

  private List<string> Subcat { get; set; } = new();
  
  private Dictionary<Hardskill, List<string>> SubHardskills { get; set; } = new ();
  
  private Hardskill Uppercat { get; set; }

  private bool _containsH;

  private string _hardskill;

  private string _cat;
  
  private bool _show = false;

  private bool _showCat = false;

  private bool _showCreateSkill = false;

  private bool ShowCreateCat { get; set; } = false;

  private List<Hardskill> _hardskills;

  private List<Hardskill> _hardskillCats;
  
  protected override async Task OnInitializedAsync()
  {
    _hardskills = await _hardskillService.GetAllHardskills();
    _hardskillCats = await _hardskillService.GetAllHardskillCategorys();
  }

  protected override async Task OnParametersSetAsync()
  {
    if (_hardskillCats == null) return;
    ShowCreateCat = !_hardskillCats.Exists(x => x.Description == Description);
    Uppercat = await _hardskillService.GetHardskillCategory(Description);

    if (Uppercat == null) 
      _containsH = false;
    else
      _containsH = await _hardskillService.ContainsAnyHardskills(Description);
    
    if (Uppercat != null)
    {
      foreach(var description in Uppercat.Subcat)
      {
        var hardskill = await _hardskillService.GetHardskill(description);
        if (hardskill != null)
          Subcat.Add(description);
      }
    }

    foreach (var cat in _hardskillCats)
    {
      if (!await _hardskillService.ContainsAnyHardskills(cat.Description)) continue;
      
      var subCats = new List<string>();

      foreach (var subcat in cat.Subcat)
      {
        var hardskill = await _hardskillService.GetHardskill(subcat);
        if (hardskill != null)
          subCats.Add(hardskill.Description);
      }

      if (!SubHardskills.ContainsKey(cat))
        SubHardskills.Add(cat, new List<string>(subCats));
    }
  }

  private void ShowingCat()
  {
    _showCat = !_showCat;
  }

  private void ShowingCreateHardskill()
  {
    _showCreateSkill = !_showCreateSkill;
  }

  private void HardskillList(string hardskill)
  {
    if (Subcat.Contains(hardskill))
      Subcat.Remove(hardskill);
    else
      Subcat.Add(hardskill);
  }
  
  private bool IsInList(string description)
  {
    return Subcat.Exists(x => x == description);
  }

  private async Task AddingHardskills()
  {
    if (ShowCreateCat)
    {
      var cat = new Hardskill()
      {
          Description = _cat,
          Uppercat = null,
          Subcat = new List<string>(Subcat),
          IsHardskill = false
      };
      await _hardskillService.CreateHardskillCategory(cat);
      Abstract.UpdateLists();
    } 
    else 
      await _hardskillService.EditHardskillsCategory(Description, Subcat);
    
    Subcat.Clear();
    Showing();
  }

  private async Task CreateHardskill()
  {
    var hardskill = new Hardskill()
    {
      Description = _hardskill,
      Uppercat = null,
      Subcat = null
    };
    await _hardskillService.CreateHardskill(hardskill);
    HardskillList(hardskill.Description);
    ShowingCreateHardskill();
  }

  public void Showing()
  {
    _show = !_show;
    Subcat.Clear();
    StateHasChanged();
  }
    
}
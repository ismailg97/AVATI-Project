@using AVATI.Data

@inject IHardskillService _hardskillService
@inject NavigationManager _navigationManager

<div class="modal @(_show ? "fade show" : "" )" id="myModal" style=" display: @(_show ? "block" : "none");">
               <div class="modal-dialog">
                 <div class="modal-content">
                   <div class="modal-header">
                     <h4 class="modal-title">Füge der Kategorie @Description Hardskills hinzu</h4>
                     <button type="button" class="close" data-dismiss="modal" @onclick="Showing">&times;</button>
                   </div>
                   <div class="modal-body">
                     <div class="container">

                       @if(_hardskillService.GetHardskillCategory(Description)?.Subcat != null && _hardskillService.GetHardskillCategory(Description).Subcat.Any())
                       {
                         <h6>Bereits enthaltene Hardskills</h6>
                         <hr/>
                         @foreach(var hardskill in _hardskillService.GetHardskillCategory(Description).Subcat)
                         {
                           if (hardskill.IsHardskill)
                           {
                             <button type="button" class="@(IsInList(hardskill.Description) ? "btn btn-primary btn-sm" : "btn btn-secondary btn-sm")" @onclick="() => HardskillList(hardskill)">@hardskill.Description</button>
                           }
                         }
                       }
                       

                       @if (_hardskillService.GetAllHardskills().Any(x => x.Uppercat == null))
                       {
                         <h6>Hardskills ohne Hardskillkategorie</h6>
                         <hr/>
                         foreach (var hardskill in _hardskillService.GetAllHardskills())
                         {
                           if (hardskill.Uppercat == null)
                           {
                             <button type="button" class="@(IsInList(hardskill.Description) ? "btn btn-primary btn-sm" : "btn btn-secondary btn-sm")" @onclick="() => HardskillList(hardskill)">@hardskill.Description</button>
                           }
                         }
                       }
                       
                       @if (_showCreate)
                       {
                         <div class="distance">
                           <input type="text" @bind="_description"/>
                           <button class="btn btn-success btn-sm" @onclick="CreateHardskill">Speichern</button>
                           <button class="btn btn-danger btn-sm" @onclick="ShowingCreate">Abbrechen</button>
                         </div>
                       } else {
                         <div>
                           <button class="btn btn-outline-success" @onclick="ShowingCreate">Create New Hardskill</button>
                         </div>
                       } 

                       <div>
                         <button class="btn btn-outline-info" @onclick="ShowingCat">Hardskills mit Kategorien @(_showCat ? "ausblenden" : "einblenden")</button>
                       </div>
                       @if (_showCat)
                       {
                         @foreach (var hardskillcat in _hardskillService.GetAllHardskillCategorys())
                         {
                           if (hardskillcat.ContainsAnyHardskills() && hardskillcat.Description != Description)
                           {

                             <h6>@hardskillcat.Description</h6>
                             <hr/>
                             foreach (var hardskill in hardskillcat.Subcat)
                             {
                               if (hardskill.IsHardskill)
                               {
                                 <button type="button" class="@(IsInList(hardskill.Description) ? "btn btn-primary btn-sm" : "btn btn-secondary btn-sm")" @onclick="() => HardskillList(hardskill)">@hardskill.Description</button>
                               }
                             }

                           }
                         }
                       }

                     </div>
                   </div>
                   <div class="modal-footer">
                     <button type="button" class="btn btn-success" @onclick="AddingHardskills">Save</button>
                     <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="Showing">Close</button>
                   </div>
                 </div>
               </div>
          </div>
@if (_show)
{
  <div class="modal-backdrop fade show"></div>
}

@code {
  [Parameter]
  public string Description { get; set; }

  private List<Hardskill> Subcat { get; set; } = new();

  private string _description;
  
  private bool _show = false;

  private bool _showCat = false;

  private bool _showCreate = false;

  protected override void OnInitialized()
  {
    var cat = _hardskillService.GetHardskillCategory(Description);

    if (cat != null)
    {
      foreach(var hardskill in cat.Subcat)
      {
        if (hardskill.IsHardskill)
          Subcat.Add(hardskill);
      }
    }
  }
  
  private void ShowingCat()
  {
    _showCat = !_showCat;
  }

  private void ShowingCreate()
  {
    _showCreate = !_showCreate;
  }
  
  private void HardskillList(Hardskill hardskill)
  {
    if (Subcat.Contains(hardskill))
      Subcat.Remove(hardskill);
    else
      Subcat.Add(hardskill);
  }
  
  private bool IsInList(string description)
  {
    return Subcat.Exists(x => x.Description == description);
  }

  private void AddingHardskills()
  {
    _hardskillService.EditHardskillsCategory(Description, Subcat);
    Subcat.Clear();
    Showing();
  }

  private void CreateHardskill()
  {
    var hardskill = new Hardskill()
    {
      Description = _description,
      Uppercat = null,
      Subcat = null,
      Height = 0
    };
    _hardskillService.CreateHardskill(hardskill);
    HardskillList(hardskill);
    ShowingCreate();
  }

  public void Showing()
  {
    _show = !_show;
    Subcat.Clear();
    StateHasChanged();
  }
    
}
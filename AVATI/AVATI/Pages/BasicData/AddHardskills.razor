@using AVATI.Data
@using System.Security.Cryptography
@using Microsoft.EntityFrameworkCore.Query.SqlExpressions

@inject IHardskillService _hardskillService

<div class="modal @(_show ? "fade show" : "" )" id="myModal" style=" display: @(_show ? "block" : "none"); width: 700px; position: center;"> 
  <div class="modal-dialog modal-dialog-scrollable">
    <div class="modal-content">
      @if (_finishedLoadPage)
      {
        <div class="modal-header">
          @if (ShowCreateCat)
          {
            <h5 class="modal-title">
              Erstellen einer neuen Kategorie <b>(Wurzelelement)</b>
            </h5>
          }
          else
          {
            <h5 class="modal-title">
              Kategorisierung von Hardskills in "<b>@Description</b>"
            </h5>
          }
          <button type="button" class="close" data-dismiss="modal" @onclick="Showing">&times;</button>
        </div>
        <div class="modal-body">
          <div class="container">

            @if (ShowCreateCat)
            {
              <a style="position: relative;">
            <MudPopover Open="@_showErrorCategory" Class="alert alert-danger text-center" Style="width: 380px; height: auto; color: darkred; font-weight: 650; font-size: 14px; background-color: #f8d7da">
              @if (_whatToShowCategory == 0)
              {
                <a>Hinzufügen misslungen, der Hardskill bzw. die Kategorie exsistiert bereits!</a>
              } 
              else if (_whatToShowCategory == 1)
              {
                <a>Hinzufügen misslungen, die Bezeichnung fehlt!</a>
              }
              else if (_whatToShowCategory == 2)
              {
                <a>Hinzufügen misslungen, die Bezeichnung ist zu lang (max. 150 Zeichen)!</a>
              }
            </MudPopover>
            </a>
              <div class="form-group">
                <label>Bezeichnung der Kategorie:</label>
                <input class="form-control" type="text" @bind="_cat"/>
              </div>
            }

            @if (Subcat.Any())
            {
              <h6>Enthaltene Hardskills:</h6>
              <hr/>
              <div class="alert alert-primary">
                @foreach (var hardskill in Subcat)
                {
                  <DeleteButton Text="@hardskill" Type="TypeButton.Primary" 
                                IsSmall="true" OnClick="() => HardskillList(hardskill)" style="margin-bottom: 5px; margin-left: 5px;"/>
                }
              </div>
            }

            @if (_toDeleteSkills != null && _toDeleteSkills.Any())
            {
              
              <h6>Zu entferndende Hardskills:</h6>
              <hr/>
              <div class="alert alert-danger">
              @foreach (var hardskill in _toDeleteSkills)
              {
                <button type="button" class="btn btn-danger btn-sm" style="margin-left: 5px !important; margin-top: 5px !important;" @onclick="() => HardskillList(hardskill)">
                  <a><a class="@(IsInList(hardskill) ? "showRemove" : "")">@hardskill</a> <a class="remove"><span class="oi oi-x"></span></a></a>
                </button>
              }
              </div>
            }

            @if (_hardskills != null && _hardskills.Any())
            {
              <h6>Auswahl von Hardskills ohne Hardskillkategorie:</h6>
              <hr/>
              <div class="alert alert-secondary">
              @foreach (var hardskill in _hardskills)
              {
                <button type="button" class="btn btn-secondary btn-sm" @onclick="() => HardskillList(hardskill)">
                  <a><a class="@(IsInList(hardskill) ? "showRemove" : "")">@hardskill</a> <a class="remove"><span class="oi oi-x"></span></a></a>
                </button>
              }
              </div>
            }

            @if (_showCreateSkill)
            {
              <a style="position: relative;">
            <MudPopover Open="@_showErrorSkill" Class="alert alert-danger text-center" Style="width: 380px; height: auto; color: darkred; font-weight: 650; font-size: 14px; background-color: #f8d7da">
              @if (_whatToShowSkill == 0)
              {
                <a>Hinzufügen misslungen, der Hardskill bzw. die Kategorie exsistiert bereits!</a>
              } 
              else if (_whatToShowSkill == 1)
              {
                <a>Hinzufügen misslungen, die Bezeichnung fehlt!</a>
              }
              else if (_whatToShowSkill == 2)
              {
                <a>Hinzufügen misslungen, die Bezeichnung ist zu lang (max. 150 Zeichen)!</a>
              }
            </MudPopover>
            </a>

              <div class="distance">
                <label><small>Bezeichnung des Hardskills:</small></label>
                <input class="form-control" style="display: inline;" type="text" @bind="_hardskill"/>
                <button class="check" style="display: inline;" @onclick="CreateHardskill">&#10003;</button>
                <button class="stop" style="display: inline;" @onclick="ShowingCreateHardskill">&#10005;</button>
              </div>
            }
            else
            {
              <div>
                <button class="btn btn-outline-success" @onclick="ShowingCreateHardskill">Hardskill erstellen</button>
              </div>
            }

            <div>
              <button class="btn btn-outline-info" @onclick="ShowingCat">Hardskills mit Kategorien @(_showCat ? "ausblenden" : "einblenden")</button>
              <MudIcon Icon="@Icons.Filled.InfoOutline" Style="color: #5a6066; display: inline;" @onclick="() => { _openExplain = !_openExplain;}"/>
                      <a style="position: relative;">
                          <MudPopover Open="@_openExplain" Class="px-4 pt-4" Direction="Direction.Top" Style="width: 400px; height: auto;">
                            <MudText Style="font-size: 14px;">Sie können Hardskills aus anderen 
                              Kategorien ebenfalls in diese Kategorie hinzufügen; der Hardskill ist dann mehrfach kategorisiert</MudText>
                                      <MudButton Style="font-size: 14px;" OnClick="() => { _openExplain = false;}" Class="ml-auto mr-n3 mb-1" Color="MudBlazor.Color.Error">Close</MudButton>
                              </MudPopover>
                      </a>
            </div>
            @if (_finishedLoadCats)
            {
              bool exists = CheckedExists();
              if (_showCat && SubHardskills.Any())
              {
                <input id="Filter" class="form-control" type="text" placeholder="Filter nach Hardskill..."
                       style="margin-top: 15px;"
                       @bind="_filter"
                       @bind:event="oninput">
                if (exists)
                {
                  <div class="list-group border-dark overflow-auto mr-3 col-9" style="margin-top: 15px; max-height: 10%;">
                    @foreach (var hardskillcat in SubHardskills.Keys.Where(x => x != Description && SubHardskills[x].ToList().Exists(e => IsVisible(e))))
                    {
                        <h6>@hardskillcat:</h6>
                        <hr/>
                        <div class="alert alert-info">
                          @foreach (var description in SubHardskills[hardskillcat].Where(e => IsVisible(e)))
                          {
                            <button type="button" class="btn btn-info btn-sm" @onclick="() => HardskillList(description)">
                                <a>@description</a>
                              </button>
                          }
                        </div>
                    }
                  </div>
                }
                else
                {
                  <small style="color: #818181; margin-top: 15px !important; position: center !important;">[Keine Hardskills gefunden]</small>
                }
              }
            }
            else
            {
              <div class="d-flex flex-column align-items-center justify-content-center" style="margin-top: 15px;">
                <div class="row">
                  <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                  </div>
                </div>
                <div class="row">
                  <strong>Lade...</strong>
                </div>
              </div>
            }

          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="Showing">
            <span class="oi oi-circle-x" aria-hidden="true"></span> Abbrechen
          </button>
          <button type="button" class="btn btn-success" @onclick="AddingHardskills">
            <span class="oi oi-document" aria-hidden="true"></span> Speichern
          </button>
        </div>
      }
      else
      {
        <div class="d-flex flex-column align-items-center justify-content-center" style="margin-top: 15px;">
          <div class="row">
            <div class="spinner-border" role="status">
              <span class="sr-only">Loading...</span>
            </div>
          </div>
          <div class="row">
            <strong>Lade...</strong>
          </div>
        </div>
      }
    </div>
  </div>
          </div>
@if (_show)
{
  <div class="modal-backdrop fade show"></div>
}

@code {
  [Parameter] 
  public EditTreeElement TreeElement { get; set; }
  
  [Parameter]
  public EditTreeDiagram TreeDiagram { get; set; }
  
  [Parameter] 
  public BasicDataAbstract Abstract { get; set; }
  
  [Parameter]
  public string Description { get; set; }

  private List<string> Subcat;

  private Dictionary<string, List<string>> SubHardskills;
  
  private Hardskill Uppercat { get; set; }
  
  private bool _finishedLoadPage = false;

  private bool _finishedLoadCats = true;

  private string _hardskill;

  private string _cat;
  
  private bool _show = false;

  private bool _showCat;

  private bool _showCreateSkill;

  private bool ShowCreateCat { get; set; }

  private List<string> _toDeleteSkills;

  private List<string> _hardskills;
  
  private bool _showErrorCategory;
  private bool _showErrorSkill;
  private int _whatToShowSkill;
  private int _whatToShowCategory;
  private bool _openExplain;
  private string _filter;

  protected override void OnParametersSet()
  {
    _finishedLoadPage = false;
    _openExplain = false;
    _showErrorCategory = _showErrorSkill = false;
    _whatToShowCategory = _whatToShowSkill = -1;
    _finishedLoadCats = true;
    _showCat = false;
    _showCreateSkill = false;
    ShowCreateCat = false;
    _cat = "";
    _toDeleteSkills = new();
    _hardskills = new();
    Subcat = new();
    SubHardskills = new();
  }

  protected override async Task OnParametersSetAsync()
  {
    var allSkills = await _hardskillService.GetAllHardskills();

    foreach (var hardskill in allSkills.ToList().Where(x => x.Uppercat == null || !x.Uppercat.Any()))
    {
      if (!_hardskills.Contains(hardskill.Description))
        _hardskills.Add(hardskill.Description);
    }
    
     var hardskillCats = await _hardskillService.GetAllDesCategorys();
    
    if (hardskillCats == null) return;
    ShowCreateCat = !hardskillCats.Exists(x => x == Description);
    Uppercat = await _hardskillService.GetHardskillCategory(Description);
    
    if (Uppercat != null)
    {
      foreach(var description in Uppercat.Subcat)
      {
        var hardskill = await _hardskillService.GetHardskill(description);
        if (hardskill != null && !Subcat.Contains(description))
        {
          Subcat.Add(description);
        }
      }
    }
    _finishedLoadPage = true;
  }

  private bool IsVisible(string skill)
  {
    return string.IsNullOrEmpty(_filter) || skill.Contains(_filter, StringComparison.OrdinalIgnoreCase);
  }

  private bool CheckedExists()
  {
    foreach (var hardskills in SubHardskills.Values)
    {
      if (hardskills.Exists(IsVisible))
        return true;
    }
    return false;
  }

  private async Task ShowingCat()
  {
    if (!SubHardskills.Any())
    {
      _finishedLoadCats = false;
      StateHasChanged();
      var hardskillCats = await _hardskillService.GetAllDesCategorys();
      foreach (var cat in hardskillCats.ToList())
      {
        if (!await _hardskillService.ContainsAnyHardskills(cat)) continue;
        var category = await _hardskillService.GetHardskillCategory(cat);
        if (category == null) continue;
      
        var subCats = new List<string>();

        foreach (var subcat in category.Subcat)
        {
          var hardskill = await _hardskillService.GetHardskill(subcat);
          if (hardskill != null && !subCats.Contains(subcat))
            subCats.Add(subcat);
        }

        SubHardskills.TryAdd(cat, new List<string>(subCats));
      }
      _showCat = !_showCat;
      _finishedLoadCats = true;
      StateHasChanged();
    }
    else
      _showCat = !_showCat;
  }

  private void ShowingCreateHardskill()
  {
    _showCreateSkill = !_showCreateSkill;
  }

  private async Task HardskillList(string description)
  {
    var hardskill = await _hardskillService.GetHardskill(description);
    if (hardskill == null) return;
    var upperCat = hardskill.Uppercat;
    var hasNoUpperCat = upperCat == null || !upperCat.Any();
    var hasUpperCat = !hasNoUpperCat && upperCat.Exists(x => x == Description);
    

    if (Subcat.Contains(description))
    {
      Subcat.Remove(description);
      if (hasNoUpperCat && !_hardskills.Contains(description))
        _hardskills.Add(description);
      else if(hasUpperCat && !_toDeleteSkills.Contains(description))
        _toDeleteSkills.Add(description);
    }
    else
    {
      if(!Subcat.Contains(description))
        Subcat.Add(description);
      _hardskills.Remove(description);
      _toDeleteSkills.Remove(description);
    }
    StateHasChanged();
  }
  
  private bool IsInList(string description)
  {
    return Subcat.Exists(x => x == description);
  }
  
  private async void ShowErrorMessage(bool isSkill, int whatToShow)
  {
    if (isSkill)
    {
      _whatToShowSkill = whatToShow;
      _showErrorSkill = true;
      StateHasChanged();
      await Task.Delay(3000);
      _showErrorSkill = false;
      StateHasChanged();
    }
    else
    {
      _whatToShowCategory = whatToShow;
      _showErrorCategory = true;
      StateHasChanged();
      await Task.Delay(3000);
      _showErrorCategory = false;
      StateHasChanged();
    }
  }

  private async Task AddingHardskills()
  {
    if (ShowCreateCat)
    {
      if (!_hardskillService.CheckEmptyHardskill(_cat))
      {
        ShowErrorMessage(false, 1);
        return;
      }

      if (!await _hardskillService.CheckExistHardskill(_cat))
      {
        ShowErrorMessage(false, 0);
        return;
      }

      if (!_hardskillService.CheckLengthHardskill(_cat))
      {
        ShowErrorMessage(false, 2);
        return;
      }

      var cat = new Hardskill()
      {
          Description = _cat,
          Uppercat = null,
          Subcat = new List<string>(Subcat),
          IsHardskill = false
      };
      await _hardskillService.CreateHardskillCategory(cat);
      _show = !_show;
      Subcat.Clear();
      await Abstract.UpdateHardskills();
      await Abstract.UpdateCategorys(cat.Description);
    }
    else
    {
      if (TreeDiagram != null)
        TreeDiagram.Loadfinished = false;
      else
        TreeElement.LoadSubfinished[Description] = false;
      
      await _hardskillService.EditHardskillsCategory(Description, Subcat);
      _show = !_show;
      if(Abstract != null)
        await Abstract.UpdateHardskills();
      Subcat.Clear();
      if (TreeDiagram != null)
      {
        await TreeDiagram.Loading();
        TreeDiagram.Loadfinished = true;
      }
      else
      {
        await TreeElement.Loading(Description);
        TreeElement.LoadSubfinished[Description] = true;
      }
    }
  }

  private async Task CreateHardskill()
  {
    if (!_hardskillService.CheckEmptyHardskill(_hardskill))
    {
      ShowErrorMessage(true, 1);
      return;
    }

    if (!await _hardskillService.CheckExistHardskill(_hardskill))
    {
      ShowErrorMessage(true, 0);
      return;
    }

    if (!_hardskillService.CheckLengthHardskill(_hardskill))
    {
      ShowErrorMessage(true, 2);
      return;
    }

    var hardskill = new Hardskill()
    {
      Description = _hardskill,
      Uppercat = null,
      Subcat = null
    };
    await _hardskillService.CreateHardskill(hardskill);
    await HardskillList(hardskill.Description);
    ShowingCreateHardskill();
  }

  public void Showing()
  {
    _show = !_show;
    Subcat.Clear();
    StateHasChanged();
  }

}
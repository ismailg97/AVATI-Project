@using AVATI.Data
@using DocumentFormat.OpenXml.Wordprocessing

@inject IHardskillService _hardskillService

<AddHardskills @ref="_addHardskills" Description="@_categoryToAdd" TreeElement="@this" Abstract="@Abstract"/>

@if(Subcats == null || !Subcats.Any())
{
    <ul>
        @if(!_showNew) {
            <li><button type="button" class="plus" @onclick="ShowingNew">+</button></li>
        } else {
            <li>
                <input class="form-control col-4 inline" type="text" id="softskill" @bind="_newCategory"/>
                <button type="button" class="check inline" @onclick="CreateCategory">&#10003;</button>
                <button type="button" class="stop inline" @onclick="ShowingNew">&#10005;</button>
                <MudIcon Icon="@Icons.Filled.InfoOutline" Style="color: #5a6066; display: inline;" @onclick="() => { _openExplain = !_openExplain;}"/>
                          <a style="position: relative; border: none !important;">
                              <MudPopover Open="@_openExplain" Class="px-4 pt-4" Direction="Direction.Top" Style="width: 400px; height: auto;">
                                  <MudText Style="font-size: 14px;">Wenn Sie hier eine <a style="background-color: #0275d8; color: white; border: none !important;">Kategorie</a> bzw. ein
                                      <a style="background-color: #5cb85c; color: white; border: none !important;">Hardskill</a> auswählen, so wird diese in die erstellte Kategorie untergliedert</MudText>
                                          <MudButton Style="font-size: 14px;" OnClick="() => { _openExplain = false;}" Class="ml-auto mr-n3 mb-1" Color="MudBlazor.Color.Error">Close</MudButton>
                                  </MudPopover>
                          </a>
                <a style="position: relative; border: none !important;">
                    <MudPopover Open="@_showCreateError" Class="alert alert-danger text-center" Style="width: 380px; height: auto; color: darkred; font-weight: 650; font-size: 14px; background-color: #f8d7da">
                        @if (_whatToShowCreate == 0)
                        {
                            <a style="border: none !important;">Erstellen misslungen, die Bezeichnung existiert bereits!</a>
                        } 
                        else if (_whatToShowCreate == 1)
                        {
                            <a style="border: none !important;">Erstellen misslungen, die Bezeichnung fehlt!</a>
                        } 
                        else if (_whatToShowCreate == 2)
                        {
                            <a style="border: none !important;">Erstellen misslungen, die Bezeichnung ist zu lang (max. 150 Zeichen)!</a>
                        }
                    </MudPopover>
                </a>
            </li>
        }
    </ul>
}
else
{
    if (_loadPagefinished)
    {
        if (!_showNew)
        {
            if (ShowCategorys && _categorys.Any() || ShowHardskills)
            {
                <div class="@(RenameProblem ? "between1":  "between0" )"><button type="button" class="plus" @onclick="ShowingNew">+</button></div>
            }
            <ul>
                @if (ShowCategorys)
                {
                    foreach (var category in _categorys)
                    {
                        <li>
                            @if (!_showRename[category])
                            {
                                <ContextMenu Id="@category">
                                    <Item OnClick="() => DeleteCategory(category)"><span class="oi oi-trash"></span> Löschen</Item>

                                    <Item OnClick="() => ShowingRename(category)"><span class="oi oi-pencil"></span> Umbenennen</Item>

                                    <Item OnClick="() => ShowingAddHardskills(category)"><span class="oi oi-plus"></span> Hardskills hinzufügen</Item>
                                </ContextMenu>

                                <ContextMenuTrigger MenuId="@category">
                                    <a class="cat" type="button" @onclick="() => ShowingUnder(category)">@category</a>
                                </ContextMenuTrigger>
                            }
                            else
                            {
                                <input class="form-control col-4 inline" type="text" id="softskill" @bind="_rename[category]"/>
                                <button type="button" class="check inline" @onclick="() => UpdateCategory(category)">&#10003;</button>
                                <button type="button" class="stop inline" @onclick="() => ShowingRename(category)">&#10005;</button>
                                <a style="position: relative; border: none !important;">
                                    <MudPopover Open="@_showEditError[category]" Class="alert alert-danger text-center" Style="width: 380px; height: auto; color: darkred; font-weight: 650; font-size: 14px; background-color: #f8d7da">
                                        @if (_whatToShowEdit[category] == 0)
                                        {
                                            <a style="border: none !important;">Umbennen misslungen, die Bezeichnung existiert bereits!</a>
                                        } 
                                        else if (_whatToShowEdit[category] == 1)
                                        {
                                            <a style="border: none !important;">Umbennen misslungen, die Bezeichnung fehlt!</a>
                                        } 
                                        else if (_whatToShowEdit[category] == 2)
                                        {
                                            <a style="border: none !important;">Umbennen misslungen, die Bezeichnung ist zu lang (max. 150 Zeichen)!</a>
                                        }
                                    </MudPopover>
                                </a>
                            }

                            @if (LoadSubfinished[category])
                            {
                                <EditTreeElement @ref="_elements[category]" Subcats="@_subcatsofCategory[category]" Uppercat="@category" Abstract="@Abstract"
                                                 UpperElement="@this" ShowHardskills="@_showSubHardskills[category]" ShowCategorys="@_showSubCategorys[category]"
                                                 ContainsJustHardskills="@_containsJustHardskills[category]" RenameProblem="@_showRename[category]"/>
                            }
                            else
                            {
                                <div class="d-flex flex-column align-items-start justify-content-start">
                                    <div class="row">
                                        <div class="spinner-border" role="status">
                                            <span class="sr-only">Loading...</span>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <strong>Lade...</strong>
                                    </div>
                                </div>
                            }
                            
                        </li>
                    }
                }


                @if (ShowHardskills)
                {
                    foreach (var hardskill in _hardskills)
                    {
                        var id = hardskill + Uppercat;
                        <li>
                            <ContextMenu Id="@id">
                                <Item OnClick="() => DeleteHardskill(hardskill)"><span class="oi oi-trash"></span> Aus Kategorie löschen</Item>
                            </ContextMenu>

                            <ContextMenuTrigger MenuId="@id">
                                <a class="hardskill" type="button">@hardskill</a>
                            </ContextMenuTrigger>
                        </li>
                    }
                }
            </ul>
        }
        else
        {
            <ul>
                <li>
                    <input class="form-control col-4 inline" type="text" id="softskill" @bind="_newCategory"/>
                    <button type="button" class="check inline" @onclick="CreateCategory">&#10003;</button>
                    <button type="button" class="stop inline" @onclick="ShowingNew">&#10005;</button>
                    <MudIcon Icon="@Icons.Filled.InfoOutline" Style="color: #5a6066; display: inline;" @onclick="() => { _openExplain = !_openExplain;}"/>
                                          <a style="position: relative; border: none !important;">
                                              <MudPopover Open="@_openExplain" Class="px-4 pt-4" Direction="Direction.Top" Style="width: 400px; height: auto;">
                                                  <MudText Style="font-size: 14px;">Wenn Sie hier eine <a style="background-color: #0275d8; color: white; border: none !important;">Kategorie</a> bzw. ein
                                                      <a style="background-color: #5cb85c; color: white; border: none !important;">Hardskill</a> auswählen, so wird diese in die erstellte Kategorie untergliedert</MudText>
                                                          <MudButton Style="font-size: 14px;" OnClick="() => { _openExplain = false;}" Class="ml-auto mr-n3 mb-1" Color="MudBlazor.Color.Error">Close</MudButton>
                                                  </MudPopover>
                                          </a>
                    <a style="position: relative; border: none !important;">
                        <MudPopover Open="@_showCreateError" Class="alert alert-danger text-center" Style="width: 380px; height: auto; color: darkred; font-weight: 650; font-size: 14px; background-color: #f8d7da">
                            @if (_whatToShowCreate == 0)
                            {
                                <a style="border: none !important;">Erstellen misslungen, die Bezeichnung existiert bereits!</a>
                            } 
                            else if (_whatToShowCreate == 1)
                            {
                                <a style="border: none !important;">Erstellen misslungen, die Bezeichnung fehlt!</a>
                            } 
                            else if (_whatToShowCreate == 2)
                            {
                                <a style="border: none !important;">Erstellen misslungen, die Bezeichnung ist zu lang (max. 150 Zeichen)!</a>
                            }
                        </MudPopover>
                    </a>
                    <ul>
                        @foreach (var category in _categorys)
                        {

                            <li>
                                @if (IsInList(category))
                                {
                                    <DeleteButton Text="@category" Type="TypeButton.Primary" OnClick="() => AddList(category)"/>
                                }
                                else
                                {
                                    <DeleteButton Text="@category" Type="TypeButton.OutlinePrimary" OnClick="() => AddList(category)" IsDisabled="@true"/>
                                }
                            </li>
                        }

                        @foreach (var hardskill in _hardskills)
                        {

                            <li>
                                @if (IsInList(hardskill))
                                {
                                    <DeleteButton Text="@hardskill" Type="TypeButton.Success" OnClick="() => AddList(hardskill)"/>
                                }
                                else
                                {
                                    <DeleteButton Text="@hardskill" Type="TypeButton.OutlineSuccess" OnClick="() => AddList(hardskill)" IsDisabled="@true"/>
                                }
                            </li>
                        }
                    </ul>
                </li>
            </ul>
        }
    }
    else if(!ContainsJustHardskills)
    {
        <div class="d-flex flex-column align-items-start justify-content-start">
            <div class="row">
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <div class="row">
                <strong>Lade...</strong>
            </div>
        </div>
    }

}

@code {
    [Parameter]
    public EditTreeDiagram UpperTree { get; set; }
    
    [Parameter]
    public EditTreeElement UpperElement { get; set; }

    [Parameter]
    public BasicDataAbstract Abstract { get; set; }

    [Parameter]
    public List<string> Subcats { get; set; }

    [Parameter]
    public string Uppercat { get; set; }
    
    [Parameter]
    public bool ShowHardskills { get; set; }
    
    [Parameter]
    public bool ShowCategorys { get; set; }
    
    [Parameter]
    public bool RenameProblem { get; set; }
    
    [Parameter]
    public bool ContainsJustHardskills { get; set; }

    private List<string> _categorys = new();
    
    private List<string> _hardskills = new();

    private Dictionary<string, List<string>> _subcatsofCategory = new();
    
    private Dictionary<string, bool> _containsJustHardskills = new();

    private Dictionary<string, bool> _containsJustCategorys = new();
    
    private Dictionary<string, EditTreeElement> _elements = new();

    private Dictionary<string, bool> _showRename = new();

    private Dictionary<string, string> _rename = new();

    private bool _showNew;
    
    private List<string> _subcatChoose = new();
    
    private string _newCategory;

    private Dictionary<string, bool> _showSubHardskills = new();
    
    private Dictionary<string, bool> _showSubCategorys = new();

    private Dictionary<string, bool> _showEditError = new();

    private bool _showCreateError;

    private int _whatToShowCreate;

    private Dictionary<string, int> _whatToShowEdit = new();
    
    public Dictionary<string, bool> LoadSubfinished {get; set; } = new();

    private bool _loadPagefinished;
    
    private AddHardskills _addHardskills;

    private string _categoryToAdd;

    private bool _openExplain;
    
    private async Task UpdatingAll()
    {
        foreach(var description in Subcats)
        {
            var taskSkillOrCat = _hardskillService.GetHardskillOrCategory(description);
            var skillOrCat = await taskSkillOrCat;
            if (skillOrCat.IsHardskill)
            {
                if(!_hardskills.Contains(description))
                    _hardskills.Add(description);
            }
            else
            {
                if (!_categorys.Contains(description))
                    _categorys.Add(description);
                _subcatsofCategory.TryAdd(description, skillOrCat.Subcat);
                var taskJustH = _hardskillService.ContainsJustHardskills(description);
                _containsJustHardskills.TryAdd(description, await taskJustH);
                var taskJustC = _hardskillService.ContainsAnyHardskills(description);
                _containsJustCategorys.TryAdd(description, !await taskJustC);
                _elements.TryAdd(description, new EditTreeElement());
                _showRename.TryAdd(description, false);
                _rename.TryAdd(description, description);
                _showSubHardskills.TryAdd(description, false);
                _showSubCategorys.TryAdd(description, true);
                _whatToShowEdit.TryAdd(description, -1);
                _showEditError.TryAdd(description, false);
                LoadSubfinished.TryAdd(description, true);
            }
        }
    }

    protected override void OnInitialized()
    {
        _openExplain = false;
        _whatToShowCreate = -1;
        _showCreateError = false;
        _loadPagefinished = false;
    }


    protected override async Task OnInitializedAsync()
    {
        _showCreateError = false;
        _showNew = false;
        await UpdatingAll();
        _loadPagefinished = true;
    }

    private async void ShowErrorMessageCreate(int whatToShow)
    {
        _whatToShowCreate = whatToShow;
        _showCreateError = true;
        StateHasChanged();
        await Task.Delay(3000);
        _showCreateError = false;
        StateHasChanged();
    }
    
    private async void ShowErrorMessageEdit(int whatToShow, string skillOrCat)
    {
        _whatToShowEdit[skillOrCat] = whatToShow;
        _showEditError[skillOrCat] = true;
        StateHasChanged();
        await Task.Delay(3000);
        _showEditError[skillOrCat] = false;
        StateHasChanged();
    }

    private async Task CreateCategory()
    {
        if (!_hardskillService.CheckEmptyHardskill(_newCategory))
        {
            ShowErrorMessageCreate(1);
            return;
        }

        if (!await _hardskillService.CheckExistHardskill(_newCategory))
        {
            ShowErrorMessageCreate(0);
            return;
        }

        if (!_hardskillService.CheckLengthHardskill(_newCategory))
        {
            ShowErrorMessageCreate(2);
            return;
        }

        if (UpperTree != null)
            UpperTree.Loadfinished = false;
        if(UpperElement != null)
            UpperElement.LoadSubfinished[Uppercat] = false;
        StateHasChanged();
        Hardskill hardskillcat = new()
        {
            Description = _newCategory,
            Uppercat = new List<string>{ Uppercat },
            Subcat = new List<string>(_subcatChoose),
            IsHardskill = false
        };
        await _hardskillService.CreateHardskillCategory(hardskillcat);
        ShowingNew();
        await Abstract.UpdateHardskills();
        if (UpperTree != null)
        {
            await UpperTree.Loading();
            UpperTree.Loadfinished = true;
        }
        if (UpperElement != null)
        {
            await UpperElement.Loading(Uppercat);
            UpperElement.LoadSubfinished[Uppercat] = true;
        }
        StateHasChanged();
    }
    
    private async Task UpdateCategory(string category)
    {
        if (!_hardskillService.CheckEmptyHardskill(_rename[category]))
        {
            ShowErrorMessageEdit(1, category);
            return;
        }
        
        if (!await _hardskillService.CheckExistHardskill(_rename[category]) && _rename[category] != category)
        {
            ShowErrorMessageEdit(0, category);
            return;
        }

        if (!_hardskillService.CheckLengthHardskill(_rename[category]))
        {
            ShowErrorMessageEdit(2, category);
            return;
        }

        if (UpperTree != null)
            UpperTree.Loadfinished = false;
        if(UpperElement != null)
            UpperElement.LoadSubfinished[Uppercat] = false;
        StateHasChanged();
        await _hardskillService.RenameHardskillCategory(category, _rename[category]);
        ShowingRename(category);
        await Abstract.UpdateHardskills();
        if (UpperTree != null)
        {
            await UpperTree.Loading();
            UpperTree.Loadfinished = true;
        }
        if (UpperElement != null)
        {
            await UpperElement.Loading(Uppercat);
            UpperElement.LoadSubfinished[Uppercat] = true;
        }
        StateHasChanged();
    }

    private async Task DeleteCategory(string category)
    {
        if (UpperTree != null)
            UpperTree.Loadfinished = false;
        if(UpperElement != null)
            UpperElement.LoadSubfinished[Uppercat] = false;
        StateHasChanged();
        await _hardskillService.DeleteHardskillCategory(category);
        await Abstract.UpdateHardskills();
        if (UpperTree != null)
        {
            await UpperTree.Loading();
            UpperTree.Loadfinished = true;
        }
        if (UpperElement != null)
        {
            await UpperElement.Loading(Uppercat);
            UpperElement.LoadSubfinished[Uppercat] = true;
        }
        StateHasChanged();
    }
    
    private async Task DeleteHardskill(string hardskill)
    {
        if (UpperTree != null)
            UpperTree.Loadfinished = false;
        if(UpperElement != null)
            UpperElement.LoadSubfinished[Uppercat] = false;
        StateHasChanged();
        await _hardskillService.DeleteHardskillOutOfCategory(Uppercat, hardskill);
        await Abstract.UpdateHardskills();
        if (UpperTree != null)
        {
            await UpperTree.Loading();
            UpperTree.Loadfinished = true;
        }
        if (UpperElement != null)
        {
            await UpperElement.Loading(Uppercat);
            UpperElement.LoadSubfinished[Uppercat] = true;
        }
        StateHasChanged();
    }
    
    private bool IsInList(string description)
    {
        return _subcatChoose.Exists(x => x == description);
    }


    private void AddList(string hardskill)
    {
        if (_subcatChoose.Contains(hardskill))
            _subcatChoose.Remove(hardskill);
        else
            _subcatChoose.Add(hardskill);
    }

    private void ShowingNew()
    {
        _showNew = !_showNew;
        _subcatChoose.Clear();
    }
    
    public void ShowingUnder(string category)
    {
        if (_containsJustHardskills[category])
        {
            _showSubCategorys[category] = true;
            _showSubHardskills[category] = !_showSubHardskills[category];
            
        } else if (_containsJustCategorys[category]) {
            
            _showSubCategorys[category] = !_showSubCategorys[category];
            _showSubHardskills[category] = false;
            
        } else if (!_showSubCategorys[category]) {
            
            _showSubCategorys[category] = true;
            _showSubHardskills[category] = false;
            
        } else if (_showSubCategorys[category] && _showSubHardskills[category]) {
            
            _showSubCategorys[category] = false;
            _showSubHardskills[category] = false;
            
        } else {
            
            _showSubCategorys[category] = true;
            _showSubHardskills[category] = true;
        }
        
        StateHasChanged();
    }

    private void ShowingRename(string category)
    {
        _showRename[category] = !_showRename[category];
        StateHasChanged();
    }

    private void ShowingAddHardskills(string category)
    {
        _categoryToAdd = category;
        _addHardskills.Showing();
    }

    public void LoadSubfinishing(string category)
    {
        LoadSubfinished[category] = !LoadSubfinished[category];
        StateHasChanged();
    }

    public async Task Loading(string category)
    {
        await UpdatingAll();
        StateHasChanged();
    }

}
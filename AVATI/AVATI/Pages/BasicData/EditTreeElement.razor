@page "/EditTreeElement"
@using AVATI.Data
@using System.Runtime.CompilerServices
@using System.Collections.Generic
@using System.Drawing
@using DocumentFormat.OpenXml.Presentation

@inject IHardskillService _hardskillService

@foreach(var hardskillcat in Hardskills)
{
    <ContextMenu Id="@hardskillcat.Description">
        @if (hardskillcat.IsHardskill) {
            <Item OnClick="() => PopUpDelete(hardskillcat.Description)">Löschen <span class="oi oi-trash"></span></Item>
        } else {
            <Item OnClick="() => Delete(hardskillcat)">Löschen <span class="oi oi-trash"></span></Item>
        }
        <Item OnClick="() => ShowingRename(hardskillcat.Description)">Umbenennen <span class="oi oi-pencil"></span></Item>
        @if (!hardskillcat.IsHardskill)
        {
            <Item OnClick="() => ShowingHardskills(hardskillcat.Description)">Hardskills hinzufügen/löschen</Item>
        }
    </ContextMenu>
}

<AddHardskills @ref="_addHardskills" Description="@_hardskills" Abstract="@Abstract"/>
<DeleteConfirmation @ref="_deleteConfirmation" Description="@_delete" Type="@BasicDataType.HardSkill" Abstract="@Abstract"/>

@if(!Hardskills.Any())
{
    <ul>
        @if(!ShowNew) {
            <li><button type="button" class="plus" @onclick="ShowingNew">+</button></li>
        } else {
            <li>
                <input class="form-control col-4 inline" type="text" id="softskill" @bind="_new"/>
                <button type="button" class="check inline" @onclick="CreateCat">&#10003;</button>
                <button type="button" class="stop inline" @onclick="ShowingNew">&#10005;</button>
                </li>
        }
    </ul>
} 
else if ( Hardskills[0].IsRoot()) 
{
    <div class="container">
        <ul class="tree">
            @foreach (var hardskillcat in Hardskills) {
                
                if (!ShowUnder.ContainsKey(hardskillcat.Description))
                {
                    ShowUnder.Add(hardskillcat.Description, !hardskillcat.ContainsHardskills());
                }
                
                if (!ShowRename.ContainsKey(hardskillcat.Description))
                {
                    ShowRename.Add(hardskillcat.Description, false);
                }
                
                <li>
                    @if(!ShowRename[hardskillcat.Description])
                    {
                        <ContextMenuTrigger MenuId="@hardskillcat.Description">
                            <a class="@(hardskillcat.IsHardskill ? "hardskill":"cat")" type="button" @onclick="() => ShowingUnder(hardskillcat.Description)">@hardskillcat.Description</a>
                        </ContextMenuTrigger>
                    } else {
                        <input class="form-control col-4 inline" type="text" id="softskill" @bind="Rename[hardskillcat.Description]"/>
                        <button type="button" class="check inline" @onclick="() => Update(hardskillcat.Description)">&#10003;</button>
                        <button type="button" class="stop inline" @onclick="() => ShowingRename(hardskillcat.Description)">&#10005;</button>
                    }

                    @if (ShowUnder[hardskillcat.Description] && hardskillcat.Subcat != null)
                    {
                        if (hardskillcat.Subcat.Any())
                        {
                            <EditTreeElement Hardskills="@hardskillcat.Subcat"/>
                        }
                        else
                        {
                            <EditTreeElement Hardskills="@hardskillcat.Subcat" Uppercat="@hardskillcat"/>
                        }
                    }
                </li>
            }
        </ul>
    </div>
}
else
{
    @if (!ShowNew)
    {
        <div class="between"><button type="button" class="plus" @onclick="ShowingNew">+</button></div>
        <ul>
            @foreach (var hardskillcat in Hardskills) {
                
                if (!ShowUnder.ContainsKey(hardskillcat.Description))
                {
                    ShowUnder.Add(hardskillcat.Description, !hardskillcat.ContainsHardskills());
                }
                
                if (!ShowRename.ContainsKey(hardskillcat.Description))
                {
                    ShowRename.Add(hardskillcat.Description, false);
                }
                
                <li>
                    @if(!ShowRename[hardskillcat.Description])
                    {
                        <ContextMenuTrigger MenuId="@hardskillcat.Description">
                            <a class="@(hardskillcat.IsHardskill ? "hardskill":"cat")" type="button" @onclick="() => ShowingUnder(hardskillcat.Description)">@hardskillcat.Description</a>
                        </ContextMenuTrigger>
                    } else
                    {
                        <input class="form-control col-4 inline" type="text" id="softskill" @bind="Rename[hardskillcat.Description]"/>
                        <button type="button" class="check inline" @onclick="() => Update(hardskillcat.Description)">&#10003;</button>
                        <button type="button" class="stop inline" @onclick="() => ShowingRename(hardskillcat.Description)">&#10005;</button>
                    }
                    
                    @if (ShowUnder[hardskillcat.Description] && hardskillcat.Subcat != null)
                    {
                        if (hardskillcat.Subcat.Any())
                        {
                            <EditTreeElement Hardskills="@hardskillcat.Subcat"/>
                        }
                        else
                        {
                            <EditTreeElement Hardskills="@hardskillcat.Subcat" Uppercat="@hardskillcat"/>
                        }
                    }
                </li>
            }
        </ul>
    } else {
        <ul>
            <li><input class="form-control col-4 inline" type="text" id="softskill" @bind="_new"/>
                <button type="button" class="check inline" @onclick="CreateCat">&#10003;</button>
                <button type="button" class="stop inline" @onclick="ShowingNew">&#10005;</button>
                <ul>
                    @foreach (var hardskillcat in Hardskills) {
                        
                        if (!ShowUnder.ContainsKey(hardskillcat.Description))
                        {
                            ShowUnder.Add(hardskillcat.Description, !hardskillcat.ContainsHardskills());
                        }
                        
                        if (!ShowRename.ContainsKey(hardskillcat.Description))
                        {
                            ShowRename.Add(hardskillcat.Description, false);
                        }
                        
                        <li><button class="@(IsInList(hardskillcat.Description) ? "btn btn-primary" : "btn btn-secondary")" type="button" @onclick="() => AddList(hardskillcat)">
                                <a style="border: none !important;" class="@(IsInList(hardskillcat.Description) ? "showRemove" : "")">@hardskillcat.Description</a> <a class="remove"><span class="oi oi-x"></span></a>
                            </button>
                    
                            @if (ShowUnder[hardskillcat.Description] && hardskillcat.Subcat != null)
                            {
                                if (hardskillcat.Subcat.Any()) {
                                    <EditTreeElement Hardskills = "@hardskillcat.Subcat"/>
                                } else {
                                    <EditTreeElement Hardskills = "@hardskillcat.Subcat" Uppercat="@hardskillcat"/>
                                }
                            }
                        </li>
                    }
                </ul>
            </li>
        </ul>
    }
    
}


@code {

    [Parameter]
    public List<Hardskill> Hardskills { get; set; }

    [Parameter]
    public Hardskill Uppercat { get; set; }

    private Dictionary<string, bool> ShowUnder { get; set; } = new();

    private Dictionary<string, bool> ShowRename { get; set; } = new();

    private Dictionary<string, string> Rename { get; set; } = new();

    private List<Hardskill> Subcat { get; set; } = new();

    private bool ShowNew { get; set; } = false;

    private string _new;

    private string _hardskills;

    private string _delete;

    AddHardskills _addHardskills;

    DeleteConfirmation _deleteConfirmation;

    protected override void OnParametersSet()
    {
        if (Hardskills == null) return;
        foreach (var skill in Hardskills)
        {
            if (!Rename.ContainsKey(skill.Description))
                Rename.Add(skill.Description, skill.Description);
        }
    }

    private void ShowingNew()
    {
        ShowNew = !ShowNew;
        Subcat.Clear();
        if (Hardskills != null)
        {
            foreach (var hardskill in Hardskills)
            {
                ShowUnder[hardskill.Description] = false;
            }
        }
    }

    private void ShowingRename(string hardskill)
    {
        ShowRename[hardskill] = !ShowRename[hardskill];
    }

    private void ShowingUnder(string hardskill)
    {
        ShowUnder[hardskill] = !ShowUnder[hardskill];
    }

    private void ShowingHardskills(string hardskillcat)
    {
        _hardskills = hardskillcat;
        _addHardskills.Showing();
    }

    private void PopUpDelete(string description)
    {
        _delete = description;
        _deleteConfirmation.Showing();
    }

    private bool IsInList(string description)
    {
        return Subcat.Exists(x => x.Description == description);
    }

    private void AddList(Hardskill hardskill)
    {
        if (Subcat.Contains(hardskill))
            Subcat.Remove(hardskill);
        else
            Subcat.Add(hardskill);
        ShowingUnder(hardskill.Description);
    }

    private void CreateCat()
    {
        Hardskill hardskillcat = new()
        {
            Description = _new,
            Uppercat = Hardskills.Any() ? Hardskills[0].Uppercat : Uppercat,
            Subcat = new List<Hardskill>(Subcat),
            Height = 2,
            IsHardskill = false
        };
        Subcat.Clear();
        _hardskillService.CreateHardskillCategory(hardskillcat);
        ShowingNew();
    }

    private void Delete(Hardskill hardskillcat)
    {
        _hardskillService.DeleteHardskillCategory(hardskillcat.Description);
    }

    private void Update(string oldDescription)
    {
        var oldHardskill = _hardskillService.GetHardskillCategory(oldDescription) ?? _hardskillService.GetHardskill(oldDescription);
        if (oldHardskill.IsHardskill)
        {
            var newHardskill = new Hardskill()
            {
                Description = Rename[oldDescription],
                Uppercat = oldHardskill.Uppercat,
                Subcat = null,
                Height = 0,
            };
            _hardskillService.UpdateHardskill(newHardskill, oldHardskill);
        }
        else
            _hardskillService.UpdateHardskillCategory(oldDescription, Rename[oldDescription]);
        ShowingRename(oldDescription);
    }
    
    //@bind:event="oninput" style="width: @((Rename[hardskillcat.Description].Length + 1) * 8)px !important;"
}
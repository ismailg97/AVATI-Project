@using AVATI.Data
@using DocumentFormat.OpenXml.Wordprocessing

@inject IHardskillService _hardskillService

@if(Subcats == null || !Subcats.Any())
{
    <ul>
        @if(!_showNew) {
            <li><button type="button" class="plus" @onclick="ShowingNew">+</button></li>
        } else {
            <li>
                <input type="text" id="softskill" @bind="_newCategory"/>
                <button type="button" class="check inline" @onclick="CreateCategory">&#10003;</button>
                <button type="button" class="stop inline" @onclick="ShowingNew">&#10005;</button>
            </li>
        }
    </ul>
}
else
{
    if (!_showNew)
    {
        <div class="between"><button type="button" class="plus" @onclick="ShowingNew">+</button></div>
        <ul>
            @foreach (var category in _categorys)
            {
                <AddHardskills @ref="_addHardskills[category]" Description="@category" TreeElement="@_elements[category]"/>
                <li>
                    @if(!_showRename[category])
                    {
                        <ContextMenu Id="@category">
                            <Item OnClick="() => DeleteCategory(category)">Löschen <span class="oi oi-trash"></span></Item>
                                        
                            <Item OnClick="() => ShowingRename(category)">Umbenennen <span class="oi oi-pencil"></span></Item>
                            
                            <Item OnClick="() => ShowingAddHardskills(category)">Hardskills hinzufügen <span class="oi oi-plus"></span></Item>
                        </ContextMenu>
                        
                        <ContextMenuTrigger MenuId="@category">
                            <a class="cat" type="button" @onclick="() => ShowingUnder(category)">@category</a>
                            
                            @if (_containsHardskills[category])
                            {
                                <a class="btn btn-info" style="color: white !important;" type="button" @onclick="() => ShowingSubHardskills(category)">
                                    @(_showSubHardskills[category] ? "Skills ausblenden" : "Skills einblenden")
                                </a>
                            }
                        </ContextMenuTrigger>
                    } else {
                        <input type="text" id="softskill" @bind="_rename[category]"/>
                        <button type="button" class="check inline" @onclick="() => UpdateCategory(category)">&#10003;</button>
                        <button type="button" class="stop inline" @onclick="() => ShowingRename(category)">&#10005;</button>
                    }
                    
                    
                    @if (_showUnder[category] || _subcatsofCategory[category] == null || !_subcatsofCategory[category].Any() || _showSubHardskills[category])
                    {
                        if(_loadfinished[category])
                        {
                            <EditTreeElement @ref="_elements[category]" Subcats="@_subcatsofCategory[category]"
                                             Uppercat="@category" UpperElement="@this" ShowHardskills="@_showSubHardskills[category]"/>
                        } else
                        {
                            <div class="d-flex flex-column align-items-center justify-content-center">
                                <div class="row">
                                    <div class="spinner-border" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                </div>
                                <div class="row">
                                    <strong>Lade...</strong>
                                </div>
                            </div>
                        }
                    }
                </li>
            }
            
            @if (ShowHardskills)
            {
                foreach (var hardskill in _hardskills)
                {
                    <li>
                        <ContextMenu Id="@hardskill">
                            <Item OnClick="() => DeleteHardskill(hardskill)">Aus Kategorie löschen <span class="oi oi-trash"></span></Item>
                        </ContextMenu>
                        
                        <ContextMenuTrigger MenuId="@hardskill">
                            <a class="hardskill" type="button">@hardskill</a>
                        </ContextMenuTrigger>
                    </li>
                }
            }
        </ul>
    } else {
        <ul>
            <li><input class="form-control col-4 inline" type="text" id="softskill" @bind="_newCategory"/>
                <button type="button" class="check inline" @onclick="CreateCategory">&#10003;</button>
                <button type="button" class="stop inline" @onclick="ShowingNew">&#10005;</button>
                <ul>
                    @foreach (var category in _categorys) {

                        <li>
                            <button class="@(IsInList(category) ? "btn btn-primary" : "btn btn-secondary")" type="button" @onclick="() => AddList(category)">
                                <a style="border: none !important;" class="@(IsInList(category) ? "showRemove" : "")">@category</a> <a class="remove"><span class="oi oi-x"></span></a>
                            </button>
                        </li>
                    }
                    
                    @foreach (var hardskill in _hardskills) {
                    
                        <li>
                            <button class="@(IsInList(hardskill) ? "btn btn-primary" : "btn btn-secondary")" type="button" @onclick="() => AddList(hardskill)">
                                <a style="border: none !important;" class="@(IsInList(hardskill) ? "showRemove" : "")">@hardskill</a> <a class="remove"><span class="oi oi-x"></span></a>
                            </button>
                        </li>
                    }
                </ul>
            </li>
        </ul>
    }
    
}

@code {
    [Parameter]
    public EditTreeElement UpperElement { get; set; }
        
    [Parameter]
    public List<string> Subcats { get; set; }

    [Parameter]
    public string Uppercat { get; set; }
    
    [Parameter]
    public bool ShowHardskills { get; set; }

    private List<string> _categorys = new();
    
    private List<string> _hardskills = new();

    private Dictionary<string, List<string>> _subcatsofCategory = new();
    
    private Dictionary<string, bool> _containsHardskills = new();
    
    private Dictionary<string, EditTreeElement> _elements = new();

    private Dictionary<string, AddHardskills> _addHardskills = new();
    
    private Dictionary<string, bool> _showUnder = new();

    private Dictionary<string, bool> _showRename = new();

    private Dictionary<string, string> _rename = new();

    private bool _showNew;
    
    private List<string> _subcatChoose = new();
    
    private string _newCategory;

    private Dictionary<string, bool> _showSubHardskills = new();

    private Dictionary<string, bool> _loadfinished = new();

    protected override async Task OnParametersSetAsync()
    {
        _showNew = false;
        foreach(var description in Subcats)
        {
            var skillOrCat = await _hardskillService.GetHardskillOrCategory(description);
            if (skillOrCat.IsHardskill)
            {
                if(!_hardskills.Contains(description))
                    _hardskills.Add(description);
            }
            else
            {
                if(!_categorys.Contains(description))
                    _categorys.Add(description);
                if(!_subcatsofCategory.ContainsKey(description))
                    _subcatsofCategory.Add(description, skillOrCat.Subcat);
                if(!_containsHardskills.ContainsKey(description))
                    _containsHardskills.Add(description, await _hardskillService.ContainsAnyHardskills(description));
                if(!_elements.ContainsKey(description))
                    _elements.Add(description, new EditTreeElement());
                if(!_showUnder.ContainsKey(description))
                    _showUnder.Add(description, true);
                if(!_showRename.ContainsKey(description))
                    _showRename.Add(description, false);
                if(!_rename.ContainsKey(description))
                    _rename.Add(description, description);
                if(!_showSubHardskills.ContainsKey(description))
                    _showSubHardskills.Add(description, false);
                if(!_addHardskills.ContainsKey(description))
                    _addHardskills.Add(description, new AddHardskills());
                if (!_loadfinished.ContainsKey(description))
                    _loadfinished.Add(description, true);
            }
        }
    }

    private async Task CreateCategory()
    {
        Hardskill hardskillcat = new()
        {
            Description = _newCategory,
            Uppercat = new List<string>{ Uppercat },
            Subcat = new List<string>(_subcatChoose),
            IsHardskill = false
        };
        Console.WriteLine("Erstelle Kategorie: " + _newCategory);
        await _hardskillService.CreateHardskillCategory(hardskillcat);
        ShowingNew();
        if(UpperElement != null)
            await UpperElement.Loading(Uppercat);
    }
    
    private async Task UpdateCategory(string category)
    {
        await _hardskillService.UpdateHardskillCategory(category, _rename[category]);
        ShowingRename(category);
        if(UpperElement != null)
            await UpperElement.Loading(Uppercat);
    }

    private async Task DeleteCategory(string category)
    {
        await _hardskillService.DeleteHardskillCategory(category);
        if(UpperElement != null)
            await UpperElement.Loading(Uppercat);
    }
    
    private async Task DeleteHardskill(string hardskill)
    {
        var deleteSub = new List<string>(Subcats);
        deleteSub.Remove(hardskill);
        await _hardskillService.EditHardskillsCategory(Uppercat, deleteSub);
        if(UpperElement != null)
            await UpperElement.Loading(Uppercat);
    }
    
    private bool IsInList(string description)
    {
        return _subcatChoose.Exists(x => x == description);
    }


    private void AddList(string hardskill)
    {
        if (_subcatChoose.Contains(hardskill))
            _subcatChoose.Remove(hardskill);
        else
            _subcatChoose.Add(hardskill);
    }

    private void ShowingNew()
    {
        _showNew = !_showNew;
        _subcatChoose.Clear();
    }
    
    public void ShowingUnder(string category)
    {
        _showUnder[category] = !_showUnder[category];
    }

    private void ShowingRename(string category)
    {
        _showRename[category] = !_showRename[category];
    }

    private void ShowingAddHardskills(string category)
    {
        _addHardskills[category].Showing();
    }

    private void ShowingSubHardskills(string category)
    {
        _showSubHardskills[category] = !_showSubHardskills[category];
        StateHasChanged();
    }


    public async Task Loading(string category)
    {
        _loadfinished[category] = false;
        StateHasChanged();
        _subcatsofCategory[category] = (await _hardskillService.GetHardskillCategory(category))?.Subcat;
        _containsHardskills[category] = await _hardskillService.ContainsAnyHardskills(category);
        _loadfinished[category] = true;
        StateHasChanged();
    }

}
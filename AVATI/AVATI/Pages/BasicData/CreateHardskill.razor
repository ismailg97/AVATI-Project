@using AVATI.Data
@using DocumentFormat.OpenXml.Drawing

@inject IHardskillService _hardskillService
@inject NavigationManager _navigationManager

<div class="modal @(_show ? "fade show" : "" )" id="myModal" style=" display: @(_show ? "block" : "none");">
               <div class="modal-dialog modal-dialog-scrollable">
                 <div class="modal-content">
                   <div class="modal-header">
                     <h4 class="modal-title">Erstellen eines Hardskills</h4>
                     <button type="button" class="close" data-dismiss="modal" @onclick="Showing">&times;</button>
                   </div>
                   <div class="modal-body">
                     <a style="position: relative;">
                        <MudPopover Open="@_showError" Class="alert alert-danger text-center" Style="width: 380px; height: auto; color: darkred; font-weight: 650; font-size: 14px; background-color: #f8d7da">
                          @if (_whatToShow == 0)
                          {
                            <a>Hinzufügen misslungen, der Hardskill bzw. die Kategorie exsistiert bereits!</a>
                          } 
                          else if (_whatToShow == 1)
                          {
                            <a>Hinzufügen misslungen, die Bezeichnung fehlt!</a>
                          }
                          else if (_whatToShow == 2)
                          {
                            <a>Hinzufügen misslungen, die Bezeichnung ist zu lang (max. 150 Zeichen)!</a>
                          }
                        </MudPopover>
                      </a>
                     <label class="form-label">Bezeichnung:</label>
                     <input class="form-control" @bind="@_hardskill.Description"/>
                     <label class="form-label" style="margin-top: 15px;">Oberkategorien:</label>
                     <div class="alert alert-primary">
                       @if (UpperCat != null && UpperCat.Any())
                       {
                         foreach (var uppercat in UpperCat)
                         {
                           <DeleteButton Text="@uppercat" IsSmall="@true" OnClick="() => UpperCatList(uppercat)"
                                         Style="margin-bottom: 5px; margin-left: 5px;"/>
                         }
                       }
                       else
                       {
                         <small class="text-center" style="color: #0275d8;">[Keine Oberkategorie]</small>
                       }
                     </div>
                     <h6>Auswahl an Oberkategorien:</h6>
                     <hr/>
                     <input id="Filter" class="form-control" type="text" placeholder="Filter nach Oberkategorie..."
                            style="margin-top: 15px;"
                            @bind="_filter"
                            @bind:event="oninput">
                     @if (_allCategorys != null && _allCategorys.Exists(IsVisible))
                      {
                        <div class="list-group overflow-auto alert alert-info" style="max-height: 80%; margin-top: 15px;">

                          @foreach (var cat in _allCategorys.Where(IsVisible))
                          {
                            <button type="button" class="btn btn-info btn-sm" @onclick="() => UpperCatList(cat)">
                              <a>@cat</a>
                            </button>
                          }
                        </div>
                      }
                     else
                     {
                       <small style="color: #818181; margin-top: 15px !important;">[Keine Oberkategorie gefunden]</small>
                     }
                   </div>
                     <div class="modal-footer">
                       <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="Showing">
                         <MudIcon Icon="@Icons.Filled.Cancel"/> Abbrechen
                       </button>
                       <button type="button" class="btn btn-success" @onclick="Create">
                         <MudIcon Icon="@Icons.Filled.Save"/> Speichern
                       </button>
                     </div>
                 </div>
               </div>
          </div>
@if (_show)
{
  <div class="modal-backdrop fade show"></div>
}

@code {
  [Parameter] public BasicDataAbstract Abstract { get; set; }
  private bool _show = false;
  
  string Description { get; set; }

  private List<string> UpperCat { get; set; } = new();

  private Hardskill _hardskill = new();

  private List<string> _allCategorys;
  
  private string _filter;
  
  private int _whatToShow;

  private bool _showError;

  protected override async Task OnInitializedAsync()
  {
    _showError = false;
    _whatToShow = -1;
    Description = "";
    UpperCat.Clear();
    var taskAllCategorys = _hardskillService.GetAllDesCategorys();
    _allCategorys = await taskAllCategorys;
  }

  private bool IsVisible(string description)
  {
    return string.IsNullOrEmpty(_filter) || description.Contains(_filter, StringComparison.OrdinalIgnoreCase);
  }

  private async void ShowErrorMessage(int whatToShow)
  {
    _whatToShow = whatToShow;
    _showError = true;
    StateHasChanged();
    await Task.Delay(3000);
    _showError = false;
    StateHasChanged();
  }

  private async Task Create()
  {
    if (!_hardskillService.CheckEmptyHardskill(_hardskill.Description))
    {
      ShowErrorMessage(1);
      return;
    }

    if (!await _hardskillService.CheckExistHardskill(_hardskill.Description))
    {
      ShowErrorMessage(0);
      return;
    }

    if (!_hardskillService.CheckLengthHardskill(_hardskill.Description))
    {
      ShowErrorMessage(2);
      return;
    }
    
    var hardskill = new Hardskill
    {
      Description = _hardskill.Description,
      Uppercat = new List<string>(UpperCat),
      Subcat = null
    };

    await _hardskillService.CreateHardskill(hardskill);
    Showing();
    UpperCat.Clear();
    _hardskill.Description = "";
    await Abstract.UpdateCategorys();
    await Abstract.UpdateHardskills(hardskill.Description);
  }

  private void UpperCatList(string description)
  {
    if (UpperCat.Contains(description))
    {
      UpperCat.Remove(description);
      if(!_allCategorys.Contains(description))
        _allCategorys.Add(description);
    }
    else
    {
      if(!UpperCat.Contains(description))
        UpperCat.Add(description);
      _allCategorys.Remove(description);
    }
    StateHasChanged();
  }

  private bool IsInList(string description)
  {
    return UpperCat.Contains(description);
  }

  public void Showing()
  {
    _show = !_show;
    StateHasChanged();
  }
    
}
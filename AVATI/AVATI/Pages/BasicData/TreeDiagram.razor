@using AVATI.Data
@using System.Runtime.CompilerServices
@using System.Collections.Generic

@inject IHardskillService _hardskillService

@if (_loadPagefinished)
{
    <div class="container">
        <ul class="tree">
            <li><a class="cat" type="button" @onclick="ShowingUnder">@Description</a>
                <MudIcon Icon="@Icons.Filled.InfoOutline" Style="color: #5a6066; display: inline;" @onclick="() => { _openExplain = !_openExplain;}"/>
                  <a style="position: relative; border: none !important;">
                      <MudPopover Open="@_openExplain" Class="px-4 pt-4" Direction="Direction.Top" Style="width: 400px; height: auto;">
                          <MudText Style="font-size: 14px;"> 
                              Bei einem Klick auf eine Kategorie werden die 
                              <a style="background-color: #7a212e; color: white; border: none !important;">Unterkategorien</a>
                              des geklickten Elements eingeblendet,
                              bei einem Doppelklick werden ebenfalls die 
                              <a style="background-color: #c2364b; color: white; border: none !important;">Hardskills</a> 
                              gezeigt
                          </MudText>
                                  <MudButton Style="font-size: 14px;" OnClick="() => { _openExplain = false;}" Class="ml-auto mr-n3 mb-1" Color="MudBlazor.Color.Error">Close</MudButton>
                          </MudPopover>
                  </a>
                @if (_subcat != null && _subcat.Any())
                {
                    <TreeElement Subcats="@_subcat" ShowCategorys="@_showSubCategorys" 
                                 ShowHardskills="@_showSubHardskills" ContainsJustHardskills="@_containsJustHardskills"/>
                }
            </li>
        </ul>
    </div>
}
else
{
    <div class="d-flex flex-column align-items-start justify-content-start">
        <div class="row">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div class="row">
            <strong>Lade...</strong>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Description { get; set; }

    private List<string> _subcat = new();

    private bool _containsJustHardskills;

    private bool _containsJustCategorys;

    private bool _showSubHardskills;

    private bool _showSubCategorys;
    
    private bool _loadPagefinished;

    private bool _openExplain;

    protected override void OnInitialized()
    {
        _loadPagefinished = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        var taskCat = _hardskillService.GetHardskillCategory(Description);
        var cat = await taskCat;
        _subcat = cat.Subcat;
        _showSubHardskills = false;
        _showSubCategorys = true;
        var taskJustH = _hardskillService.ContainsJustHardskills(Description);
        _containsJustHardskills = await taskJustH;
        var taskJustC = _hardskillService.ContainsAnyHardskills(Description);
        _containsJustCategorys = !await taskJustC;
        _loadPagefinished = true;
    }

    private void ShowingUnder(){
        if (_containsJustHardskills)
        {
            _showSubCategorys = true;
            _showSubHardskills = !_showSubHardskills;
            
        } else if (_containsJustCategorys) {
            
            _showSubCategorys = !_showSubCategorys;
            _showSubHardskills = false;
            
        } else if (!_showSubCategorys) {
            
            _showSubCategorys = true;
            _showSubHardskills = false;
            
        } else if (_showSubCategorys && _showSubHardskills) {
            
            _showSubCategorys = false;
            _showSubHardskills = false;
            
        } else {
            
            _showSubCategorys = true;
            _showSubHardskills = true;
        }
        
        StateHasChanged();
    }

}
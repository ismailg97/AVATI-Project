@page "/Projektübersicht/Projektedit/AddFieldToProject"
@page "/Projektübersicht/Projektedit/AddFieldToProject/{ID:int}"
@page "/AddFieldToProject"

@using AVATI.Data
@using System.Net
@using System.Threading
@using Blazorise
@using Microsoft.AspNetCore.Http.Extensions

@inject Projectedit _projectedit
@inject JsonImport _jsonImport
@inject IProjektService _projectService
@inject IBasicDataService _basic

@if (_show)
{
    <div class="modal fade show d-block" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content bg-light">
                <div class="modal-header">
                    <h3 class="modal-title">Auswahl Branchen</h3>
                    <button type="button" class="close" data-dismiss="modal" @onclick=@Close>
                        <span aria-hidden="true">x</span>
                    </button>
                </div>
                <div class="modal-body" style="min-width: 100%">
                    <label class="font-weight-bold">Branchen zur Auswahl stehend:</label>
                    <div class="list-group col overflow-auto border-dark" style="height: 250px">
                        @foreach (var field in fields)
                        {
                            if (!_projectToEdit.Fields.Exists(e => e.Equals(field)))
                            {
                                <button type="button" class="btn btn-outline-dark" @onclick=@(() => { _projectToEdit.Fields.Add(field); })>@field</button>
                            }
                        }
                    </div>
                    <hr class="mx-2"/>                                                                                  <!--line divider -->
                    <label class="font-weight-bold ">Branchen im Projekt:</label>
                    <div class="list-group col overflow-auto text-center border-dark" style="height: 250px">
                        @foreach (var field in _projectToEdit.Fields)
                        {
                            <button type="button" class="btn btn-outline-dark" @onclick=@(() => { _projectToEdit.Fields.Remove(field); })>@field</button>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="form-group ml-5">
                        <button type="button" class="btn btn-info" data-dismiss="modal" @onclick="Close"><span class="oi oi-circle-x" aria-hidden="true"></span> Abbrechen</button>
                        <button type="button" class="btn btn-success" @onclick="(() => { Submit(ID); })"><span class="oi oi-document" aria-hidden="true"></span> Speichern</button>
                    </div>
                </div>
            </div>
        </div>


    </div>
}

@if (_show)
{
    <div class="modal-backdrop fade show"></div>
}

@code {

    [Parameter]
    public Projectedit Abstract { get; set; }
    
    [Parameter]
    public int ID { get; set; }

    Project _projectToEdit;
    private bool _show;

    private List<string> fields;
    
    public string temp { get; set; }
    

    public void Showing(int id)
    {
        ID = id;
        _show = !_show;
        _projectToEdit = _projectService.GetProject(id);
        fields = _basic.GetAllFields();
        StateHasChanged();
    }
    

    public void Close()
    {
        _show = !_show;
        StateHasChanged();
    }

    
    public void Submit(int ID)
    {
        _show = !_show;
    //Currently not implemented => Does nothing!!
        _projectService.UpdateFieldsFromProject(_projectToEdit.ProjectID, _projectToEdit.Fields);
        Abstract.Update();
        StateHasChanged();
    }


}

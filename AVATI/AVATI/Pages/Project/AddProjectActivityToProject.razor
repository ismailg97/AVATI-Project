@page "/Projektübersicht/Projektedit/AddProjectActivityToProject/{ID:int}"
@page "/Projektübersicht/Projektedit/AddProjectActivityToProject"

@using AVATI.Data

@inject IProjectActivityService _projectActivity
@inject IProjektService _projectService
@inject NavigationManager _navigationManager


<div class="modal @(_show ? "fade show" : "")" id="myModal" style="display: @(_show ? "block" : "none");">
    <div class="modal modal-dialog-scrollable modal-dialog col">
        <div class="modal-content">
            <div class="body header">
                <div class="modal-header">
                    <h5 class="modal-title">Auswahl Projekttätigkeiten</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick=@Close>
                        <span aria-hidden="true">x</span>
                    </button>
                </div>
                <div class="modal-body" style="min-width: 100%">
                    <label class="font-weight-bold">Tätigkeiten zur Auswahl stehend:</label>
                    <div class="list-group col overflow-auto border-dark" style="height: 250px">
                        @if (ActivitiesNotInProject == null)
                        {
                            <label type="button" class="btn btn-outline-info">[keine Tätigkeiten vorhanden]</label>
                        }
                        else
                        {
                            @foreach (var activity in ActivitiesNotInProject)
                            {
                                <button type="button" class="btn btn-outline-dark" @onclick=@(() => { ReverseActivity(activity); })>@activity.Description</button>
                            }
                        }
                    </div>
                    <hr class="mx-2"/> <!--line divider -->
                    <label class="font-weight-bold ">Tätigkeiten im Projekt:</label>
                    <div class="list-group col overflow-auto text-center border-dark" style="height: 250px">
                        @foreach (var activity in ActivitiesInProject)
                        {
                            <button type="button" class="btn btn-outline-dark" @onclick=@(() => { UpdateActivity(activity); })>@activity.Description</button>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="form-group">
                        <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="(() => { Showing(ID); })">Abbrechen</button>
                        <button type="button" class="btn btn-success" @onclick="(() => { Showing(ID); Submit(ID);})">Speichern</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (_show)
{
    <div class="modal-backdrop fade show"></div>
}

@code{

    [Parameter]
    public int ID { get; set; }

    public int EmployeeID { get; set; }

    private bool _show = false;
    private string Activity { get; set; }


    public List<ProjectActivity> ActivitiesNotInProject { get; set; }
    public List<ProjectActivity> ActivitiesInProject { get; set; }


    public void Showing(int Id)
    {
        ID = Id;
        _show = !_show;
        StateHasChanged();
    }

    public void Close()
    {
        _show = !_show;
        StateHasChanged();
    }

    public void Submit(int ID)
    {
        Project temp = _projectService.GetProject(ID);
        temp.ProjectActivities = ActivitiesNotInProject;
        _navigationManager.NavigateTo("/Projektübersicht/Projektedit/" + ID);
        StateHasChanged();
    }

    public void UpdateActivity(ProjectActivity activity)
    {
        if (ActivitiesInProject.Contains(activity))
        {
            ActivitiesInProject.Remove(activity);
            ActivitiesNotInProject.Add(activity);
        }
    }

    protected override void OnInitialized()
    {
        ActivitiesNotInProject = new List<ProjectActivity>(_projectActivity.GetProjectActivitiesList());
        foreach (var variable in ActivitiesNotInProject)
        {
            if (_projectService.GetProject(ID).ProjectActivities.Contains(variable))
            {
                ActivitiesNotInProject.Remove(variable);
            }
        }
        
        ActivitiesInProject = new List<ProjectActivity>(_projectService.GetProject(ID).ProjectActivities);


    }

    public void ReverseActivity(ProjectActivity activity)
    {
        if (ActivitiesNotInProject.Contains(activity))
        {
            ActivitiesNotInProject.Remove(activity);
            ActivitiesInProject.Add(activity);
        }
    }



}
@page "/Projektübersicht/Projektedit/AddProjectActivityToProject/{ID:int}"
@page "/Projektübersicht/Projektedit/AddProjectActivityToProject"

@using AVATI.Data

@inject IProjectActivityService _projectActivityService
@inject IProjektService _projectService
@inject NavigationManager _navigationManager

<AuthorizeView Roles="SalesStaff,Administrator">
    <NotAuthorized>
        @if(true){_navigationManager.NavigateTo("/profile");}
    </NotAuthorized>
    <Authorized>
 

@if (_show)
{
    <div class="modal @(_show ? "fade show" : "")" id="myModal" style="display: @(_show ? "block" : "none");">
        <div class="modal modal-dialog-scrollable modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Auswahl Projekttätigkeiten</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick=@Close>
                        <span aria-hidden="true">x</span>
                    </button>
                </div>
                <div class="modal-body" style="min-width: 100%">
                <a style="position: relative;">
                    <MudPopover Open="@_showError" Class="alert alert-danger" Style="width: 600px; height: auto; color: darkred; font-weight: 650; font-size: 14px; background-color: #f8d7da">
                        @if (_whatToShow == 0)
                        {
                            <a>Hinzufügen misslungen, Aktiviät exsistiert bereits im Projekt</a>
                        } else if (_whatToShow == 1)
                        {
                            <a>Hinzufügen misslungen, globale Aktivität exsistiert bereits!</a>
                        }
                        else if (_whatToShow == 2)
                        {
                            <a>Hinzufügen misslungen, Aktivität exsistiert bereits im Reiter "Zu entfernende Tätigkeiten"!</a>
                        }
                    </MudPopover>
                </a>
                    <div>
                        <label class="form-label">Neue Tätigkeit erstellen:</label>
                        <input class="form-control" @bind="_createActivity"/>
                        <div>
                            <label class="form-label"><a class="small">Global hinzufügen: <button type="button" class="global inline" @onclick="() => AddActivity(true)">+</button></a></label>
                            <label class="form-label"><a class="small" >Lokal hinzufügen: <button type="button" class="local inline" @onclick="() => AddActivity(false)">+</button></a></label>
                        </div>
                    </div>
                    <hr class="mx-2"/> <!--line divider -->
                    <label class="font-weight-bold ">Tätigkeiten im Projekt:</label>
                    <div class="list-group col overflow-auto text-center border-dark" style="height: 325px">
                        @foreach (var activity in _activitiesInProject)
                        {
                            if (!_projectActivityService.AlreadyExistsGlobalActivity(activity))
                            {
                                <button type="button" class="btn btn-outline-danger wordBreak" @onclick="() => RemoveOfList(activity)">@activity</button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-outline-dark wordBreak" @onclick="() => RemoveOfList(activity)">@activity</button>
                            }
                        }
                        </div>
                    
                    <label class="font-weight-bold ">Zu entfernende Tätigkeiten: </label>
                    <div class="list-group col overflow-auto text-center border-dark" style="height: 325px">
                        @foreach (var activity in _deleteActivities)
                        {
                            if (!_projectActivityService.AlreadyExistsGlobalActivity(activity))
                            {
                                <button type="button" class="btn btn-outline-danger wordBreak" @onclick=@(() => { _deleteActivities.Remove(activity); _activitiesInProject.Add(activity); })>@activity</button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-outline-dark wordBreak" @onclick=@(() => { _deleteActivities.Remove(activity); _activitiesInProject.Add(activity); })>@activity</button>
                            }
                        }
                    </div>
                    <hr class="mx-2"/> 
                    @if (_globalActivities.Any())
                    {
                        <label class="font-weight-bold">Globale Tätigkeiten zum Hinzufügen:</label>
                        <div class="list-group col overflow-auto border-dark" style="height: 325px">
                            
                            @foreach (var activity in _globalActivities)
                            {
                                if (!_activitiesInProject.Contains(activity) && !_deleteActivities.Contains(activity))
                                {
                                    <button type="button" class="btn btn-outline-dark wordBreak" @onclick=@(() => { _activitiesInProject.Add(activity); })>@activity</button>
                                }
                            }
                            
                        </div>
                        <hr class="mx-2"/>
                        <!--line divider -->
                    }
                    <div class="div float-right">
                        <button type="button" class="btn btn-info" data-dismiss="modal" @onclick="Close">Abbrechen</button>
                        <button type="button" class="btn btn-success" @onclick="Submit">Speichern</button>
                    </div>
                </div>
               

            </div>
            </div>
        </div>
}

@if (_show)
{
    <div class="modal-backdrop fade show"></div>
}

    
            
        </Authorized>
    </AuthorizeView>
    
    @code{

    [Parameter]
    public Project Project { get; set; }

    private List<string> _globalActivities;
    private List<string> _activitiesInProject;
    private List<string> _deleteActivities;
    private List<string> _addedActivities;
    private bool _show = false;

    private string _createActivity;
    private bool _showError;
    private int _whatToShow;

        [Parameter]
    public Projectedit Abstract { get; set; }
    
    public void Showing()
    {
        _whatToShow = 0;
        _showError = false;
        _deleteActivities = new List<string>();
        _addedActivities = new List<string>();
        _activitiesInProject = new List<string>(Project.ProjectActivities);
        _show = !_show;
        _globalActivities = _projectActivityService.GetAllGlobalProjectActivities();
        StateHasChanged();
        Abstract.Update();
    }

    public void Close()
    {
        _show = !_show;
        StateHasChanged();
    }
        
    private bool AlreadyExists(string description, List<string> list)
    {
        var trimDesc = description.Replace(" ", "");
        return list.Exists(x => trimDesc.Equals(x.Replace(" ", ""), StringComparison.OrdinalIgnoreCase));
    }

    public void Submit()
    {
        Project.ProjectActivities = _activitiesInProject;
        foreach (var purpose in Project.Projectpurpose)
        {
            if (!_activitiesInProject.Contains(purpose.Value))
            {
                Project.Projectpurpose[purpose.Key] = null;
            }
        }
        Abstract.Update();
        _show = !_show;
    }

    private void RemoveOfList(string activ)
    {
        if (Project.ProjectActivities.Contains(activ) || _addedActivities.Contains(activ))
        {
            if (!_deleteActivities.Contains(activ))
                _deleteActivities.Add(activ);
        } 
        _activitiesInProject.Remove(activ);
    }

    private async void ShowErrorMessage(int whatToShow)
    {
        _whatToShow = whatToShow;
        _showError = true;
        StateHasChanged();
        await Task.Delay(3000);
        _showError = false;
        StateHasChanged();
    }

        private void AddActivity(bool isGlobal)
        {
            if (AlreadyExists(_createActivity, _activitiesInProject))
            {
                ShowErrorMessage(0);
                return;
            }

            if (AlreadyExists(_createActivity, _deleteActivities))
            {
                ShowErrorMessage(2);
                return;
            }
            
            if (AlreadyExists(_createActivity, _globalActivities))
            {
                ShowErrorMessage(1);
                return;
            }

            if (isGlobal)
            {
                _projectActivityService.AddGlobalProjectActivity(_createActivity);
                _globalActivities = _projectActivityService.GetAllGlobalProjectActivities();
            }
            
            _addedActivities.Add(_createActivity);
            _activitiesInProject.Add(_createActivity);
            _createActivity = "";
            StateHasChanged();
        }

}
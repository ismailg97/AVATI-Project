@page "/AddProjectActivity"
@page "/AddProjectActivity/{ID:int}"

@using AVATI.Data
@using System.Diagnostics
@using System.ComponentModel

@inject IProjectActivityService _projectActivity
@inject IProjektService _projectService
@inject NavigationManager _navigationmanager

<div class="modal @(_show ? "fade show" : "")" id="myModal" style="display: @(_show ? "block" : "none");">
    <div class="modal modal-dialog-scrollable modal-dialog col">
        <div class="modal-content">
            <div class="body header">
                <div class="modal-header">
                    <h5 class="modal-title">Projekttätigkeit hinzufügen/löschen</h5>
                    <button type="button" class="close" data-dismiss="modal" @onclick=@Close>
                        <span aria-hidden="true">x</span>
                    </button>
                </div>
                <div class="modal-body">
                    <InputText id="projekttitel" class="form-control" @bind-Value="@temp"></InputText>
                    <button type="button" class="btn btn-success" @onclick="() => { AddActivityTProject(temp); }">+</button>
                </div>
                <div class="modal-footer" style="border-bottom: 0 none">
                    <div class="form-group mb-3">
                        <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="Showing">Cancel</button>
                        <button type="button" class="btn btn-success" @onclick="(() => { Showing(); Submit(ID);})">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (_show)
{
    <div class="modal-backdrop fade show"></div>
}

@code{

    [Parameter]
    public int ID { get; set; }

    private bool _show = false;
    public List<ProjectActivity> ActivitiestoDisplay { get; set; } = new List<ProjectActivity>();
    public List<ProjectActivity> ActivitiestoSearch { get; set; } = new List<ProjectActivity>();

   public string temp { get; set; }
    public ProjectActivity iwas { get; set; }
    public void Showing()
    {
        _show = !_show;
        StateHasChanged();
    }

    public void Close()
    {
        _show = !_show;
        StateHasChanged();
    }

    public void Submit(int ID)
    {
        Project temp = _projectService.GetProject(ID);
        temp.ProjectActivities = ActivitiestoSearch;
        _navigationmanager.NavigateTo("/Projektübersicht/Projektedit/" + ID);
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        ActivitiestoDisplay = _projectActivity.ReturnListProjectActivities(ID);
        ActivitiestoSearch = new List<ProjectActivity>(_projectActivity.ReturnListProjectActivities(ID));
    }

    public void AddActivityTProject(String input)
    {
        Project p = _projectService.GetProject(ID);
        iwas.Description = input;
        iwas.ProjectID = p.ProjectID;
        if(DESCRIPTION == INPUT)            //muss noch reinschreiben
        p.ProjectActivities.Add(iwas);
    }
}
@page "/ProjectActivities"
@using AVATI.Data

@inject IProjectActivityService _projectActivityService
@inject IProjectService _projectService
@inject NavigationManager _navigationManager

<AuthorizeView Roles="SalesStaff,Administrator">
    <NotAuthorized>
        @if(true){_navigationManager.NavigateTo("/profile");}
    </NotAuthorized>
    <Authorized Context="authContext">
        
@if (Loading)
{
    <div class="d-flex flex-column align-items-center justify-content-center">
        <div class="row">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div class="row">
            <strong>Lade...</strong>
        </div>
    </div>
}
else
{
    <EditForm Model="@Activity">
        <DataAnnotationsValidator/>
        <div class="container col">
            <h2 class="mb-3">Globale Projekttätigkeiten</h2>
            <p>Hier können Sie Tätigkeiten für Projekt hinzufügen, verwalten, editieren und löschen. Diese stehen als Auswahlmöglichkeit für alle Projekte zur Verfügung. </p>
            <hr/>
            <div class="col-auto">
                <a style="position: relative;">
                    <MudPopover Open="@ShowErrorCreate" Class="alert alert-danger text-center" Style="width: 450px; height: auto; color: darkred; font-weight: 650; font-size: 14px; background-color: #f8d7da">
                        @if (_whatToShow == 0)
                        {
                            <a>Anlegen der Tätigkeit misslungen, die Bezeichnung existiert bereits!</a>
                        }
                        else if (_whatToShow == 1)
                        {
                            <a>Anlegen der Tätigkeit misslungen, die Bezeichnung fehlt!</a>
                        } 
                        else if (_whatToShow == 2)
                        {
                            <a>Anlegen der Tätigkeit misslungen, die Bezeichnung ist zu lang (max. 150 Zeichen)!</a>
                        }
                        
                    </MudPopover>
                </a>
                <div class="form-group row">
                    <label class="col-form-label mr-2 font-weight-bold" value="@Description">Neue Tätigkeit anlegen:</label>
                    <input type="text" class="form-group form-control" style="width: auto" @bind-value="Description"/>
                    <button type="button" class="form-group btn btn-success mx-1" @onclick="(() => { AddProjectActivity(Description); })">+</button>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <input class="form-control" type="text" placeholder="Suche Aktivität..."
                                   @bind="filterSearch"
                                   @bind:event="oninput">
                        <table class="table table-hover">
                        <colgroup>
                                                    <col span="1" style="width: 90%"/><col span="1" style="width: 10%"/>
                                                </colgroup>
                            <thead class="thead-dark">
                            <tr>
                                <th scope="col">Beschreibung</th>
                                <th scope="col"class="text-right"></th>
                            </tr>
                            </thead>
                            <tbody>
                            @if (!_globalActivities.Any())
                            {
                                <tr>
                                    <td>[Keine Aktivitäten hinzugefügt!]</td>
                                </tr>
                            }
                            @foreach (var activity in _globalActivities)
                            {
                                @if (filterSearch == null || activity.Contains(filterSearch, StringComparison.OrdinalIgnoreCase))
                                {
                                    <tr>
                                        <td>@activity</td>
                                        <td>
                                            <div class="btn-group">
                                                <button type="button" class="btn btn-info text-right" @onclick="() => { ShowUpdate(activity); }">
                                                <span class="oi oi-pencil"></span>
                                            </button>
                                            <button type="button" class="btn btn-danger text-right" @onclick="(() => { ShowDelete(activity); })">
                                                <span class="oi oi-trash"></span>
                                            </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}
@if (ShowPopDelete)
{
    <div class="modal fade show mt-5" id="myModal" style=" display: inline-block;">
        <div class="modal-dialog border-dark">
            <div class="modal-content">
                <div class="modal-header flex-column">
                    <h4 class="modal-title col-12 text-center">Sind Sie sicher?</h4>
                </div>
                <div class="modal-body text-center">
                    <p>Wollen Sie das Aktivität wirklich löschen? Der Prozess kann nicht rückgängig gemacht werden!</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-info" data-dismiss="modal" @onclick="(() => { ShowPopDelete = !ShowPopDelete; })">
                        <span class="oi oi-circle-x"></span> Abbrechen
                    </button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="(() => { DeleteActivity(Description); ShowPopDelete = !ShowPopDelete;})">
                        <span class="oi oi-trash"></span>Löschen
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}
@if (ShowPopUpdate)
{
    <div class="modal fade show mt-5" id="myModal" style=" display: inline-block;">
        <div class="modal-dialog border-dark">
            <div class="modal-content">
                <div class="modal-header flex-column">
                    <h4 class="modal-title col-12 text-center">Aktivität bearbeiten</h4>
                </div>
                <div class="modal-body text-center">
                    <p>Hier können Sie eine bereits vorhandene Tätigkeiten umbenennen.</p>
                    <p>
                        <text class="font-weight-bold">Achtung!</text>
                    </p>
                    <p>Die Tätigkeit, die hier geändert wird, verbleibt im Projekt, kann aber nicht mehr gelöscht und dann wieder hinzugefügt werden.</p>
                    <a style="position: relative;">
                        <MudPopover Open="@ShowErrorEdit" Class="alert alert-danger text-center" Style="width: 400px; height: auto; color: darkred; font-weight: 650; font-size: 14px; background-color: #f8d7da">
                            @if (_whatToShow == 0)
                            {
                                <a>Editieren der Tätigkeit misslungen, die Bezeichnung existiert bereits!</a>
                            }
                            else if (_whatToShow == 1)
                            {
                                <a>Editieren der Tätigkeit misslungen, die Bezeichnung fehlt!</a>
                            } 
                            else if (_whatToShow == 2)
                            {
                                <a>Editieren der Tätigkeit misslungen, die Bezeichnung ist zu lang (max. 150 Zeichen)!</a>
                            }
                        </MudPopover>
                    </a>
                    <input class="form-control mb-2" @bind=@Description>
                    <div class="btn-group">
                        <button type="button" class="btn btn-info" data-dismiss="modal" @onclick="(() => { ShowPopUpdate = !ShowPopUpdate; })">
                            <span class="oi oi-circle-x" aria-hidden="true"></span> Abbrechen
                        </button>
                        <button type="button" class="btn btn-success" data-dismiss="modal" @onclick="(() => { UpdateActivity(OldDescription, Description);})">
                            <span class="oi oi-document" aria-hidden="true"></span> Speichern
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

        </Authorized>
    </AuthorizeView>
    
    
    @code {

    public string Description { get; set; }
    private ProjectActivity Activity { get; set; } = new ProjectActivity();
    private bool Loading = false;
    public string OldDescription;
    public bool ShowPopDelete { get; set; }
    public bool ShowPopUpdate { get; set; }
        public bool ShowErrorCreate;
        public bool ShowErrorEdit;

        private int _whatToShow;
        private List<string> _globalActivities; 

        private string filterSearch { get; set; }

    protected override void OnInitialized()
    {
        _whatToShow = -1;
        _globalActivities = _projectActivityService.GetAllGlobalProjectActivities();
        ShowErrorCreate = false;
        ShowErrorEdit = false;
    }
        
    private async void ShowErrorMessage(bool isCreate, int whatToShow)
    {
        _whatToShow = whatToShow;
        if (isCreate)
        {
            ShowErrorCreate = true;
            StateHasChanged();
            await Task.Delay(3000);
            ShowErrorCreate = false;
            StateHasChanged();
        }
        else
        {
            ShowErrorEdit = true;
            StateHasChanged();
            await Task.Delay(3000);
            ShowErrorEdit = false;
            StateHasChanged();
        }

    }

        private bool AlreadyExists(string description)
        {
            var trimDesc = description.Replace(" ", "");
            return _globalActivities.Exists(x => trimDesc.Equals(x.Replace(" ", ""), StringComparison.OrdinalIgnoreCase));
        }

        public void AddProjectActivity(string description)
        {
            if (string.IsNullOrEmpty(description) || string.IsNullOrWhiteSpace(description))
            {
                ShowErrorMessage(true, 1);
                return;
            }
            
            if (description.Length > 150)
            {
                ShowErrorMessage(true, 2);
                return;
            }
            
            if (AlreadyExists(description))
            {
                ShowErrorMessage(true, 0);
                return;
            }
            _projectActivityService.AddGlobalProjectActivity(description);
            Description = "";
            _globalActivities = _projectActivityService.GetAllGlobalProjectActivities();
            StateHasChanged();
        }

    public void UpdateActivity(string old, string newstring)
    {
        if (old == newstring)
        {
            ShowPopUpdate = !ShowPopUpdate;
            return;
        }
        
        if (string.IsNullOrEmpty(newstring) || string.IsNullOrWhiteSpace(newstring))
        {
            ShowErrorMessage(false, 1);
            return;
        }
            
        if (newstring.Length > 150)
        {
            ShowErrorMessage(false, 2);
            return;
        }
        
        if (AlreadyExists(newstring))
        {
            ShowErrorMessage(false, 0);
            return;
        }
        _projectActivityService.UpdateGlobalProjectActivity(old, newstring);
        _globalActivities = _projectActivityService.GetAllGlobalProjectActivities();
        ShowPopUpdate = !ShowPopUpdate;
        StateHasChanged();
    }

    private void ShowDelete(string description)
    {
        if (!ShowPopDelete)
        {
            Description = description;
        }

        ShowPopDelete = !ShowPopDelete;
    }

    private void ShowUpdate(string description)
    {
        if (!ShowPopUpdate)
        {
            Description = description;
            OldDescription = description;
        }

        ShowPopUpdate = !ShowPopUpdate;
    }

    public void DeleteActivity(string description)
    {
        _projectActivityService.DeleteGlobalProjectActivity(description);
        _globalActivities = _projectActivityService.GetAllGlobalProjectActivities();
        StateHasChanged();
    }


}
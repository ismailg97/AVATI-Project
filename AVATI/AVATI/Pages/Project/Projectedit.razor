@page "/Projektübersicht/Projektedit"
@page "/Projektübersicht/Projektedit/{ID:int}"

@using AVATI.Data
@inject IProjektService _projectService
@inject NavigationManager _navigationManager
@inject IProjectActivityService _projectActivity
@inject ProjectPurposeService _projectPurposeService
@inject IEmployeeService _employeeService

<AddFieldToProject @ref="_addFieldToProject" Abstract="@this"/>
<AddProjectActivityToProject @ref="_addProjectActivityToProject" Abstract="@this"/>
<AddEmployeeToProject @ref="_addEmployeeToProject" Abstract="@this"/>
<PopAddProjectPurposeToProject @ref="_popAddProjectPurpose" Abstract="@this"/>
<AddActivityToPurpose @ref="_popProjectActivityToPurpose" Abstract="@this"/>
<AlterPurposeName @ref="_popAlterPurposeName" Abstract="@this"/>

@if (Loading)
{
    <div class="d-flex flex-column align-items-center justify-content-center">
        <div class="row">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div class="row">
            <strong>Lade...</strong>
        </div>
    </div>
}
else
{
    <EditForm Model="@Project" OnValidSubmit="@Save">
    <DataAnnotationsValidator/>
    <div class="row col h-100">
    <div class="text-left col">
    <div class="column">
        <h3 class="text-lg-left font-weight-bold">Projekt: <em> @Project.Projecttitel</em></h3>
        <div class="form-group row">
            <label class="col-sm-3 col-form-label font-weight-bold">Titel</label>
            <div class="col-sm-9">
                <InputText id="projekttitel" class="form-control" @bind-Value="Project.Projecttitel" required></InputText>
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-3 col-form-label font-weight-bold">Beschreibung</label>
            <div class="col-sm-9">
                <textarea id="projektbeschreibung" class="form-control" @bind="Project.Projectdescription"></textarea>
            </div>
        </div>

        <!-- BRANCHEN -------------------------------------------------------------------------------------------->

        <div class="form-group row">
            <label class="col-sm-3 col-form-label font-weight-bold">Branchen</label>
            <div class="col-sm-6 col-form-label">
                <div class="list-group border-dark border overflow-auto" style="max-height: 200px">
                    @if (!Project.Fields.Any())
                    {
                        <button class="btn btn-outline-dark">[Keine Branche dem Projekt zugewiesen]</button>
                    }
                    @foreach (var branche in Project.Fields)
                    {
                        <button type="button" class="btn btn-outline-dark">@branche</button>
                    }
                </div>
                <button class="btn btn-info col" type="button" @onclick="() => { PopAddFieldToProject(); }">
                    <span class="oi oi-pencil" title="Edit" aria-hidden="true"></span> Edit Branchen
                </button>
            </div>
        </div>

        <!-- ZEITEN -------------------------------------------------------------------------------------------------------------------------------------->

        <div class="form-group row">
            <label class="col-sm-3 col-form-label font-weight-bold">Startzeitpunkt</label>
            <div class="col-sm col-form-label">
                <div class="row col input-group" id="datetimepicker1">
                    <InputDate class="form-control col-3" @bind-Value="@Project.Projectbeginning"></InputDate>
                </div>
            </div>
        </div>
        <div class="form-group row">
            <label class="col-sm-3 col-form-label font-weight-bold">Endzeitpunkt</label>
            <div class="col-sm col-form-label">
                <div class="row col">
                    <InputDate class="form-control col-3" @bind-Value="@Project.Projectend"></InputDate>
                </div>
            </div>
        </div>
    </div>

    <!-- Mitarbeiter ------------------------------------------------------------------------------------------------->

    <div class="form-group row">
        <label class="col-sm-3 col-form-label font-weight-bold">Mitarbeiter</label>
        <table class="table border-primary col">
            <thead>
            <tr>
                <th scope="col" style="width: 50%">Mitarbeiter</th>
                <th>
                    <div class="form-group text-right">
                        <button type="button" class="btn btn-info text-right" @onclick="() => { PopAddEmployeeToProject(ID); }">+ Mitarbeiter</button>
                    </div>
                </th>
            </tr>
            </thead>
            <tbody>
            @if (!Project.Employees.Any())
            {
                <tr>
                    <td>[Weisen Sie Mitarbeiter dem Projekt zu!]</td>
                    <td></td>
                </tr>
            }
            @foreach (var emp in Project.Employees)
            {
                <tr>
                    <td>@emp.FirstName @emp.LastName</td>
                    <td>
                        <button type="button" class="btn btn-danger" @onclick="() => { PopUpDeleteEmployee(emp); }">
                            <span class="oi oi-trash" aria-hidden="true"></span>
                        </button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    <!-- Projekttätigkeiten ------------------------------------------------------------------------------------------------->

    <div class="form-group row">
        <label class="col-sm-3 col-form-label font-weight-bold">Projekttätigkeiten</label>
        <table class="table border-primary col">
            <thead>
            <th scope="col">Tätigkeit</th>
            <th scope="col">Zugewiesene Mitarbeiter</th>
            <th scope="col">
                <div class="form-group text-right">
                    <button type="button" class="btn btn-info text-right" @onclick="(() => { PopAddActivity(ID); })">
                        <span class="oi oi-pencil" title="Edit" aria-hidden="true"></span> Projekttätigkeit
                    </button>
                </div>
            </th>
            </thead>
            <tbody>
            @if (!_projectActivity.GetActivitiesDesOfProject(ID).Any())
            {
                <tr>
                    <td>[Weisen Sie dem Projekt passende Projekttätigkeiten zu!]</td>
                    <td></td>
                    <td></td>
                </tr>
            }
            @foreach (var activity in _projectActivitiesWithEmp.Keys)
            {
                <tr>
                    <td>@activity</td>
                    <td>
                        @if (_projectActivitiesWithEmp[activity].Any())
                        {
                            <ul class="text-left">
                                @foreach (var employeeId in _projectActivitiesWithEmp[activity])
                                {
                                    var employee = _employeeService.GetEmployeeProfile(employeeId);

                                    <li>@employee.FirstName @employee.LastName</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <a>[Kein Mitarbeiter hat sich zugewiesen!]</a>
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    <!-- PROJEKTZWECKE ------------------------------------------------------------------------------------------------------->

    <div class="form-group row">
        <label class="col-sm-3 col-form-label font-weight-bold">Projektzwecke</label>
        <table class="table border-primary col">
            <thead>
            <th scope="col">Zweck</th>
            <th scope="col"></th>
            <th scope="col">Gelöst durch...</th>
            <th scope="col"></th>
            <th scope="col">
                <div class="form-group text-right">
                    <button type="button" class="btn btn-info text-right" @onclick="(() => { AddProjectPurposeToProject(ID); })">+ Projektzweck</button>
                </div>
            </th>
            </thead>
            <tbody>
            @if (!_projectPurposeService.GettAllPurposesFromProject(ID).Any())
            {
                <tr>
                    <td>[Fügen Sie neue Projektzwecke hinzu!]</td>
                    <td></td>
                    <td></td>
                </tr>
            }
            @foreach (var purpose in _projectPurposeService.GettAllPurposesFromProject(ID))
            {
                <tr>
                    <td>@purpose.Purpose</td>
                    <td>
                        <button type="button" class="btn btn-info" @onclick="() => { PopAlterPurposeName(purpose); }">
                            <!-- modal fenster hinzufügen -->
                            <span class="oi oi-pencil" title="Edit" aria-hidden="true"></span> Edit
                        </button>
                        <button type="button" class="btn btn-danger" @onclick="() => { ShowModalPopDeletePurpsoe(purpose); }">
                            <span class="oi oi-trash" aria-hidden="true"></span>
                        </button>

                    </td>
                    @if (_projectActivity.GetProjectActivityForPurpose(purpose.Purpose) == null)
                    {
                        <td>[Noch durch keine Projekttätigkeit gelöst!]</td>
                        <td></td>
                        <td>
                            <button type="button" class="btn btn-info" @onclick="() => { AddPurposeToActivity(purpose); }">
                                <span class="oi oi-pencil" title="Edit" aria-hidden="true"></span> Edit
                            </button>
                        </td>
                    }
                    else 
                    {
                        <td>@_projectActivity.GetProjectActivityForPurpose(purpose.Purpose)</td>
                        <td></td>
                        <td>
                            <button type="button" class="btn btn-info" @onclick="() => { AddPurposeToActivity(purpose); }">
                                <span class="oi oi-pencil" title="Edit" aria-hidden="true"></span> Edit
                            </button>
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
    <ValidationSummary/>
    <div class="form-group text-right">
        <button type="submit" class="btn btn-success">
            <span class="oi oi-document" aria-hidden="true"></span> Zurück zur Übersicht
        </button>
    </div>
    </div>
    </div>
    </EditForm>
}

@if (ShowPopDeleteEmployee)
{
    <div class="modal fade show mt-5" id="myModal" style=" display: inline-block;">
        <div class="modal-dialog border-dark">
            <div class="modal-content">
                <div class="modal-header flex-column">
                    <h4 class="modal-title col-12 text-center">Sind Sie sicher?</h4>
                </div>
                <div class="modal-body text-center">
                    <p>Wollen Sie <b>@EmployeeToDelete.FirstName @EmployeeToDelete.LastName</b> wirklich aus dem Projekt entfernen?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-info" data-dismiss="modal" @onclick="(() => { ShowPopDeleteEmployee = !ShowPopDeleteEmployee; })">
                        <span class="oi oi-circle-x"></span> Abbrechen
                    </button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="(() => { DeleteFromProjectEmployee(Project.ProjectID, EmployeeToDelete); Update(); ShowPopDeleteEmployee = !ShowPopDeleteEmployee;})">
                        <span class="oi oi-trash"></span>Löschen
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}
@if (ShowPopDeletePurpsoe)
{
    <div class="modal fade show mt-5" id="myModal" style=" display: inline-block;">
        <div class="modal-dialog border-dark">
            <div class="modal-content">
                <div class="modal-header flex-column">
                    <h4 class="modal-title col-12 text-center">Sind Sie sicher?</h4>
                </div>
                <div class="modal-body text-center">
                    <p>Wollen Sie <b>@PurposeToDelete.Purpose</b> wirklich aus dem Projekt entfernen?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-info" data-dismiss="modal" @onclick="(() => { ShowPopDeletePurpsoe = !ShowPopDeletePurpsoe; })">
                        <span class="oi oi-circle-x"></span> Abbrechen
                    </button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="(() => { DeleteFromProjectPurpose(PurposeToDelete); Update(); ShowPopDeletePurpsoe = !ShowPopDeletePurpsoe;})">
                        <span class="oi oi-trash"></span>Löschen
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}



@code {
    private Project Project { get; set; } = new Project();

    AddFieldToProject _addFieldToProject;
    AddProjectActivityToProject _addProjectActivityToProject;
    AddEmployeeToProject _addEmployeeToProject;
    PopAddProjectPurposeToProject _popAddProjectPurpose;
    AddActivityToPurpose _popProjectActivityToPurpose;
    AlterPurposeName _popAlterPurposeName;

    public Employee EmployeeToDelete { get; set; }
    public bool ShowPopDeleteEmployee = false;

    public ProjectPurpose PurposeToDelete { get; set; }
    public bool ShowPopDeletePurpsoe = false;

    public List<string> Activitieslist { get; set; } = new ();

    private Dictionary<string, List<int>> _projectActivitiesWithEmp;


    [Parameter]
    public int ID { get; set; }

    private bool Loading = false;
    public DateTime time { get; set; }
    public string field { get; set; }
    public List<string> FieldstoDisplay { get; set; }

    private void Save()
    {
        Project.ProjectID = ID;
        _projectService.UpdateProject(Project);
        _navigationManager.NavigateTo("/Projektübersicht");
        StateHasChanged();
    }

    public void PopAddFieldToProject()
    {
        _addFieldToProject.Showing(ID);
        StateHasChanged();
    }

    public void PopAddProjectActivity(int ID)
    {
        _addProjectActivityToProject.Showing(ID);
        StateHasChanged();
    }

    public void PopAlterPurposeName(ProjectPurpose purpose)
    {
        _popAlterPurposeName.Showing(purpose);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _projectActivitiesWithEmp = _projectActivity.GetActivitiesWithEmployeesGrouped(ID);
        Activitieslist = _projectActivity.GetActivitiesDesOfProject(ID);
        Project = _projectService.GetProject(ID);
    }

    public void PopAddActivity(int ID)
    {
        _addProjectActivityToProject.Showing(ID);
        StateHasChanged();
    }

    public async void PopAddEmployeeToProject(int ID)
    {
        Loading = true;
        await _addEmployeeToProject.Showing(ID);
        Loading = false;
        StateHasChanged();
    }

    public void DeleteFromProjectEmployee(int ProjectId, Employee emp)
    {
        _projectService.DeleteEmployeeFromProject(ProjectId, emp.EmployeeID);
        StateHasChanged();
    }

    public void DeleteFromProjectPurpose(ProjectPurpose purpose)
    {
        _projectPurposeService.DeletePurpose(purpose);
        StateHasChanged();
    }

    public void AddProjectPurposeToProject(int ProjectID)
    {
        _popAddProjectPurpose.Showing(ID);
        StateHasChanged();
    }

    public void UpdatePurpose(ProjectPurpose purpose)
    {
        _projectPurposeService.UpdatePurposeString(null, null, 7);
        StateHasChanged();
    }

    public void AddPurposeToActivity(ProjectPurpose purpose)
    {
        _popProjectActivityToPurpose.Showing(purpose, ID);
        StateHasChanged();
    }

    public void Update()
    {
        Activitieslist = _projectActivity.GetActivitiesDesOfProject(ID);
        Project = _projectService.GetProject(ID);
        StateHasChanged();
    }

    public void NavigateToProjectoverview()
    {
        _navigationManager.NavigateTo("/Projektübersicht");
    }

    public void PopUpDeleteEmployee(Employee emp)
    {
        EmployeeToDelete = emp;
        ShowPopDeleteEmployee = !ShowPopDeleteEmployee;
    }

    public void ShowModalPopDeletePurpsoe(ProjectPurpose purp)
    {
        PurposeToDelete = purp;
        ShowPopDeletePurpsoe = !ShowPopDeletePurpsoe;
    }

}
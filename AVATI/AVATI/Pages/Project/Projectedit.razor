@page "/Projektübersicht/Projektedit"
@page "/Projektübersicht/Projektedit/{ID:int}"

@using AVATI.Data
@using DocumentFormat.OpenXml.Drawing
@inject IProjektService _projectService
@inject NavigationManager _navigationManager
@inject IProjectActivityService _projectActivity
@inject IEmployeeService _employeeService

<AuthorizeView Roles="SalesStaff,Administrator">
<NotAuthorized>
    @if (true)
    {
        _navigationManager.NavigateTo("/profile");
    }
</NotAuthorized>
<Authorized Context="authContext">

<AddFieldToProject @ref="_addFieldToProject" Project="@Project" Abstract="@this"/>
<AddEmployeeToProject @ref="_addEmployeeToProject" Project="@Project" Abstract="@this"/>
<AddProjectActivityToProject @ref="_addProjectActivityToProject" Project="@Project" Abstract="@this"/>

@if (Loading)
{
    <div class="d-flex flex-column align-items-center justify-content-center">
        <div class="row">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div class="row">
            <strong>Lade...</strong>
        </div>
    </div>
}
else
{
    <EditForm Model="@Project" OnValidSubmit="@Save">
    <DataAnnotationsValidator/>
    <div class="row col h-100">
    <div class="text-left col">
    <div class="column">
        <h3 class="text-lg-left font-weight-bold">Projekt: <em> @oldTitle</em></h3>
        <hr/>
        <div class="form-group row">
            <label class="col-sm-3 col-form-label font-weight-bold">Titel</label>
            <div class="col-sm-9">
                <InputText id="projekttitel" class="form-control" @bind-Value="Project.Projecttitel" required></InputText>
            </div>
        </div>

        <div class="form-group row">
            <label class="col-sm-3 col-form-label font-weight-bold">Beschreibung</label>
            <div class="col-sm-9">
                <textarea id="projektbeschreibung" class="form-control" @bind="Project.Projectdescription"></textarea>
            </div>
        </div>

        <!-- BRANCHEN -------------------------------------------------------------------------------------------->

        <div class="form-group row">
            <label class="col-sm-3 col-form-label font-weight-bold">Branchen</label>
            <div class="col-sm-6 col-form-label">
                <div class="list-group border-dark border overflow-auto" style="max-height: 200px">
                    @if (!Project.Fields.Any())
                    {
                        <button class="btn btn-outline-dark">[Keine Branche dem Projekt zugewiesen]</button>
                    }
                    @foreach (var branche in Project.Fields)
                    {
                        <button type="button" class="btn btn-outline-dark">@branche</button>
                    }
                </div>
                <button class="btn btn-info col" type="button" @onclick="() => { PopAddFieldToProject(); }">
                    <span class="oi oi-pencil" title="Edit" aria-hidden="true"></span> Edit Branchen
                </button>
            </div>
        </div>

        <!-- ZEITEN -------------------------------------------------------------------------------------------------------------------------------------->

        <div class="form-group row">
            <label class="col-sm-3 col-form-label font-weight-bold">Startzeitpunkt</label>
            <div class="col-sm col-form-label">
                <div class="row col input-group" id="datetimepicker1">
                    <InputDate class="form-control col-3" @bind-Value="@Project.Projectbeginning"></InputDate>
                </div>
            </div>
        </div>
        <div class="form-group row">
            <label class="col-sm-3 col-form-label font-weight-bold">Endzeitpunkt</label>
            <div class="col-sm col-form-label">
                <div class="row col">
                    <InputDate class="form-control col-3" @bind-Value="@Project.Projectend"></InputDate>
                </div>
            </div>
        </div>
    </div>

    <!-- Mitarbeiter ------------------------------------------------------------------------------------------------->

    <div class="form-group row">
        <label class="col-sm-3 col-form-label font-weight-bold">Mitarbeiter</label>
        <table class="table border-primary col">
            <colgroup>
                            <col span="1" style="width: 50%"/><col span="1" style="width: 30%"/><col span="1" style="width: 20%"/>
                        </colgroup>
            <thead class="thead-dark">
            <tr>
                <th scope="col" style="width: 50%">Mitarbeiter</th>
                <th></th>
                <th>
                    <div class="form-group m-0 p-0 text-right">
                        <button type="button" class="btn btn-info text-right" @onclick="async () => { await _addEmployeeToProject.Showing(); }">+ Mitarbeiter</button>
                    </div>
                </th>
                
            </tr>
            </thead>
            <tbody>
            @if (!Project.Employees.Any())
            {
                <tr>
                    <td>[Weisen Sie Mitarbeiter dem Projekt zu!]</td>
                    <td></td>
                    <td></td>
                </tr>
            }
            @foreach (var emp in Project.Employees)
            {
                <tr>
                    <td>@emp.FirstName @emp.LastName</td>
                    <td></td>
                    <td>
                        <button type="button" class="btn btn-danger" @onclick="() => { PopUpDeleteConfirmationEmployee(emp); }">
                            <span class="oi oi-trash" aria-hidden="true"></span>
                        </button>
                    </td>
                    
                </tr>
            }
            </tbody>
        </table>
    </div>

    <!-- Projekttätigkeiten ------------------------------------------------------------------------------------------------->

    <div class="form-group row">
        <label class="col-sm-3 col-form-label font-weight-bold">Projekttätigkeiten</label>
        <table class="table border-primary col">
            <colgroup>
                            <col span="1" style="width: 30%"/><col span="1" style="width: 50%"/><col span="1" style="width: 20%"/>
                        </colgroup>
            <thead class="thead-dark">
            <th scope="col">Tätigkeit</th>
            <th scope="col">Zugewiesene Mitarbeiter</th>
            <th scope="col">
                <div class="form-group m-0 p-0 text-right">
                    <button type="button" class="btn btn-info text-right" @onclick="() => { _addProjectActivityToProject.Showing(); }">
                        <span class="oi oi-pencil" title="Edit" aria-hidden="true"></span> Projekttätigkeit
                    </button>
                </div>
            </th>
            </thead>
            <tbody>
            @if (!Project.ProjectActivities.Any())
            {
                <tr>
                    <td>[Weisen Sie dem Projekt passende Projekttätigkeiten zu!]</td>
                    <td></td>
                    <td></td>
                </tr>
            }
            @foreach (var activity in Project.ProjectActivities)
            {
                <tr>
                    <td>@activity</td>
                    <td>
                        @if (_projectActivitiesWithEmp.ContainsKey(activity) && _projectActivitiesWithEmp[activity].Any())
                        {
                            <ul class="text-left">
                                @foreach (var employeeId in _projectActivitiesWithEmp[activity])
                                {
                                    var employee = _employeeService.GetEmployeeProfile(employeeId);

                                    <li>@employee.FirstName @employee.LastName</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <a>[Kein Mitarbeiter hat sich zugewiesen!]</a>
                        }
                    </td>
                    <td></td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    <!-- PROJEKTZWECKE ------------------------------------------------------------------------------------------------------->

    <div class="form-group row">
        <label class="col-sm-3 col-form-label font-weight-bold">Projektzwecke</label>
        <a style="position: relative;">
                    <MudPopover Open="@_showErrorPurpose" Class="alert alert-danger" Style="width: 600px; height: auto; color: darkred; font-weight: 650; font-size: 14px; background-color: #f8d7da">
                             Hinzufügen bzw. Ändern des Zwecks misslungen, Bezeichnung existiert bereits!
                    </MudPopover>
                </a>
        <table class="table border-primary col">
            <thead class="thead-dark">
            <th scope="col">Zweck</th>
            <th scope="col">Gelöst durch...</th>
            <th scope="col"></th>
            <th scope="col">
                @if (!_showAddPurpose)
                {
                    <div class="form-group p-0 m-0 text-right">
                        <button type="button" class="btn btn-info text-right" @onclick="() => { _showAddPurpose = true; }">+ Projektzweck</button>
                    </div>
                }
            </th>
            </thead>
            <tbody>
            @if (!Project.Projectpurpose.Any() && !_showAddPurpose)
            {
                <tr>
                    <td>[Fügen Sie neue Projektzwecke hinzu!]</td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
            }
            else if (_showAddPurpose)
            {
                <tr>
                    <td>
                        <input class="form-control col-5" @bind="_newPurposeKey"/>
                    </td>
                    <td>
                        <select class="form-control col-5" @bind="_newPurposeValue">
                            @{ string empty = ""; }
                            <option value="@empty">[Keine Projekttätigkeit]</option>
                            @foreach (var activity in Project.ProjectActivities)
                            {
                                <option value="@activity">@activity</option>
                            }
                        </select>
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger" @onclick="StopAddingPurpose">
                            <span class="oi oi-circle-x" aria-hidden="true"></span>
                        </button>
                    </td>
                    <td>
                        <button type="button" class="btn btn-success" @onclick="AddPurpose">
                            <span class="oi oi-document" aria-hidden="true"></span>
                        </button>
                    </td>

                </tr>
            }
            @foreach (var purpose in Project.Projectpurpose)
            {
                if (!_showEditPurpose[purpose.Key])
                {
                    <tr>
                        <td>@purpose.Key</td>
                        @if (purpose.Value == null)
                        {
                            <td>[Noch durch keine Projekttätigkeit gelöst!]</td>
                        }
                        else
                        {
                            <td>@purpose.Value</td>
                        }

                        <td>
                            <button type="button" class="btn btn-secondary" @onclick="() => { _showEditPurpose[purpose.Key] = true; }">
                                <span class="oi oi-pencil" title="Edit" aria-hidden="true"></span>
                            </button>
                        </td>
                        <td>
                            <button type="button" class="btn btn-danger" @onclick="() => Project.Projectpurpose.Remove(purpose.Key)">
                                <span class="oi oi-trash" aria-hidden="true"></span>
                            </button>
                        </td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>
                            <input class="form-control col-5" @bind="_purposeKeyEdit[purpose.Key]"/>
                        </td>
                        <td>
                            <select class="form-control col-5" @bind="_purposeValueEdit[purpose.Key]">
                                @{ string empty = ""; }
                                <option value="@empty">[Keine Projekttätigkeit]</option>
                                @foreach (var activity in Project.ProjectActivities)
                                {
                                    <option value="@activity">@activity</option>
                                }
                            </select>
                        </td>
                        <td>
                            <button type="button" class="btn btn-success" @onclick="() => { EditPurpose(purpose.Key); }">
                                <span class="oi oi-document" aria-hidden="true"></span>
                            </button>
                        </td>
                        <td>
                            <button type="button" class="btn btn-danger" @onclick="() => { _showEditPurpose[purpose.Key] = false; _purposeKeyEdit[purpose.Key] = purpose.Key; _purposeValueEdit[purpose.Key] = purpose.Value;}">
                                <span class="oi oi-circle-x" aria-hidden="true"></span>
                            </button>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
    </div>
    <ValidationSummary/>
    <div class="form-group text-right">
        <button type="button" class="btn btn-danger" @onclick="NavigateToProjectoverview">
            <span class="oi oi-circle-x" aria-hidden="true"></span> Abbrechen
        </button>
        <button type="submit" class="btn btn-success" @onclick="() => _show = !_show">
            <span class="oi oi-document" aria-hidden="true"></span> Speichern
        </button>
    </div>
    </div>
    </div>
    </EditForm>
}

@if (_show)
{
    <div class="modal fade show d-block" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content bg-light">
                <div class="modal-header">
                    <h3 class="modal-title">Sind Sie sicher?</h3>
                    <button type="button" class="close" data-dismiss="modal" @onclick="Showing">
                        <span aria-hidden="true">x</span>
                    </button>
                </div>
                <div class="modal-body">
                        <label>Wollen Sie Ihre Änderungen für "@Project.Projecttitel" übernehmen?</label>
                    </div>
                <div class="modal-footer">
                    <div class="form-group ml-5">
                        <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="Showing"><span class="oi oi-circle-x" aria-hidden="true"></span> Nein</button>
                        <button type="submit" class="btn btn-success" @onclick="() => { NavigateToProjectoverview(); _projectService.UpdateProject(Project); }"><span class="oi oi-document" aria-hidden="true"></span> Ja</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@if (_showDeleteConfirmation)
{
    <div class="modal fade show d-block" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content bg-light">
                <div class="modal-header">
                    <h3 class="modal-title">Sind Sie sicher?</h3>
                    <button type="button" class="close" data-dismiss="modal" @onclick="Showing2">
                        <span aria-hidden="true">x</span>
                    </button>
                </div>
                <div class="modal-body">
                        <label>Wollen Sie "@EmployeeToDelete.FirstName @EmployeeToDelete.LastName" wirklich aus dem Projekt löschen?</label>
                    </div>
                <div class="modal-footer">
                    <div class="form-group ml-5">
                        <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="Showing2"><span class="oi oi-circle-x" aria-hidden="true"></span> Nein</button>
                        <button type="submit" class="btn btn-success" @onclick="() => { DeleteEmployee(EmployeeToDelete); _showDeleteConfirmation = !_showDeleteConfirmation; }"><span class="oi oi-document" aria-hidden="true"></span> Ja</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (_show)
{
    <div class="modal-backdrop fade show"></div>
}
@if (_showDeleteConfirmation)
{
    <div class="modal-backdrop fade show"></div>
}


</Authorized>
</AuthorizeView>


@code {
    private Project Project { get; set; } = new Project();

    AddFieldToProject _addFieldToProject;
    AddEmployeeToProject _addEmployeeToProject;
    AddProjectActivityToProject _addProjectActivityToProject;

    public List<string> Activitieslist { get; set; } = new();

    private bool _showErrorPurpose;
    private bool _showAddPurpose;
    private string _newPurposeKey;
    private string _newPurposeValue;

    private Dictionary<string, bool> _showEditPurpose;
    private Dictionary<string, string> _purposeKeyEdit;
    private Dictionary<string, string> _purposeValueEdit;

    private Dictionary<string, List<int>> _projectActivitiesWithEmp;


    [Parameter]
    public int ID { get; set; }

    private string oldTitle;

    private bool Loading = false;
    public DateTime time { get; set; }
    public string field { get; set; }
    public List<string> FieldstoDisplay { get; set; }
    
    //modal windows 
    public bool _show = false;
    public Employee EmployeeToDelete { get; set; }
    private bool _showDeleteConfirmation = false;
    

    private void Save()
    {
        _projectService.UpdateProject(Project);
        StateHasChanged();
    }

    public void PopAddFieldToProject()
    {
        _addFieldToProject.Showing();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _showErrorPurpose = false;
        _showAddPurpose = false;
        _showEditPurpose = new Dictionary<string, bool>();
        _purposeKeyEdit = new Dictionary<string, string>();
        _purposeValueEdit = new Dictionary<string, string>();

        oldTitle = _projectService.GetProject(ID).Projecttitel;
        _projectActivitiesWithEmp = _projectActivity.GetActivitiesWithEmployeesGrouped(ID);
        Activitieslist = _projectActivity.GetActivitiesDesOfProject(ID);
        Project = _projectService.GetProject(ID);
        foreach (var purpose in Project.Projectpurpose)
        {
            _purposeKeyEdit.TryAdd(purpose.Key, purpose.Key);
            _purposeValueEdit.TryAdd(purpose.Key, purpose.Value);
            _showEditPurpose.TryAdd(purpose.Key, false);
        }
    }

    public async void PopAddEmployeeToProject()
    {
        Loading = true;
        await _addEmployeeToProject.Showing();
        Loading = false;
        StateHasChanged();
    }

    public void Update()
    {
        StateHasChanged();
    }

    public void NavigateToProjectoverview()
    {
        _navigationManager.NavigateTo("/Projektübersicht");
    }
    
    private bool AlreadyExists(string description)
    {
        var list = Project.Projectpurpose.Keys.ToList();
        var trimDesc = description.Replace(" ", "");
        return list.Exists(x => trimDesc.Equals(x.Replace(" ", ""), StringComparison.OrdinalIgnoreCase));
    }

    private async void EditPurpose(string purpose)
    {
        var newKey = _purposeKeyEdit[purpose];
        var newValue = _purposeValueEdit[purpose] == "" ? null : _purposeValueEdit[purpose];
        if (newKey == purpose)
        {
            Project.Projectpurpose[purpose] = newValue;
            _showEditPurpose[purpose] = false;
            StateHasChanged();
            return;
        }
        
        if (AlreadyExists(newKey))
        {
            _showErrorPurpose = true;
            StateHasChanged();
            await Task.Delay(3000);
            _showErrorPurpose = false;
            StateHasChanged();
            return;
        }
        Project.Projectpurpose.TryAdd(newKey, newValue);
        _showEditPurpose.TryAdd(newKey, false);
        _purposeKeyEdit.TryAdd(newKey, newKey);
        _purposeValueEdit.TryAdd(newKey, newValue);
        Project.Projectpurpose.Remove(purpose);
        _showEditPurpose.Remove(purpose);
        _purposeKeyEdit.Remove(purpose);
        _purposeValueEdit.Remove(purpose);
        StateHasChanged();
    }

    private async void AddPurpose()
    {
        if (AlreadyExists(_newPurposeKey))
        {
            _showErrorPurpose = true;
            StateHasChanged();
            await Task.Delay(3000);
            _showErrorPurpose = false;
            StateHasChanged();
            _showAddPurpose = false;
            _newPurposeKey = "";
            _newPurposeValue = "";
            return;
        }
        Project.Projectpurpose.TryAdd(_newPurposeKey, _newPurposeValue);
        _showEditPurpose.TryAdd(_newPurposeKey, false);
        _purposeKeyEdit.TryAdd(_newPurposeKey, _newPurposeKey);
        _purposeValueEdit.TryAdd(_newPurposeKey, _newPurposeValue == "" ? null : _newPurposeValue);
        _showAddPurpose = false;
        _newPurposeKey = "";
        _newPurposeValue = "";
        StateHasChanged();
    }

    private void StopAddingPurpose()
    {
        _showAddPurpose = false;
        _newPurposeKey = "";
        _newPurposeValue = "";
        StateHasChanged();
    }

    private void DeleteEmployee(Employee emp)
    {
        Project.Employees.Remove(emp);
    }

    public void Showing()
    {
        _show = !_show;
        StateHasChanged();
    }
    public void Showing2()
    {
        _showDeleteConfirmation = !_showDeleteConfirmation;
        StateHasChanged();
    }

    public void PopUpDeleteConfirmationEmployee(Employee emp)
    {
        EmployeeToDelete = emp;
        _showDeleteConfirmation = !_showDeleteConfirmation;
    }
    
}

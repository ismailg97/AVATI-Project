@using AVATI.Data
@using DocumentFormat.OpenXml.Drawing
@using Microsoft.AspNetCore.Http

@inject IProjektService _projektService
@inject JsonImport _jsonImport
@inject IHardskillService _hardskillService
@inject IProjectActivityService _projectActivityService
@inject NavigationManager _navManager
@inject IEmployeeService _employeeService
@inject IBasicDataService _basicDataService

<div>
    Anzeigen der Projekte, bei denen Sie sich noch keine Projekttätigkeit zugewiesen haben: 
    @if (_justShowNone)
    {
        <button type="button" @onclick="() => { _justShowNone = false; }" class="btn btn-info">Anzeigen abbrechen</button>
    }
    else
    {
        <button type="button" @onclick="HandleClickZeigen" class="btn btn-info">Zeigen</button>
    }
    <div style="color: darkred; margin-left: 10px; font-weight: 650;" class="alert alert-danger @(!_showAlert ? "collapse" : "")" role="alert">
                Es existiert kein Projekt, bei welchem Sie sich zu keiner Projekttätigkeit zugewiesen haben
            </div>
</div>

<div class="form-group col-6">
        <span class="oi oi-magnifying-glass"></span>
        <input id="FilterField" class="form-control" type="text" placeholder="Filter nach Projekttiteln..."
               @bind="Filter"
               @bind:event="oninput">
</div>

<table class="table">
    @if (_projects.Exists(x => EqualsFilter(x.Projecttitel)))
        {
            <thead class="thead-dark">
            <tr>
                <th class="tTitle">Projekt</th>
                <th>Projekttätigkeiten</th>
            </tr>
            </thead>
            <tbody>
        @foreach (var projectId in _projectWithGroupedActivities.Keys)
        {
            var project = _projects.Find(x => x.ProjectID == projectId);
            var projectTitle = project.Projecttitel;
            var projectDescription = project.Projectdescription;
            if (!EqualsFilter(projectTitle)) continue;
            if (_justShowNone && _projectWithGroupedActivities[projectId].Any()) continue;
            <tr>
                <td class="tTitle">
                    <div class="alert alert-secondary"><b style="color: #545454;">Titel:</b> <a>@projectTitle</a>
                        <p/>
                        <b style="color: #545454;">Beschreibung:</b> <a>@projectDescription</a>
                        <p/>
                    </div>
                    @if (_activitiesToChoose[projectId].Any())
                    {
                        <div class="alert alert-success" style="font-size: small; font-weight: 600 !important; color: darkgreen;">
                            Tätigkeit hinzufügen
                            <button type="button" class="btn btn-success" @onclick="() => ShowPopUpCreate(projectId)"> <span class="oi oi-plus"></span></button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-danger" style="font-size: small; font-weight: 600 !important; color: darkred;">
                            Sie können sich keiner Tätigkeit mehr zuweisen
                        </div>
                    }
                </td>
                <td>
                    @if (!_projectWithGroupedActivities[projectId].Any())
                    {
                        <a>[Sie haben sich noch keiner Tätigkeit zugewiesen]</a>
                    }
                    else
                    {
                        <table class="table table-striped">
                            <thead class="tWrite">
                            <tr>
                                <th class="tActivity">Tätigkeit</th>
                                <th class="tHardskills">Hardskills</th>
                                <th class="tSoftskills">Softskills</th>
                                <th class="tEdit"></th>
                                <th class="tDelte"></th>
                            </tr>
                            </thead>

                            <tbody>
                            @foreach (var activity in _projectWithGroupedActivities[projectId])
                            {
                                <tr>
                                    <td class="tActivity">@activity.Description</td>
                                    <td class="tHardskills">
                                        @if (activity.HardSkills.Any())
                                        {
                                            foreach (var hardskill in activity.HardSkills)
                                            {
                                                <button type="button" class="btn hardskill btn-sm">@hardskill</button>
                                            }
                                        }
                                        else
                                        {
                                            <small style="color: #818181;">[Keine Hardskills zugewiesen]</small>
                                        }
                                    </td>
                                    <td class="tSoftskills">
                                        @if (activity.SoftSkills.Any())
                                        {
                                            @foreach (var softskill in activity.SoftSkills)
                                            {
                                                <button type="button" class="btn softskill btn-sm">@softskill</button>
                                            }
                                        }
                                        else
                                        {
                                            <small style="color: #818181;">[Keine Softskills zugewiesen]</small>
                                        }
                                    </td>
                                    <td class="tEdit">
                                        <button type="button" class="btn btn-secondary" @onclick="() => ShowPopUpEdit(activity)"><span class="oi oi-pencil" aria-hidden="true"></span></button>
                                    </td>
                                    <td class="tDelte">
                                        <button type="button" class="btn btn-danger" @onclick="() => ShowPopUpDelete(activity)"><span class="oi oi-trash"></span></button>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    }
                </td>
            </tr>
        }
        </tbody>
        }
        else
        {
            <div style="color: darkred; font-weight: 700;" class="alert alert-danger">Kein Ergebnis</div>
        }
</table>


@if (_showCreate || _showEdit )
{
    var projecttitle = _projektService.GetProject(_projectActivity.ProjectID).Projecttitel;
    
    <div class="modal fade show" id="myModal" style=" display: inline-block;">
        <div class="modal-dialog border-dark modal-dialog- modal-lg">
            <div class="modal-content">
                <div class="modal-header flex-column">
                    @if(_showCreate) {
                        <h4 style="word-break: break-word;" class="modal-title col-12 text-center">Hinzufügen einer Projekttätigkeit im Projekts "<b>@projecttitle</b>"</h4>
                    }
                    else
                    {
                        <h4 style="word-break: break-word;" class="modal-title col-12 text-center">Aktivität "<b>@_projectActivity.Description</b>" des Projekts "@projecttitle" bearbeiten</h4>
                    }
                </div>
                <div class="modal-body">
                    <div class="form-group">

                        @if(_showCreate) 
                        {
                            <!------ Project Activity ---------->
                            <div class="form-group">
                                <label class="form-label">Projektaktivität: </label>
                                <select class="select form-control" @bind="_projectActivity.Description">
                                    @foreach (var activity in _activitiesToChoose[_projectActivity.ProjectID])
                                    {
                                        <option value="@activity" style="word-break: break-word; width: 500px;">@activity</option>
                                    }
                                </select>
                            </div>
                            
                        }
                        
                        <div class="text-center">

                        <!------ Soft Skills ---------->
                        <div class="form-group alert alert-info">
                            <label class="form-label">Softskills, welche Sie bei der Tätigkeit angewendet haben:</label>
                            <p/>
                            @if (_projectActivity.SoftSkills.Any())
                            {
                                foreach (var softskill in _projectActivity.SoftSkills)
                                {
                                    if (Employee.Softskills.Contains(softskill))
                                    {
                                        <button type="button" class="btn btn-outline-success btn-sm mr-2" @onclick=@(() => { _projectActivity.SoftSkills.Remove(softskill); })>
                                            <a class="showRemove">@softskill</a> <a class="remove"><span class="oi oi-x"></span></a>
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-outline-danger btn-sm mr-2" @onclick=@(() => { _projectActivity.SoftSkills.Remove(softskill); })>
                                            <a class="showRemove">@softskill</a> <a class="remove"><span class="oi oi-x"></span></a>
                                        </button>
                                    }
                                }
                                
                            }
                            else
                            {
                                <small style="color: #818181;">[Keine Softskills zugewiesen]</small>
                            }
                        </div>
                        @foreach (var softskill in Employee.Softskills)
                        {
                            if (!_projectActivity.SoftSkills.Contains(softskill))
                            {
                                <button type="button" class="btn btn-outline-dark btn-sm mr-2 mb-2" @onclick=@(() => { _projectActivity.SoftSkills.Add(softskill); })>
                                    @softskill
                                </button>
                            }
                        }
                        <hr/>


                        <!------ Hard Skills ---------->
                        <div class="form-group alert alert-info">
                            <label class="form-label">Hardskills, welche Sie bei der Tätigkeit angewendet haben:</label>
                            <p/>
                            @if (_projectActivity.HardSkills.Any())
                            {
                                foreach (var hardskill in _projectActivity.HardSkills)
                                {
                                    if (Employee.Hardskills.Exists(x => x.Description == hardskill))
                                    {
                                        <button type="button" class="btn btn-outline-success btn-sm mr-2" @onclick=@(() => { _projectActivity.HardSkills.Remove(hardskill); })>
                                            <a class="showRemove">@hardskill</a> <a class="remove"><span class="oi oi-x"></span></a>
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-outline-danger btn-sm mr-2" @onclick=@(() => { _projectActivity.HardSkills.Remove(hardskill); })>
                                            <a class="showRemove">@hardskill</a> <a class="remove"><span class="oi oi-x"></span></a>
                                        </button>
                                    }
                                }
                            }
                            else
                            {
                                <small style="color: #818181;">[Keine Hardskills zugewiesen]</small>
                            }
                        </div>

                        
                        @foreach (var hardskill in Employee.Hardskills)
                        {
                            if (!_projectActivity.HardSkills.Contains(hardskill.Description))
                            {
                                <button type="button" class="btn btn-outline-dark btn-sm mr-2 mb-2" @onclick=@(() => { _projectActivity.HardSkills.Add(hardskill.Description); })>
                                    @hardskill.Description
                                </button>
                            }
                        }
                        <hr/>
                        </div>
                    </div>

                    <div class="float-right">
                        <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="(() => { _showCreate = _showEdit = false; })">
                            <span class="oi oi-circle-x" aria-hidden="true"></span> Abbrechen
                        </button>
                        <button type="button" class="btn btn-success" data-dismiss="modal" @onclick="@(_showCreate ? CreateProjectActivity: EditProjectActivity)">
                            <span class="oi oi-document" aria-hidden="true"></span> Speichern
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
        <div class="modal-backdrop fade show"></div>
}

@if (_showDelete)
{
    <div class="modal fade show" id="myModal" style=" display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Löschvorgang bestätigen</h4>
                    <button type="button" class="close" data-dismiss="modal" @onclick="() => { _showDelete = false; }">&times;</button>
                </div>
            
                <div class="modal-body">
                    Sind Sie sicher, dass die Projektaktivität "<b style="word-break: break-word;">@_projectActivity.Description</b>" gelöscht werden soll?
                </div>
            
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="() => { _showDelete = false; }">Abbrechen</button>
                    <button type="button" class="btn btn-success" @onclick="DeleteProjectActivity">Ok</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {
    [Parameter]
    public Employee Employee { get; set; }

    private Dictionary<int, List<ProjectActivity>> _projectWithGroupedActivities;
    private ProjectActivity _projectActivity;

    private Dictionary<int, List<string>> _activitiesToChoose;
    private List<Project> _projects;
    
    private string Filter { get; set; }

    private bool _showAlert;
    private bool _justShowNone;
    private bool _showCreate;
    private bool _showEdit;
    private bool _showDelete;
    
    protected override void OnInitialized()
    {
        _showAlert = false;
        _justShowNone = false;
        _showCreate = false;
        _showEdit = false;
        _showDelete = false;
        SetProjectActivities();
        GetActivitiesOfProjectEmployee();
    }

    private void SetProjectActivities()
    {
        _projectWithGroupedActivities = new Dictionary<int, List<ProjectActivity>>();
        foreach (var activity in Employee.ProjectActivities)
        {
            if (activity.Description == null)
            {
                if (_projectWithGroupedActivities.ContainsKey(activity.ProjectID)) continue;
                _projectWithGroupedActivities.Add(activity.ProjectID, new List<ProjectActivity>());
            }
            else
            {
                if (_projectWithGroupedActivities.ContainsKey(activity.ProjectID))
                    _projectWithGroupedActivities[activity.ProjectID].Add(activity);
                else
                    _projectWithGroupedActivities.Add(activity.ProjectID, new List<ProjectActivity>() { activity });
            }
        }
        StateHasChanged();
    }

    private void EditProjectActivity()
    {
        //_projectActivityService.UpdateSkillsToActivity(_projectActivity.ProjectActivityID, _projectActivity.HardSkills, _projectActivity.SoftSkills);
        var editActivity = Employee.ProjectActivities.Find(x => x.ProjectActivityID == _projectActivity.ProjectActivityID);
        
        if(editActivity != null) {
            editActivity.HardSkills = new List<string>(_projectActivity.HardSkills);
            editActivity.SoftSkills = new List<string>(_projectActivity.SoftSkills);
        }
        SetProjectActivities();
        StateHasChanged();
        _showEdit = false;
    }

    private void ShowPopUpEdit(ProjectActivity activity)
    {
        _projectActivity = new ProjectActivity
        {
            ProjectActivityID = activity.ProjectActivityID,
            ProjectID = activity.ProjectID,
            EmployeeID = activity.EmployeeID,
            Description = activity.Description,
            HardSkills = new List<string>(activity.HardSkills),
            SoftSkills = new List<string>(activity.SoftSkills)
        };
        _showEdit = true;
    }

    private void DeleteProjectActivity()
    {
        //_projectActivityService.DeleteProjectActivityToEmployee(_projectActivity.ProjectActivityID);
        var projectActivity = Employee.ProjectActivities.Find(x => x.ProjectActivityID == _projectActivity.ProjectActivityID);
        if(projectActivity != null)
            projectActivity.Description = null;
        SetProjectActivities();
        GetActivitiesOfProjectEmployee();
        StateHasChanged();
        _showDelete = false;
    }

    private void ShowPopUpDelete(ProjectActivity activity)
    {
        _projectActivity = activity;
        _showDelete = true;
    }

    private void CreateProjectActivity()
    {
        //_projectActivityService.SetProjectActivityToEmployee(_projectActivity); 
        var newProjectActivity = new ProjectActivity()
        {
            ProjectID = _projectActivity.ProjectID,
            EmployeeID = _projectActivity.EmployeeID,
            Description = _projectActivity.Description,
            HardSkills = new List<string>(_projectActivity.HardSkills),
            SoftSkills = new List<string>(_projectActivity.SoftSkills)
        };
        Employee.ProjectActivities.Add(newProjectActivity);
        SetProjectActivities();
        GetActivitiesOfProjectEmployee();
        StateHasChanged();
        _showCreate = false;
    }

    private void ShowPopUpCreate(int projectId)
    {
        _projectActivity = new();
        if (_activitiesToChoose[projectId].Any())
            _projectActivity.Description = _activitiesToChoose[projectId][0];
        _projectActivity.ProjectID = projectId;
        _projectActivity.EmployeeID = Employee.EmployeeID;
        _showCreate = true;
    }

    private void GetActivitiesOfProjectEmployee()
    {
        _activitiesToChoose = new Dictionary<int, List<string>>();
        _projects = new List<Project>();
        foreach (var projectId in _projectWithGroupedActivities.Keys)
        {
            var project = _projektService.GetProject(projectId);
            if(project != null)
                _projects.Add(project);
            var activitiesOfProject = _projectActivityService.GetActivitiesDesOfProject(projectId);
            var activitiesAlreadyIn = _projectWithGroupedActivities[projectId];
            var result = new List<string>();

            foreach (var activity in activitiesOfProject.Where(x => !activitiesAlreadyIn.Exists(k => k.Description == x)))
            {
                result.Add(activity);
            }
            _activitiesToChoose.Add(projectId, result);
        }
        StateHasChanged();
    }

    private bool EqualsFilter(string title)
    {
        return string.IsNullOrEmpty(Filter) || title.Contains(Filter, StringComparison.OrdinalIgnoreCase);
    }
    
    private async void ShowingAlert()
    {
        _showAlert = true;
        StateHasChanged();
        await Task.Delay(3000);
        _showAlert = false;
        StateHasChanged();
    }

    private bool AnyContainsNoActivity()
    {
        foreach (var activities in _projectWithGroupedActivities.Values)
        {
            if (!activities.Any()) 
                return true;
        }
        return false;
    }

    private void HandleClickZeigen()
    {
        if (!AnyContainsNoActivity())
            ShowingAlert();
        else
            _justShowNone = true;
    }

}
@page "/BasicDataAbstract"
@using AVATI.Data

@inject IBasicDataService _basicDataService
@inject IHardskillService _hardskillService

<h1><b>Basisdaten</b> <small>Hier können Sie Basisdaten hinzugefügen, editieren und löschen</small></h1>
<hr />

<EditBasicData @ref="_editBasicData" OldDescription="@Description" Type="@Type"/>
<DeleteConfirmation @ref="_deleteConfirmation" Description="@Description" Type="@Type"/>
<CreateBasicData @ref="_createBasicData" Type="@Type"/>

<CreateHardskill @ref="_createHardskill"/>
<EditHardskill @ref="_editHardskill" OldHardskill="@_hardskillService.GetHardskill(Description)"/>

<h3 class="cap"><b>Skills</b></h3>
<table class="table table-striped">
    <caption><h5><b>Softskills</b></h5></caption>
    <div class="form-group">
        <input class="form-control" type="text" placeholder="Filter..."
               @bind="Filter[0]"
               @bind:event="oninput">
    </div>
    <tr>
        <th>Bezeichnung</th>
        <th>Bearbeiten</th>
        <th>Löschen</th>
    </tr>
    @foreach (string softskill in _basicDataService.GetAllSoftSkills())
    {
        @if (!IsVisible(softskill, 0))
            continue;
        <tr>
            <td>@softskill</td>
            <td class="smalltd"><button class="btn btn-secondary" @onclick="() => PopEditBasicData(softskill, BasicDataType.SoftSkill)">Edit</button></td>
            <td class="smalltd"><button class="btn btn-dark" @onclick="() => PopDelete(softskill, BasicDataType.SoftSkill)">Delete</button></td>
        </tr>
    }
</table>
<div> <button class="btn btn-info" @onclick="() => PopCreateBasicData(BasicDataType.SoftSkill)">Create</button> </div>

<table class="table table-striped">
    <caption><h5><b>Hardskills</b></h5></caption>
    <div class="form-group">
            <input class="form-control" type="text" placeholder="Filter..."
                   @bind="Filter[1]"
                   @bind:event="oninput">
    </div>
    <tr>
        <th>Bezeichnung</th>
        <th>Bearbeiten</th>
        <th>Löschen</th>
    </tr>
        
    @foreach (Hardskill hardskill in _hardskillService.GetAllHardskills())
    {
        @if (!IsVisible(hardskill.Description, 1))
            continue;
        
        <tr class="showskill">
            <td>@hardskill.Description</td>
            <td class="smalltd"><button class="btn btn-secondary" @onclick="() => PopEditHardskill(hardskill.Description)">Edit</button></td>
            <td class="smalltd">
                <button class="btn btn-dark" @onclick="() => PopDelete(hardskill.Description, BasicDataType.HardSkill)">Delete</button>
            </td>
        </tr>
        
        @if(hardskill.Uppercat != null) {
            <div class="hideskill"><ShowUpperCat Hardskill="@hardskill"/><a>@hardskill.Description</a></div>
        } else {
            <div class="hideskill"><a>Keine Kategorisierung</a></div>
        }
    }
</table>
<div> <button class="btn btn-info" @onclick="PopCreateHardskill">Create</button> </div>

<table class="table table-striped">
    <caption><h5><b>Hardskillkategorien</b></h5></caption>
    <div class="form-group">
            <input class="form-control" type="text" placeholder="Filter..."
                   @bind="Filter[2]"
                   @bind:event="oninput">
    </div>
    <tr>
        <th>Bezeichnung</th>
        <th>Bearbeiten</th>
        <th>Löschen</th>
    </tr>
        
    @foreach (Hardskill hardskillcat in _hardskillService.GetAllHardskillCategorys())
    {
        @if (!IsVisible(hardskillcat.Description, 2))
            continue;
        
        @if (hardskillcat.IsRoot())
        {
            <tr class="showcat">
                <td>@hardskillcat.Description</td>
                <td class="smalltd"><button class="btn btn-secondary">Edit</button></td>
                <td class="smalltd"><button class="btn btn-dark">Delete</button></td>
            </tr>

            <div class="hidecat"><TreeElement Hardskills="@(new List<Hardskill>() {hardskillcat})"/></div>
        }
    }
</table>
<div> <button class="btn btn-info">Create</button> </div>


<h3 class="cap"><b>Branchen</b><a></a></h3>
<div class="form-group">
        <input class="form-control" type="text" placeholder="Filter..."
               @bind="Filter[3]"
               @bind:event="oninput">
</div>
<table class="table">
    <tr>
        <th>Bezeichnung</th>
        <th>Bearbeiten</th>
        <th>Löschen</th>
    </tr>
    @foreach(var field in _basicDataService.GetAllFields()) {
        
        @if (!IsVisible(field, 3))
            continue;
        
        <tr>
            <td>@field</td>
            <td class="smalltd"><button class="btn btn-secondary" @onclick="() => PopEditBasicData(field, BasicDataType.Field)">Edit</button></td>
            <td class="smalltd"><button class="btn btn-dark" @onclick="() => PopDelete(field, BasicDataType.Field)">Delete</button></td>
        </tr>
    }
</table>
<div> <button class="btn btn-info" @onclick="() => PopCreateBasicData(BasicDataType.Field)">Create</button> </div>



<h3 class="cap"><b>Rollen</b></h3>
<div class="form-group">
        <input class="form-control" type="text" placeholder="Filter..."
               @bind="Filter[4]"
               @bind:event="oninput">
</div>
<table class="table">
    <tr>
        <th>Bezeichnung</th>
        <th>Bearbeiten</th>
        <th>Löschen</th>
    </tr>
    @foreach(var role in _basicDataService.GetAllRoles()){
        
        @if (!IsVisible(role, 4))
            continue;
        
        <tr>
            <td>@role</td>
            <td class="smalltd"><button class="btn btn-secondary" @onclick="() => PopEditBasicData(role, BasicDataType.Role)">Edit</button></td>
            <td class="smalltd"><button class="btn btn-dark" @onclick="() => PopDelete(role, BasicDataType.Role)">Delete</button></td>
        </tr>
    }
</table>
<div> <button class="btn btn-info" @onclick="() => PopCreateBasicData(BasicDataType.Role)">Create</button> </div>


@code {
    CreateBasicData _createBasicData;
    EditBasicData _editBasicData;
    DeleteConfirmation _deleteConfirmation;

    CreateHardskill _createHardskill;
    EditHardskill _editHardskill;

    //0: Filter for Softskill, 1: Filter for Hardskill, 2: Filter for Hardskillcategory
    //3: Filter for Field, 4: Filter for Role
    private string[] Filter { get; set; } = new string[5];
    
    private string Description { get; set; }

    private BasicDataType Type { get; set; }
    

    private bool IsVisible(string description, int index)
    {
        return string.IsNullOrEmpty(Filter[index]) || description.Contains(Filter[index], StringComparison.OrdinalIgnoreCase);
    }

    void PopCreateBasicData(BasicDataType type)
    {
        Type = type;
        _createBasicData.Showing();
    }

    void PopEditBasicData(string description, BasicDataType type)
    {
        Type = type;
        Description = description;
        _editBasicData.Showing();
    }

    void PopDelete(string description, BasicDataType type)
    {
        Type = type;
        Description = description;
        _deleteConfirmation.Showing();
    }

    void PopCreateHardskill()
    {
        _createHardskill.Showing();
    }

    void PopEditHardskill(string description)
    {
        Description = description;
        _editHardskill.Showing();
    }
}
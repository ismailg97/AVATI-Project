@page "/EditTreeElement"
@using AVATI.Data
@using System.Runtime.CompilerServices
@using System.Collections.Generic

@inject IHardskillService _hardskillService

@foreach(var hardskillcat in Hardskills)
{
    <ContextMenu Id="@hardskillcat.Description">
        <Item OnClick="() => Delete(hardskillcat)">Delete &#128465;</Item>
        <Item>Rename </Item>
    </ContextMenu>
}

@if(!Hardskills.Any())
{
    <ul>
        @if(!ShowNew) {
            <li><a type="button" class="button" @onclick="ShowingNew">+</a></li>
        } else {
            <li>
                <input type="text" id="softskill" @bind="_new"/>
                <a type="button" class="button" @onclick="CreateNew">&#10003;</a>
                <a type="button" class="button" @onclick="ShowingNew">&#10005;</a>
                </li>
        }
    </ul>
} 
else if ( Hardskills[0].IsRoot()) 
{
    <div>
        <ul class="tree">
            @foreach (var hardskillcat in Hardskills) {
                
                if (!Show.ContainsKey(hardskillcat.Description))
                {
                    Show.Add(hardskillcat.Description, !hardskillcat.ContainsHardskills());
                }
                
                <li>
                    <ContextMenuTrigger MenuId="@hardskillcat.Description">
                        <a type="button" @onclick="() => Showing(hardskillcat.Description)">@hardskillcat.Description</a>
                    </ContextMenuTrigger>
                    
                    @if (Show[hardskillcat.Description] && hardskillcat.Subcat != null)
                    {
                        if (hardskillcat.Subcat.Any())
                        {
                            <EditTreeElement Hardskills="@hardskillcat.Subcat"/>
                        }
                        else
                        {
                            <EditTreeElement Hardskills="@hardskillcat.Subcat" Uppercat="@hardskillcat"/>
                        }
                    }
                </li>
            }
        </ul>
    </div>
}
else
{
    @if (!ShowBetween)
    {
        <div class="between"><a type="button" class="button" @onclick="ShowingBetween">+</a></div>
        <ul>
            @foreach (var hardskillcat in Hardskills) {
                
                if (!Show.ContainsKey(hardskillcat.Description))
                {
                    Show.Add(hardskillcat.Description, !hardskillcat.ContainsHardskills());
                }
                
                <li>
                    <ContextMenuTrigger MenuId="@hardskillcat.Description">
                        <a type="button" @onclick="() => Showing(hardskillcat.Description)">@hardskillcat.Description</a>
                    </ContextMenuTrigger>
                    @if (Show[hardskillcat.Description] && hardskillcat.Subcat != null)
                    {
                        if (hardskillcat.Subcat.Any())
                        {
                            <EditTreeElement Hardskills="@hardskillcat.Subcat"/>
                        }
                        else
                        {
                            <EditTreeElement Hardskills="@hardskillcat.Subcat" Uppercat="@hardskillcat"/>
                        }
                    }
                </li>
            }
            
            @if(!ShowNew) {
                <li><a type="button" class="button" @onclick="ShowingNew">+</a></li>
            } else {
                <li>
                    <input type="text" id="softskill" @bind="_new"/>
                    <a type="button" class="button" @onclick="CreateNew">&#10003;</a>
                    <a type="button" class="button" @onclick="ShowingNew">&#10005;</a>
                </li>
            }
        </ul>
    } else {
        <ul>
            <li><input type="text" id="softskill" @bind="_between"/>
                <a type="button" class="button" @onclick="CreateBeetween">&#10003;</a>
                <a type="button" class="button" @onclick="ShowingBetween">&#10005;</a>
                <ul>
                    @foreach (var hardskillcat in Hardskills) {
                        
                        if (!Show.ContainsKey(hardskillcat.Description))
                        {
                            Show.Add(hardskillcat.Description, !hardskillcat.ContainsHardskills());
                        }
                        
                        <li><a class="@(IsInList(hardskillcat.Description) ? "green": "red")" type="button" @onclick="() => AddList(hardskillcat)">@hardskillcat.Description</a>
                    
                            @if (Show[hardskillcat.Description] && hardskillcat.Subcat != null)
                            {
                                if (hardskillcat.Subcat.Any()) {
                                    <EditTreeElement Hardskills = "@hardskillcat.Subcat"/>
                                } else {
                                    <EditTreeElement Hardskills = "@hardskillcat.Subcat" Uppercat="@hardskillcat"/>
                                }
                            }
                        </li>
                    }
                    
                    @if(!ShowNew) {
                        <li><a type="button" class="button" @onclick="ShowingNew">+</a></li>
                    } else {
                        <li>
                            <input type="text" id="softskill" @bind="_new"/>
                            <a type="button" class="button" @onclick="CreateNew">&#10003;</a>
                            <a type="button" class="button" @onclick="ShowingNew">&#10005;</a>
                        </li>
                    }
                </ul>
            </li>
        </ul>
    }
    
}


@code {

    [Parameter]
    public List<Hardskill> Hardskills { get; set; }

    [Parameter]
    public Hardskill Uppercat { get; set; }

    private Dictionary<string, bool> Show { get; set; } = new();

    private List<Hardskill> Subcat { get; set; } = new();

    private bool ShowBetween { get; set; } = false;

    private bool ShowNew { get; set; } = false;

    private string _between;

    private string _new;


    private void ShowingBetween()
    {
        ShowBetween = !ShowBetween;
        Subcat.Clear();
    }

    private void ShowingNew()
    {
        ShowNew = !ShowNew;
    }

    private void Showing(string hardskill)
    {
        Show[hardskill] = !Show[hardskill];
    }

    private bool IsInList(string description)
    {
        return Subcat.Exists(x => x.Description == description);
    }

    private void AddList(Hardskill hardskill)
    {
        if (Subcat.Contains(hardskill))
            Subcat.Remove(hardskill);
        else
            Subcat.Add(hardskill);
        Showing(hardskill.Description);
    }

    private void CreateBeetween()
    {
        Hardskill hardskillcat = new()
        {
            Description = _between,
            Uppercat = Hardskills[0].Uppercat,
            Subcat = new List<Hardskill>(Subcat),
            Height = 2,
            IsHardskill = false
        };
        Subcat.Clear();
        _hardskillService.CreateHardskillCategory(hardskillcat);
        ShowingBetween();
    }

    private void CreateNew()
    {
        Hardskill hardskillcat = new()
        {
            Description = _new,
            Uppercat = Hardskills.Any() ? Hardskills[0].Uppercat : Uppercat,
            Subcat = new List<Hardskill>(),
            Height = 2,
            IsHardskill = false
        };
        _hardskillService.CreateHardskillCategory(hardskillcat);
        ShowingNew();
    }

    private void Delete(Hardskill hardskill)
    {
        if (hardskill.IsHardskill)
            _hardskillService.DeleteHardskill(hardskill.Description);
        else
            _hardskillService.DeleteHardskillCategory(hardskill.Description);
    }

}